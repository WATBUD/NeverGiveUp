(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["main"],{

/***/ "./node_modules/webpack/hot sync ^\\.\\/log$":
/*!*************************************************!*\
  !*** (webpack)/hot sync nonrecursive ^\.\/log$ ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./log": "./node_modules/webpack/hot/log.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) { // check for number or string
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return id;
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/webpack/hot sync ^\\.\\/log$";

/***/ }),

/***/ "./src/$$_lazy_route_resource lazy recursive":
/*!**********************************************************!*\
  !*** ./src/$$_lazy_route_resource lazy namespace object ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function webpackEmptyAsyncContext(req) {
	// Here Promise.resolve().then() is used instead of new Promise() to prevent
	// uncaught exception popping up in devtools
	return Promise.resolve().then(function() {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	});
}
webpackEmptyAsyncContext.keys = function() { return []; };
webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
module.exports = webpackEmptyAsyncContext;
webpackEmptyAsyncContext.id = "./src/$$_lazy_route_resource lazy recursive";

/***/ }),

/***/ "./src/Module/APModeModule.ts":
/*!************************************!*\
  !*** ./src/Module/APModeModule.ts ***!
  \************************************/
/*! exports provided: ModeParameter, Wave, APModeModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModeParameter", function() { return ModeParameter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Wave", function() { return Wave; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APModeModule", function() { return APModeModule; });
/* harmony import */ var _BoxSelectionArea__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BoxSelectionArea */ "./src/Module/BoxSelectionArea.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var ModeParameter = /** @class */ (function () {
    function ModeParameter(inputmax) {
        this.frame_selection_range = [];
        this.coordinateX = 0;
        this.coordinateY = 0;
        this.red = 0;
        this.green = 0;
        this.blue = 0;
        this.saturation = 0; //飽和度 0~1
        this.value = 0; //明度 0~1
        this.canEffectCenter = false;
        this.color_quantity = 9;
        this.check = true;
        this.colors = ["#ff0000", "#ff8000", "#80ff00", "#00ff00", "#00ffff", "#0000ff", "#8000ff", "#ff00ff", "#ff0080", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff"]; //RGB
        this.ParameterNumberList = [
            {
                visible: false,
                translate: 'OPACITY',
                maxValue: 100,
                minValue: 0,
                setValue: 50,
                field: 'opacity',
            },
            {
                visible: false,
                translate: 'SPEED',
                maxValue: 10,
                minValue: 1,
                setValue: 1,
                field: 'speed',
            },
            {
                visible: false,
                translate: 'BANDWIDTH',
                maxValue: 500,
                minValue: 50,
                setValue: 50,
                field: 'bandwidth',
            },
            {
                visible: false,
                translate: 'ANGLE',
                maxValue: 360,
                minValue: 0,
                setValue: 0,
                field: 'angle',
            },
            {
                visible: false,
                translate: 'NUMBER',
                maxValue: 10,
                minValue: 0,
                setValue: 0,
                field: 'number',
            },
            {
                visible: false,
                translate: 'FIRE',
                maxValue: 10,
                minValue: 0,
                setValue: 0,
                field: 'fire',
            },
            {
                visible: false,
                translate: 'GAP',
                maxValue: 500,
                minValue: 0,
                setValue: 0,
                field: 'gap',
            },
            {
                visible: false,
                translate: 'SPEED',
                maxValue: 360,
                minValue: 0,
                setValue: 0,
                field: 'speed',
            },
            {
                visible: false,
                translate: 'RADIUS',
                maxValue: 300,
                minValue: 0,
                setValue: 0,
                field: 'radius',
            },
            {
                visible: false,
                translate: 'AMPLITUDE',
                maxValue: 8000,
                minValue: 200,
                setValue: 200,
                field: 'amplitude',
            },
        ];
        this.ParameterBoolList = [
            {
                visible: false,
                translate: 'BUMP',
                setValue: false,
                field: 'bump',
            },
            {
                visible: false,
                translate: 'SEPARATE',
                setValue: false,
                field: 'separate',
            },
            {
                visible: false,
                translate: 'DIRECTION',
                setValue: false,
                field: 'direction',
            },
            {
                visible: false,
                translate: 'FADE',
                setValue: false,
                field: 'fade',
            },
            {
                visible: false,
                translate: 'BIDIRECTIONAL',
                setValue: false,
                field: 'bidirectional',
            },
            {
                visible: false,
                translate: 'GRADIENT',
                setValue: false,
                field: 'gradient',
            },
            {
                visible: false,
                translate: 'FIXED',
                setValue: false,
                field: 'fixed',
            },
        ];
        for (var index = 0; index < inputmax; index++) {
            this.frame_selection_range.push(true);
        }
    }
    return ModeParameter;
}());

var Wave = /** @class */ (function (_super) {
    __extends(Wave, _super);
    function Wave(inputmax) {
        var _this = _super.call(this, inputmax) || this;
        _this.sortPosition = 0;
        _this.iconpath = ["./image/ColorSet/Off/Wave.png", "./image/ColorSet/On/Wave.png"];
        _this.name = 'Wave';
        var findlist = ['opacity', 'speed', 'bandwidth', 'angle'];
        var _loop_1 = function (index) {
            var element = findlist[index];
            target = this_1.ParameterNumberList.find(function (x) { return x.field == element; });
            target.visible = true;
            switch (element) {
                case 'bandwidth':
                    target.setValue = 200;
                    break;
                case 'speed':
                    target.setValue = 5;
                    break;
            }
        };
        var this_1 = this, target;
        for (var index = 0; index < findlist.length; index++) {
            _loop_1(index);
        }
        var findlist = ['gradient'];
        var _loop_2 = function (index) {
            var element = findlist[index];
            target2 = this_2.ParameterBoolList.find(function (x) { return x.field == element; });
            target2.visible = true;
        };
        var this_2 = this, target2;
        for (var index = 0; index < findlist.length; index++) {
            _loop_2(index);
        }
        return _this;
    }
    return Wave;
}(ModeParameter));

;
var ConicBand = /** @class */ (function (_super) {
    __extends(ConicBand, _super);
    function ConicBand(inputmax) {
        var _this = _super.call(this, inputmax) || this;
        _this.sortPosition = 1;
        _this.iconpath = ["./image/ColorSet/Off/ConicBand.png", "./image/ColorSet/On/ConicBand.png"];
        _this.name = 'ConicBand';
        _this.canEffectCenter = true;
        var findlist = ['opacity', 'speed', 'bandwidth'];
        var _loop_3 = function (index) {
            var element = findlist[index];
            target = this_3.ParameterNumberList.find(function (x) { return x.field == element; });
            if (target == undefined) {
                console.log('find_Data_fail', target, element);
                return "continue";
            }
            else {
            }
            target.visible = true;
            switch (element) {
                case 'bandwidth':
                    target.setValue = 100;
                    break;
                case 'speed':
                    target.setValue = 5;
                    break;
            }
        };
        var this_3 = this, target;
        for (var index = 0; index < findlist.length; index++) {
            _loop_3(index);
        }
        var findlist = ['gradient'];
        var _loop_4 = function (index) {
            var element = findlist[index];
            target2 = this_4.ParameterBoolList.find(function (x) { return x.field == element; });
            target2.visible = true;
        };
        var this_4 = this, target2;
        for (var index = 0; index < findlist.length; index++) {
            _loop_4(index);
        }
        return _this;
    }
    return ConicBand;
}(ModeParameter));
;
var Spiral = /** @class */ (function (_super) {
    __extends(Spiral, _super);
    function Spiral(inputmax) {
        var _this = _super.call(this, inputmax) || this;
        _this.sortPosition = 2;
        _this.iconpath = ["./image/ColorSet/Off/Spiral.png", "./image/ColorSet/On/Spiral.png"];
        _this.name = 'Spiral';
        _this.canEffectCenter = true;
        var findlist = ['opacity', 'speed'];
        var _loop_5 = function (index) {
            var element = findlist[index];
            target = this_5.ParameterNumberList.find(function (x) { return x.field == element; });
            target.visible = true;
            switch (element) {
                case 'bandwidth':
                    target.setValue = 50;
                    break;
                case 'speed':
                    target.setValue = 5;
                    break;
            }
        };
        var this_5 = this, target;
        for (var index = 0; index < findlist.length; index++) {
            _loop_5(index);
        }
        var findlist = ['gradient'];
        var _loop_6 = function (index) {
            var element = findlist[index];
            target2 = this_6.ParameterBoolList.find(function (x) { return x.field == element; });
            target2.visible = true;
        };
        var this_6 = this, target2;
        for (var index = 0; index < findlist.length; index++) {
            _loop_6(index);
        }
        return _this;
    }
    return Spiral;
}(ModeParameter));
;
var Cycle = /** @class */ (function (_super) {
    __extends(Cycle, _super);
    function Cycle(inputmax) {
        var _this = _super.call(this, inputmax) || this;
        _this.sortPosition = 3;
        _this.iconpath = ["./image/ColorSet/Off/Cycle.png", "./image/ColorSet/On/Cycle.png"];
        _this.name = 'Cycle';
        var findlist = ['opacity', 'speed'];
        var _loop_7 = function (index) {
            var element = findlist[index];
            target = this_7.ParameterNumberList.find(function (x) { return x.field == element; });
            target.visible = true;
            switch (element) {
                case 'speed':
                    target.setValue = 2;
                    break;
            }
        };
        var this_7 = this, target;
        for (var index = 0; index < findlist.length; index++) {
            _loop_7(index);
        }
        var findlist = ['gradient'];
        var _loop_8 = function (index) {
            var element = findlist[index];
            target2 = this_8.ParameterBoolList.find(function (x) { return x.field == element; });
            target2.visible = true;
        };
        var this_8 = this, target2;
        for (var index = 0; index < findlist.length; index++) {
            _loop_8(index);
        }
        return _this;
    }
    return Cycle;
}(ModeParameter));
;
var LinearWave = /** @class */ (function (_super) {
    __extends(LinearWave, _super);
    function LinearWave(inputmax) {
        var _this = _super.call(this, inputmax) || this;
        _this.sortPosition = 4;
        _this.iconpath = ["./image/ColorSet/Off/LinearWave.png", "./image/ColorSet/On/LinearWave.png"];
        _this.name = 'LinearWave';
        var findlist = ['opacity', 'speed', 'bandwidth', 'angle', 'gap'];
        var _loop_9 = function (index) {
            var element = findlist[index];
            target = this_9.ParameterNumberList.find(function (x) { return x.field == element; });
            target.visible = true;
            switch (element) {
                case 'speed':
                    target.setValue = 10;
                    break;
            }
        };
        var this_9 = this, target;
        for (var index = 0; index < findlist.length; index++) {
            _loop_9(index);
        }
        var findlist = ['bump', 'bidirectional', 'gradient'];
        var _loop_10 = function (index) {
            var element = findlist[index];
            target2 = this_10.ParameterBoolList.find(function (x) { return x.field == element; });
            target2.visible = true;
        };
        var this_10 = this, target2;
        for (var index = 0; index < findlist.length; index++) {
            _loop_10(index);
        }
        return _this;
    }
    return LinearWave;
}(ModeParameter));
;
var Ripple = /** @class */ (function (_super) {
    __extends(Ripple, _super);
    function Ripple(inputmax) {
        var _this = _super.call(this, inputmax) || this;
        _this.sortPosition = 5;
        _this.iconpath = ["./image/ColorSet/Off/Ripple.png", "./image/ColorSet/On/Ripple.png"];
        _this.name = 'Ripple';
        //sadad=['opacity','speed','bandwidth','angle','number','fire','gap','????','randomspeed','time','radius','amplitude'];
        var findlist = ['opacity', 'speed', 'bandwidth', 'gap'];
        var _loop_11 = function (index) {
            var element = findlist[index];
            target = this_11.ParameterNumberList.find(function (x) { return x.field == element; });
            target.visible = true;
            switch (element) {
                case 'speed':
                    target.setValue = 10;
                    break;
            }
        };
        var this_11 = this, target;
        for (var index = 0; index < findlist.length; index++) {
            _loop_11(index);
        }
        var findlist = ['gradient'];
        var _loop_12 = function (index) {
            var element = findlist[index];
            target2 = this_12.ParameterBoolList.find(function (x) { return x.field == element; });
            target2.visible = true;
        };
        var this_12 = this, target2;
        for (var index = 0; index < findlist.length; index++) {
            _loop_12(index);
        }
        return _this;
    }
    return Ripple;
}(ModeParameter));
;
var Breathing = /** @class */ (function (_super) {
    __extends(Breathing, _super);
    function Breathing(inputmax) {
        var _this = _super.call(this, inputmax) || this;
        _this.sortPosition = 6;
        _this.iconpath = ["./image/ColorSet/Off/Breathing.png", "./image/ColorSet/On/Breathing.png"];
        _this.name = 'Breathing';
        //sadad=['opacity','speed','bandwidth','angle','number','fire','gap','????','randomspeed','time','radius','amplitude'];
        var findlist = ['opacity', 'speed', 'bandwidth', 'gap'];
        var _loop_13 = function (index) {
            var element = findlist[index];
            target = this_13.ParameterNumberList.find(function (x) { return x.field == element; });
            target.visible = true;
            switch (element) {
                case 'bandwidth':
                    target.setValue = 500;
                    break;
                case 'speed':
                    target.setValue = 2;
                    break;
            }
        };
        var this_13 = this, target;
        for (var index = 0; index < findlist.length; index++) {
            _loop_13(index);
        }
        findlist = [];
        var _loop_14 = function (index) {
            var element = findlist[index];
            target2 = this_14.ParameterBoolList.find(function (x) { return x.field == element; });
            target2.visible = true;
        };
        var this_14 = this, target2;
        for (var index = 0; index < findlist.length; index++) {
            _loop_14(index);
        }
        return _this;
    }
    return Breathing;
}(ModeParameter));
;
var Rain = /** @class */ (function (_super) {
    __extends(Rain, _super);
    function Rain(inputmax) {
        var _this = _super.call(this, inputmax) || this;
        _this.sortPosition = 7;
        _this.iconpath = ["./image/ColorSet/Off/Rain.png", "./image/ColorSet/On/Rain.png"];
        _this.name = 'Rain';
        //sadad=['opacity','speed','bandwidth','angle','number','fire','gap','????','randomspeed','time','radius','amplitude'];
        var findlist = ['opacity', 'speed', 'angle', 'number'];
        var _loop_15 = function (index) {
            var element = findlist[index];
            target = this_15.ParameterNumberList.find(function (x) { return x.field == element; });
            target.visible = true;
            switch (element) {
                case 'speed':
                    target.setValue = 8;
                    break;
                case 'number':
                    target.setValue = 5;
                    break;
            }
        };
        var this_15 = this, target;
        for (var index = 0; index < findlist.length; index++) {
            _loop_15(index);
        }
        findlist = [];
        var _loop_16 = function (index) {
            var element = findlist[index];
            target2 = this_16.ParameterBoolList.find(function (x) { return x.field == element; });
            target2.visible = true;
        };
        var this_16 = this, target2;
        for (var index = 0; index < findlist.length; index++) {
            _loop_16(index);
        }
        return _this;
    }
    return Rain;
}(ModeParameter));
;
var Fire = /** @class */ (function (_super) {
    __extends(Fire, _super);
    function Fire(inputmax) {
        var _this = _super.call(this, inputmax) || this;
        _this.sortPosition = 8;
        _this.iconpath = ["./image/ColorSet/Off/Fire.png", "./image/ColorSet/On/Fire.png"];
        _this.name = 'Fire';
        _this.color_quantity = 1;
        _this.colors = ["#ff0000"];
        //sadad=['opacity','speed','bandwidth','angle','number','fire','gap','????','randomspeed','time','radius','amplitude'];
        var findlist = ['opacity', 'fire'];
        var _loop_17 = function (index) {
            var element = findlist[index];
            target = this_17.ParameterNumberList.find(function (x) { return x.field == element; });
            target.visible = true;
            switch (element) {
                case 'opacity':
                    target.setValue = 50;
                    break;
                case 'fire':
                    target.setValue = 1;
                    break;
            }
        };
        var this_17 = this, target;
        for (var index = 0; index < findlist.length; index++) {
            _loop_17(index);
        }
        findlist = [];
        var _loop_18 = function (index) {
            var element = findlist[index];
            target2 = this_18.ParameterBoolList.find(function (x) { return x.field == element; });
            target2.visible = true;
        };
        var this_18 = this, target2;
        for (var index = 0; index < findlist.length; index++) {
            _loop_18(index);
        }
        return _this;
    }
    return Fire;
}(ModeParameter));
;
var Trigger = /** @class */ (function (_super) {
    __extends(Trigger, _super);
    function Trigger(inputmax) {
        var _this = _super.call(this, inputmax) || this;
        _this.sortPosition = 9;
        _this.iconpath = ["./image/ColorSet/Off/Trigger.png", "./image/ColorSet/On/Trigger.png"];
        _this.name = 'Trigger';
        var findlist = ['opacity'];
        var _loop_19 = function (index) {
            var element = findlist[index];
            target = this_19.ParameterNumberList.find(function (x) { return x.field == element; });
            target.visible = true;
            switch (element) {
                case 'opacity':
                    target.setValue = 50;
                    break;
            }
        };
        var this_19 = this, target;
        for (var index = 0; index < findlist.length; index++) {
            _loop_19(index);
        }
        return _this;
    }
    return Trigger;
}(ModeParameter));
;
var AudioCap = /** @class */ (function (_super) {
    __extends(AudioCap, _super);
    function AudioCap(inputmax) {
        var _this = _super.call(this, inputmax) || this;
        _this.sortPosition = 10;
        _this.iconpath = ["./image/ColorSet/Off/AudioCap.png", "./image/ColorSet/On/AudioCap.png"];
        _this.check = true;
        _this.name = 'AudioCap';
        _this.color_quantity = 1;
        _this.colors = ["#ff0000"];
        var findlist = ['opacity', 'amplitude'];
        var _loop_20 = function (index) {
            var element = findlist[index];
            target = this_20.ParameterNumberList.find(function (x) { return x.field == element; });
            target.visible = true;
            switch (element) {
                case 'opacity':
                    target.setValue = 50;
                    break;
            }
        };
        var this_20 = this, target;
        for (var index = 0; index < findlist.length; index++) {
            _loop_20(index);
        }
        return _this;
    }
    return AudioCap;
}(ModeParameter));
;
var Static = /** @class */ (function (_super) {
    __extends(Static, _super);
    function Static(inputmax) {
        var _this = _super.call(this, inputmax) || this;
        _this.sortPosition = 11;
        _this.iconpath = ["./image/ColorSet/Off/Static.png", "./image/ColorSet/On/Static.png"];
        _this.name = 'Static';
        _this.color_quantity = 1;
        _this.colors = ["#ff0000"]; //RGB
        //sadad=['opacity','speed','bandwidth','angle','number','fire','gap','????','randomspeed','time','radius','amplitude'];
        var findlist = ['opacity'];
        var _loop_21 = function (index) {
            var element = findlist[index];
            target = this_21.ParameterNumberList.find(function (x) { return x.field == element; });
            target.visible = true;
            switch (element) {
            }
        };
        var this_21 = this, target;
        for (var index = 0; index < findlist.length; index++) {
            _loop_21(index);
        }
        return _this;
    }
    return Static;
}(ModeParameter));
;
var APModeModule = /** @class */ (function () {
    function APModeModule(inputMax) {
        //左上,右上,左下,右下
        this.maxkaycapNumber = 0;
        this.frame_selectionColors = ["#000000", "#ffffff"];
        this.ledcoordinates = [];
        this.AllBlockColor = []; //TOTAL NUMBER
        this.mode_name = ['Wave', 'ConicBand', 'Spiral', 'Cycle', 'LinearWave', 'Ripple', 'Breathing', 'Rain', 'Fire', 'Trigger', 'AudioCap'];
        //mode_name:any=["波浪","撞擊","螺旋","循環","觸發","漣漪","呼吸","下雨","火焰","點亮","音樂"];
        this.modeClassArr = [];
        this.recordModeArr = [];
        this.currentModeIndex = 0;
        this.BSModule_L = new _BoxSelectionArea__WEBPACK_IMPORTED_MODULE_0__["BoxSelectionArea"]("RGBColorBlockStyle");
        this.maxkaycapNumber = inputMax;
        this.modeClassArr = [
            new Wave(this.maxkaycapNumber),
            new ConicBand(this.maxkaycapNumber),
            new Spiral(this.maxkaycapNumber),
            new Cycle(this.maxkaycapNumber),
            new LinearWave(this.maxkaycapNumber),
            new Ripple(this.maxkaycapNumber),
            new Breathing(this.maxkaycapNumber),
            new Rain(this.maxkaycapNumber),
            new Fire(this.maxkaycapNumber),
            new Trigger(this.maxkaycapNumber),
            new AudioCap(this.maxkaycapNumber)
        ];
        this.recordModeArr = [
            new Wave(this.maxkaycapNumber),
        ];
        for (var i = 0; i <= this.maxkaycapNumber; i++) {
            this.AllBlockColor.push({ color: this.frame_selectionColors[0], border: true });
        }
    }
    APModeModule.prototype.getBlock = function (index) {
        var target = this.AllBlockColor[index];
        if (target != undefined) {
            return target;
        }
        else {
            console.log('%c KeyBoardStyle.getTarget', 'color:rgb(255,75,255,1)', this.AllBlockColor, index);
        }
    };
    APModeModule.prototype.getNameSortposition = function (name) {
        console.log("getNameSortposition_indexOf=", this.mode_name.indexOf(name));
        return this.mode_name.indexOf(name);
    };
    APModeModule.prototype.ImportLedClassData = function (InputData) {
        console.log("ImportLedClassData", InputData);
        var arr = Object.keys(this.getTarget());
        for (var index = 0; index < arr.length; index++) {
            if (arr[index] != "") {
                this.getTarget()[arr[index]] = InputData[arr[index]];
            }
        }
    };
    APModeModule.prototype.ImportCreateLedData = function (InputData) {
        console.log("ImportCreateLedData", InputData);
        InputData = JSON.parse(JSON.stringify(InputData));
        this.recordModeArr.push(InputData);
    };
    APModeModule.prototype.getTarget = function () {
        //console.log(" this.recordModeArr[this.currentModeIndex];", this.recordModeArr[this.currentModeIndex]);
        return this.recordModeArr[this.currentModeIndex];
    };
    APModeModule.prototype.switchEffectMode = function (index) {
        var clone = JSON.parse(JSON.stringify(this.modeClassArr[index]));
        console.log("NewswitchEffectMode", clone);
        this.recordModeArr[this.currentModeIndex] = clone;
    };
    APModeModule.prototype.deleteChoose = function () {
        if (this.recordModeArr.length > 1) {
            this.recordModeArr.splice(this.currentModeIndex, 1);
        }
        if (this.currentModeIndex - 1 >= 0) {
            this.currentModeIndex -= 1;
        }
        this.updateframe_selection_range();
        console.log('deleteChoose', "=>currentModeIndex" + this.currentModeIndex);
    };
    APModeModule.prototype.addNewChoose = function () {
        if (this.recordModeArr.length > 10) {
            return;
        }
        this.recordModeArr.push(new Wave(this.maxkaycapNumber));
    };
    APModeModule.prototype.setModeFrameRange = function () {
        var isAllTrue = this.BSModule_L.checkArrayisAllTrue(this.AllBlockColor); //原本是否框著  TRUE=是
        var selectedEls = this.BSModule_L.selectedEls;
        if (isAllTrue) {
            for (var i = 0; i < this.BSModule_L.selectedEls.length; i++) {
                this.AllBlockColor[selectedEls[i]].color = this.frame_selectionColors[0];
                this.AllBlockColor[selectedEls[i]].border = false;
            }
        }
        else {
            for (var i = 0; i < this.BSModule_L.selectedEls.length; i++) {
                this.AllBlockColor[selectedEls[i]].color = this.frame_selectionColors[1];
                this.AllBlockColor[selectedEls[i]].border = true;
            }
        }
        console.log("Result_isAllTrue", isAllTrue);
        console.log("Result_selectedEls", selectedEls);
        var nowMode = this.recordModeArr[this.currentModeIndex];
        for (var index = 0; index < selectedEls.length; index++) {
            nowMode.frame_selection_range[selectedEls[index]] = !isAllTrue;
        }
        this.updateframe_selection_range();
        this.BSModule_L.mouseOn = false;
        return "Finish";
    };
    //原有邊框架構 因客戶要求不顯示邊框 這邊採用border判斷是否顯示此格
    APModeModule.prototype.updateframe_selection_range = function () {
        var range = this.recordModeArr[this.currentModeIndex].frame_selection_range;
        // console.log("LEDModeSelect:range:",range);
        for (var i = 0; i < range.length; i++) {
            //const element = range[index];
            if (range[i] == true) {
                //console.log("LEDModeSelect:true:",i); 
                this.AllBlockColor[i].border = true;
                this.AllBlockColor[i].color = this.frame_selectionColors[1];
            }
            else {
                this.AllBlockColor[i].border = false;
                this.AllBlockColor[i].color = this.frame_selectionColors[0];
            }
        }
    };
    APModeModule.prototype.setCoordinate = function (X, Y) {
        console.log("setCoordinate", X, Y);
        this.recordModeArr[this.currentModeIndex].coordinateX = X;
        this.recordModeArr[this.currentModeIndex].coordinateY = Y;
    };
    APModeModule.prototype.setDefault = function () {
    };
    return APModeModule;
}());



/***/ }),

/***/ "./src/Module/AlertDevice.ts":
/*!***********************************!*\
  !*** ./src/Module/AlertDevice.ts ***!
  \***********************************/
/*! exports provided: AlertDevice */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AlertDevice", function() { return AlertDevice; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var AlertDevice = /** @class */ (function () {
    function AlertDevice() {
    }
    AlertDevice.prototype.click = function (UIID) {
        if (UIID === void 0) { UIID = ""; }
        var Dom = document.getElementById(UIID);
        Dom.addEventListener("click", function (e) {
            console.log("e=", e, "e.target", e.target);
            alert(e);
        });
    };
    AlertDevice.prototype.AlertKeyDown = function (UIID) {
        if (UIID === void 0) { UIID = ""; }
        var Dom = document.getElementById(UIID);
        //var Dom = document.getElementById(UIID);
        Dom.addEventListener("keyup", function (event) {
            console.log("AlertKeyDown_e=", event, "e.target", event.target);
            alert(event.keyCode);
        });
    };
    AlertDevice.prototype.focus = function (UIID) {
        if (UIID === void 0) { UIID = ""; }
        var Dom = document.getElementById(UIID);
        Dom.addEventListener("focus", function (event) {
            console.log("AlertKeyDown_e=", event, "e.target", event.target);
        });
    };
    AlertDevice.prototype.blur = function (UIID) {
        if (UIID === void 0) { UIID = ""; }
        var Dom = document.getElementById(UIID);
        Dom.addEventListener("blur", function (event) {
            console.log("AlertKeyDown_e=", event, "e.target", event.target);
        });
    };
    AlertDevice = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])()
    ], AlertDevice);
    return AlertDevice;
}());



/***/ }),

/***/ "./src/Module/AssociateData.ts":
/*!*************************************!*\
  !*** ./src/Module/AssociateData.ts ***!
  \*************************************/
/*! exports provided: AssociateManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AssociateManager", function() { return AssociateManager; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var AssociateManager = /** @class */ (function () {
    function AssociateManager() {
        this.AssociateArr = [];
        this.currentChooseIndex = 0;
        this.hibernateTimeArr = [1, 3, 5, 10];
        this.ProgramNameTest = ["AnyDesk.exe", "chrome.exe", "bushound.exe", "BCompare.exe"];
        for (var index = 0; index < 0; index++) {
            this.AssociateArr.push({
                name: "LOL" + this.AssociateArr.length,
                hibernate: false,
                winLock: false,
                directionSwitch: false,
                hibernateTime: 1,
                assignKeyboardProfile: 0,
                advanceModeCode: 0,
                associatePath: "",
            });
        }
    }
    AssociateManager.prototype.setAssignKeyboardProfile = function (index) {
        if (this.has())
            this.getClass().assignKeyboardProfile = index;
    };
    AssociateManager.prototype.has = function () {
        if (this.AssociateArr.length > 0) {
            //console.log("AssociateManagerhas",true);
            return true;
        }
        else {
            //console.log("AssociateManagerhas",false);
            return false;
        }
    };
    AssociateManager.prototype.getClass = function () {
        //console.log("AssociateManagergetClass",this.AssociateArr.length);
        if (this.AssociateArr.length > 0) {
            return this.AssociateArr[this.currentChooseIndex];
        }
    };
    AssociateManager.prototype.check_length = function () {
        return this.AssociateArr.length <= 0 ? false : true;
    };
    AssociateManager.prototype.ImportClassData = function (InputData) {
        console.log("ImportMangerClassData", InputData, typeof InputData, typeof InputData[1]);
        InputData = JSON.parse(JSON.stringify(InputData));
        var arrkeys = Object.keys(InputData[0]); //取得欄位變成陣列
        for (var index = 0; index < arrkeys.length; index++) {
            this[arrkeys[index]] = InputData[0][arrkeys[index]];
        }
        this.getClass().ImportCustomLedData(InputData[1]);
    };
    AssociateManager.prototype.Order = function (command) {
        if (command === void 0) { command = ""; }
        switch (command) {
            case "Add":
                //if(this.AssociateArr.length>19){return}
                //var Tname="名稱"+this.matrix_frames.length;
                if (this.has()) {
                    this.currentChooseIndex += 1;
                }
                else {
                    this.currentChooseIndex = 0;
                }
                this.AssociateArr.push({
                    name: "預設" + this.AssociateArr.length,
                    hibernate: false,
                    winLock: false,
                    directionSwitch: false,
                    hibernateTime: 1,
                    assignKeyboardProfile: 0,
                    advanceModeCode: 0,
                    associatePath: "",
                });
                return this.AssociateArr[this.currentChooseIndex];
            case "Delete":
                if (this.currentChooseIndex > 0) {
                    var T = this.currentChooseIndex;
                    this.currentChooseIndex -= 1;
                    this.AssociateArr.splice(T, 1);
                }
                else if (this.currentChooseIndex == 0) {
                    this.AssociateArr.splice(this.currentChooseIndex, 1);
                }
                break;
        }
    };
    AssociateManager = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [])
    ], AssociateManager);
    return AssociateManager;
}());



/***/ }),

/***/ "./src/Module/BoxSelectionArea.ts":
/*!****************************************!*\
  !*** ./src/Module/BoxSelectionArea.ts ***!
  \****************************************/
/*! exports provided: BoxSelectionArea */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BoxSelectionArea", function() { return BoxSelectionArea; });
var BoxSelectionArea = /** @class */ (function () {
    function BoxSelectionArea(targetName) {
        if (targetName === void 0) { targetName = ""; }
        this.EventCanBoxSelect = false;
        this.mouseOn = false;
        this.startX = 0;
        this.startY = 0;
        this.searchTargetName = ""; //RGBColorBlockStyle
        this.selectedEls = [];
        this.searchTargetName = targetName;
        //var T2 = document.getElementById(parent).getBoundingClientRect();
    }
    BoxSelectionArea.prototype.mousedown = function (e) {
        //console.log("註冊.e1", this.EventCanBoxSelect,e.which,e.buttons);
        if (e.buttons !== 1 || e.which !== 1 || !this.EventCanBoxSelect)
            return;
        this.mouseOn = true;
        console.log("BoxSelectionArea成功註冊_dir.mousedown", e, this.searchTargetName);
        //console.dir(this.selectContainer,);
        this.startX = e.clientX - this.selectContainer.offsetLeft;
        //-this.selectContainer.scrollLeft;
        this.startY = e.clientY - this.selectContainer.offsetTop;
        //-this.selectContainer.scrollTop;
        //this.showCustomTestDataWindows(obj);
        if (!document.getElementById('selectDiv')) {
            var selDiv = document.createElement('div');
            selDiv.style.cssText = 'position:absolute;width:0;height:0;\
                   margin:0;padding:0;border:1px dashed #blue;\
                   background-color:#aaa;z-index:1000;opacity:0.6;display:none;    pointer-events: none;';
            selDiv.id = 'selectDiv';
            selDiv.style.left = this.startX + 'px';
            selDiv.style.top = this.startY + 'px';
            this.selectContainer.appendChild(selDiv);
        }
        this.mousemove(e);
    };
    BoxSelectionArea.prototype.mousemove = function (e) {
        //var MainFrame = document.getElementById("MainFrame");
        if (!this.mouseOn)
            return;
        console.log("BoxSelectionArea.mousemove", this.searchTargetName);
        var _x = e.clientX - this.selectContainer.offsetLeft;
        //+this.selectContainer.scrollLeft;
        var _y = e.clientY - this.selectContainer.offsetTop;
        //+ this.selectContainer.scroll;
        // 获取非行间样式
        function getStyle(element, attr) {
            if (element.currentStyle) {
                return element.currentStyle[attr];
            }
            else {
                return getComputedStyle(element, null)[attr];
            }
        }
        // var target = getStyle(this.selectContainer, "transform");    //matrix(0.7, 0, 0, 0.7, 0, 0)
        // var oneposition = target.indexOf("(");
        // var twoposition = target.indexOf(",");
        // var Text = target.substring(oneposition + 1, twoposition);
        // console.log("内联 非行间样式", this.selectContainer.style.transform, Text);  //translate(500px)
        // console.log("BoxSelectionArea.mousemove", _x, _y, this.startX, this.startY);
        var selDiv = document.getElementById('selectDiv');
        selDiv.style.display = 'block';
        selDiv.style.left = Math.min(_x, this.startX) + 'px';
        /// parseFloat(Text)) + 'px';
        selDiv.style.top = Math.min(_y, this.startY) + 'px';
        /// parseFloat(Text)) + 'px';
        selDiv.style.width = Math.abs(_x - this.startX) + 'px';
        selDiv.style.height = Math.abs(_y - this.startY) + 'px';
    };
    ;
    BoxSelectionArea.prototype.mouseup = function (e) {
        console.log("BoxSelectionArea.mouseup", this.mouseOn);
        var selDiv = document.getElementById('selectDiv'); //Custom Create Dom Id
        if (!this.mouseOn) {
            if (selDiv) {
                selDiv.style.display = 'none';
            }
            return "Fail";
        }
        if (parseFloat(selDiv.style.width) <= 0) {
        }
        //console.log("selDiv_selDiv_mouseup", selDiv ,selDiv.offsetLeft,selDiv.offsetTop,selDiv.offsetWidth,selDiv.offsetHeight);
        //console.dir(selDiv) ;
        var fileDivs = document.getElementsByClassName(this.searchTargetName); //Assign Search  Target 
        this.selectedEls = new Array(); //refresh
        var fLeft = selDiv.offsetLeft;
        //-this.selectContainer.offsetLeft;-(fileDivs[0].parentElement.offsetLeft
        var fTop = selDiv.offsetTop;
        //-this.selectContainer.offsetTop;
        var fWidth = selDiv.offsetWidth;
        var fHeight = selDiv.offsetHeight;
        for (var i = 0; i < fileDivs.length; i++) {
            //console.log("selectedEls.fileDivs_parentElement",fileDivs[i].parentElement.offsetLeft,this.selectContainer.offsetLeft); 
            var targetRightX = fileDivs[i].offsetWidth + fileDivs[i].offsetLeft + (fileDivs[0].parentElement.offsetLeft);
            var targetDownY = fileDivs[i].offsetHeight + fileDivs[i].offsetTop + (fileDivs[0].parentElement.offsetTop);
            var targetLeftX = fileDivs[i].offsetLeft + (fileDivs[0].parentElement.offsetLeft);
            var targetUpY = fileDivs[i].offsetTop + (fileDivs[0].parentElement.offsetTop);
            var frameRangeRightX = fLeft + fWidth;
            var frameRangeDownY = fTop + fHeight;
            if (targetRightX > fLeft && targetDownY > fTop && targetLeftX < frameRangeRightX && targetUpY < frameRangeDownY) {
                //selectedEls.push(fileDivs[i]);
                this.selectedEls.push(i);
            }
        }
        //console.log("selectedEls.push_result",this.selectedEls); 
        selDiv.style.display = 'none';
        this.mouseOn = false;
        return "Finish";
    };
    BoxSelectionArea.prototype.setSelectContainer = function (Domname) {
        this.selectContainer = document.getElementById(Domname);
        if (!this.selectContainer) {
            console.log('setSelectContainer_fail', Domname);
        }
    };
    BoxSelectionArea.prototype.checkArrayisAllTrue = function (AllBlockColor) {
        console.log("checkArrayisAllTrue_inputdata", AllBlockColor);
        console.dir(AllBlockColor);
        for (var i = 0; i < this.selectedEls.length; i++) {
            //selectedEls.push(fileDivs[i]);   
            if (AllBlockColor[this.selectedEls[i]].border == false) {
                console.log("checkArrayisAllTruefalse", "index", this.selectedEls[i]);
                return false;
            }
        }
        //console.log("checkArrayisAllTruefalse","true");
        return true; // 當全部 checked才能回傳 true
    };
    BoxSelectionArea.prototype.checkArrayisAllTrueP7 = function (AllBlockColor) {
        console.log("checkArrayisAllTrueCustom_inputdata", AllBlockColor);
        for (var i = 0; i < this.selectedEls.length; i++) {
            if (AllBlockColor[this.selectedEls[i]] == false) {
                return false;
            }
        }
        return true; // 當全部 checked才能回傳 true
    };
    return BoxSelectionArea;
}());



/***/ }),

/***/ "./src/Module/ColorVar.ts":
/*!********************************!*\
  !*** ./src/Module/ColorVar.ts ***!
  \********************************/
/*! exports provided: ColorModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColorModule", function() { return ColorModule; });
// HSL即色相、飽和度、亮度（英語：Hue, Saturation, Lightness）。
// HSV即色相、飽和度、明度（英語：Hue, Saturation, Value），又稱HSB其中B即英語：Brightness。
//backup:"-webkit-linear-gradient(left,#FFFFFF,red)";
//Louis Architecture => Hex=>SET RGB=>SET HSV
var consolelogFlag = false;
var ColorModule = /** @class */ (function () {
    //-webkit-linear-gradient(left,#FFFFFF,rgb(255,255,255)";
    function ColorModule(inputname) {
        if (inputname === void 0) { inputname = ""; }
        this.name = "";
        this.Hue = 0; //0~360
        this.Saturation = 0; //飽和度 0~1
        this.Value = 0; //明度 0~1
        this.Lightness = 0; //亮度 0~1
        this.RGBA_value = [0, 0, 0, 1];
        this.SBgColor = "";
        this.VBgColor = "";
        this.colorTicket = [[255, 32, 0, 1], [255, 32, 0, 1], [255, 32, 0, 1], [255, 32, 0, 1], [255, 32, 0, 1], [255, 32, 0, 1], [255, 32, 0, 1], [255, 32, 0, 1], [255, 32, 0, 1], [255, 32, 0, 1], [255, 32, 0, 1], [255, 32, 0, 1], [255, 32, 0, 1], [255, 32, 0, 1], [255, 32, 0, 1], [255, 32, 0, 1], [255, 32, 0, 1], [255, 32, 0, 1], [255, 32, 0, 1], [255, 32, 0, 1], [255, 32, 0, 1]];
        this.preDefineColor = ["#FF2000", "#ff8000", "#80ff00", "#00ff00", "#00ffff", "#0000ff", "#8000ff", "#ff00ff", "#ff0080", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff"]; //RGB
        this.currentRecordIndex = 0;
        this.savePosition = {
            precentS: 1,
            precentL: 1,
        };
        this.disX = 0;
        this.disY = 0;
        this.gradientBGcolor = "#FFFFFF";
        this.SetHex("#66CC33");
        this.name = inputname;
        this.customlog("CurrentColorCustomName", this.name);
    }
    ColorModule.prototype.ImportClassData = function (InputData) {
        InputData = JSON.parse(JSON.stringify(InputData));
        var arrkeys = Object.keys(InputData); //取得欄位變成陣列
        for (var index = 0; index < arrkeys.length; index++) {
            this[arrkeys[index]] = InputData[arrkeys[index]];
        }
    };
    ColorModule.prototype.colorMixing = function (hex1, hex2) {
        var result1 = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex1);
        var result2 = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex2);
        var T = "#";
        for (var index = 1; index < 4; index++) {
            var DEC = Number("0x" + result1[index]) + Number("0x" + result2[index]);
            var hex = Math.round((DEC / 2)).toString(16);
            this.customlog('colorMixingfor', DEC, hex, hex.length);
            hex = hex.length == 1 ? "0" + hex : hex;
            T += hex;
        }
        //+(result1[2]+result2[2]).toString(16)+(result1[3]+result2[3]).toString(16);
        this.customlog('colorMixing', T);
        //parseInt("0xF", 16);
        return T;
    };
    ColorModule.prototype.mousedown = function (oEvent) {
        var parentDiv = document.getElementById(this.name + 'PickingArea');
        var circleDiv = document.getElementById(this.name + 'Circle');
        var resultleft = oEvent.layerX;
        var resultTop = oEvent.layerY;
        if (resultleft < 0) {
            resultleft = 0;
        }
        if (resultTop < 0) {
            resultTop = 0;
        }
        function getStyle(obj, attr) {
            if (obj.currentStyle) {
                return obj.currentStyle[attr];
            }
            else {
                return getComputedStyle(obj, null)[attr];
            }
        }
        circleDiv.style.left = resultleft + 'px';
        circleDiv.style.top = resultTop + 'px';
        var precent1 = (parentDiv.clientWidth - circleDiv.offsetWidth) / 100;
        var precentL = (parentDiv.clientHeight - circleDiv.offsetHeight) / 100;
        this.savePosition.precentS = precent1;
        this.savePosition.precentL = precentL;
        var Lightness = Math.round((resultTop) / precentL);
        var Saturation = Math.round((resultleft) / precent1);
        this.Lightness = 100 - Lightness;
        this.Saturation = Saturation;
        this.HSL_RGB_HexSet();
        this.disX = oEvent.clientX - parseInt(getStyle(circleDiv, 'left'));
        this.disY = oEvent.clientY - parseInt(getStyle(circleDiv, 'top'));
    };
    ColorModule.prototype.mousemove = function (oEvent) {
        var parentDiv = document.getElementById(this.name + 'PickingArea');
        var circleDiv = document.getElementById(this.name + 'Circle');
        this.customlog("CurrentColormousemove", circleDiv, parentDiv);
        function getStyle(obj, attr) {
            if (obj.currentStyle) {
                return obj.currentStyle[attr];
            }
            else {
                return getComputedStyle(obj, null)[attr];
            }
        }
        var resultleft = oEvent.clientX - this.disX;
        var resultTop = oEvent.clientY - this.disY;
        if (resultleft < 0) {
            resultleft = 0;
        }
        else if (resultleft > parentDiv.offsetWidth - /*parseInt(getStyle(circleDiv,'width'))*/ circleDiv.offsetWidth) {
            resultleft = parentDiv.offsetWidth - circleDiv.offsetWidth;
        }
        if (resultTop < 0) {
            resultTop = 0;
        }
        else if (resultTop > parentDiv.offsetHeight - circleDiv.offsetHeight) {
            resultTop = parentDiv.offsetHeight - circleDiv.offsetHeight;
        }
        circleDiv.style.left = resultleft + 'px';
        circleDiv.style.top = resultTop + 'px';
        var precent1 = (parentDiv.clientWidth - circleDiv.offsetWidth) / 100;
        var Saturation = Math.round((resultleft) / precent1);
        var precentV = (parentDiv.clientHeight - circleDiv.offsetHeight) / 100;
        var Lightness = Math.round((resultTop) / precentV);
        this.Lightness = 100 - Lightness;
        this.Saturation = Saturation;
        this.HSL_RGB_HexSet();
    };
    ;
    ColorModule.prototype.CreateFakeArray = function (length) {
        if (length === void 0) { length = 0; }
        return Array(length).fill(4);
    };
    ColorModule.prototype.toCssRGB = function (RGBA) {
        if (RGBA === void 0) { RGBA = [0, 0, 0, 0]; }
        return 'rgb(' + RGBA[0] + ',' + RGBA[1] + ',' + RGBA[2] + ',' + RGBA[3] + ')';
    };
    ColorModule.prototype.update_RGBA_value = function () {
        for (var index = 0; index < 3; index++) {
            var target = Number(this.RGBA_value[index]);
            if (target > 255) {
                target = 255;
            }
            else if (target < 0) {
                target = 0;
            }
            this.RGBA_value[index] = target;
        }
        this.SetRGB([this.RGBA_value[0], this.RGBA_value[1], this.RGBA_value[2]]);
        this.updateCircleDivPos();
    };
    ColorModule.prototype.setDefault = function () {
        this.SetHex("#66CC33");
    };
    ColorModule.prototype.onclickColorTicket = function (styleColor) {
        this.SetRGB(styleColor);
        //this.customlog('onclickColorTicket',styleColor.style.backgroundColor);
    };
    ColorModule.prototype.onclickColorDefault = function (styleColor, index) {
        this.currentRecordIndex = index;
        //styleColor=$event.target.style.backgroundColor
        var rgbArr = this.cssRgbToNumberArray(styleColor.style.backgroundColor);
        this.SetRGB(rgbArr);
        this.customlog('onclickColorDefault', styleColor.style.backgroundColor);
        this.updateCircleDivPos();
    };
    ColorModule.prototype.updateCircleDivPos = function () {
        try {
            var circleDiv = document.getElementById(this.name + 'Circle');
            console.log('%c updateCircleDivPos', 'background: black; color: white', JSON.stringify(this));
            circleDiv.style.left = this.savePosition.precentS * this.Saturation + "px";
            circleDiv.style.top = this.savePosition.precentL * (100 - this.Lightness) + "px";
        }
        catch (error) {
            console.error('%c updateCircleDivPos', 'background: black; color: white', error);
        }
    };
    ColorModule.prototype.SetRGB = function (Arr) {
        this.RGBA_value[0] = Arr[0];
        this.RGBA_value[1] = Arr[1];
        this.RGBA_value[2] = Arr[2];
        var HSL = this.rgbTo_hsl(Arr);
        this.Hue = Math.round(HSL[0]);
        this.Saturation = Math.round(HSL[1]);
        this.Lightness = Math.round(HSL[2]);
        this.Hex = this.rgbToHex(Arr[0], Arr[1], Arr[2]);
        console.log('%c SetRGB', 'background: black; color: white', this);
        // var HSV_B=this.rgb2HSV(r,g,b);;  
        // this.Hue=HSV_B[0];
        // this.Saturation=HSV_B[1];
        // this.Value=HSV_B[2];
        this.setGradientBGcolor();
        this.showColorVarData();
    };
    ColorModule.prototype.showColorVarData = function () {
        var colorlog = {
            Hex: this.Hex,
            RGBA_value: this.RGBA_value,
            Hue: this.Hue,
            Saturation: this.Saturation,
            Value: this.Value,
            Lightness: this.Lightness,
        };
        //this.customlog(colorlog);
        //console.log('%c showColorVarData','background: red; color: white',colorlog);
    };
    ColorModule.prototype.SetHex = function (InputData) {
        this.customlog("SetHex", InputData);
        this.Hex = InputData;
        this.SetRGB(this.hexToRgb(InputData));
    };
    ColorModule.prototype.hsv_Rgb_hexSet = function () {
        this.customlog("Enter_hsv_Rgb_hexSet HSV>rgb>hex");
        var RGBResult = this.HSVtoRGB(this.Hue / 360, this.Saturation / 100, this.Value / 100);
        this.Hex = this.rgbToHex(RGBResult[0], RGBResult[1], RGBResult[2]);
        this.RGBA_value[0] = RGBResult[0];
        this.RGBA_value[1] = RGBResult[1];
        this.RGBA_value[2] = RGBResult[2];
        // this.SetHex(Hex);
    };
    ColorModule.prototype.HSL_RGB_HexSet = function () {
        this.customlog("Enter_hsL_Rgb_hexSet HSV>rgb>hex");
        var RGBResult = this.hslToRGB(this.Hue, this.Saturation, this.Lightness);
        this.Hex = this.rgbToHex(RGBResult[0], RGBResult[1], RGBResult[2]);
        this.RGBA_value[0] = RGBResult[0];
        this.RGBA_value[1] = RGBResult[1];
        this.RGBA_value[2] = RGBResult[2];
        this.setPreDefineColor();
        // this.SetHex(Hex);
    };
    ColorModule.prototype.setPreDefineColor = function () {
        this.preDefineColor[this.currentRecordIndex] = this.Hex;
    };
    ColorModule.prototype.getPreDefineColor = function () {
        return this.preDefineColor[this.currentRecordIndex];
    };
    ColorModule.prototype.rgbTo_hsl = function (rgbArr) {
        var r1 = rgbArr[0] / 255;
        var g1 = rgbArr[1] / 255;
        var b1 = rgbArr[2] / 255;
        var maxColor = Math.max(r1, g1, b1);
        var minColor = Math.min(r1, g1, b1);
        //Calculate L:
        var L = (maxColor + minColor) / 2;
        var S = 0;
        var H = 0;
        if (maxColor != minColor) {
            //Calculate S:
            if (L < 0.5) {
                S = (maxColor - minColor) / (maxColor + minColor);
            }
            else {
                S = (maxColor - minColor) / (2.0 - maxColor - minColor);
            }
            //Calculate H:
            if (r1 == maxColor) {
                H = (g1 - b1) / (maxColor - minColor);
            }
            else if (g1 == maxColor) {
                H = 2.0 + (b1 - r1) / (maxColor - minColor);
            }
            else {
                H = 4.0 + (r1 - g1) / (maxColor - minColor);
            }
        }
        L = L * 100;
        S = S * 100;
        H = H * 60;
        if (H < 0) {
            H += 360;
        }
        var result = [H, S, L];
        return result;
    };
    ColorModule.prototype.setGradientBGcolor = function () {
        var s = this.getHSL_RGBColor(this.Hue, 100, 50);
        this.gradientBGcolor = "rgb(" + s[0] + "," + s[1] + "," + s[2] + ")";
    };
    ColorModule.prototype.getHSL_RGBColor = function (H, S, V) {
        return this.hslToRGB(H, S, V);
    };
    ColorModule.prototype.getS_RGBColor = function () {
        return this.HSVtoRGB(this.Hue / 360, 1, this.Value / 100);
    };
    ColorModule.prototype.getV_RGBColor = function () {
        return this.HSVtoRGB(this.Hue / 360, this.Saturation / 100, 1);
    };
    ColorModule.prototype.getParentDiv = function () {
        var parentDiv = document.getElementById(this.name + 'PickingArea');
        return parentDiv;
    };
    ColorModule.prototype.getRGB = function () {
        return JSON.parse(JSON.stringify(this.RGBA_value));
    };
    ColorModule.prototype.getRGBA = function () {
        return JSON.parse(JSON.stringify(this.RGBA_value));
    };
    //----------------------------------公式轉換-----------------------------//
    ColorModule.prototype.hexToRgb = function (InputData) {
        this.customlog("hexToRgbInputData", InputData);
        try {
            var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(InputData);
            this.customlog("hexToRgbResult", [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)]);
            return result ?
                // {
                //     r: parseInt(result[1], 16),
                //     g: parseInt(result[2], 16),
                //     b: parseInt(result[3], 16)
                // } 
                [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)]
                : null;
        }
        catch (_a) {
            alert("hexToRgbError");
            return [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)];
        }
    };
    ColorModule.prototype.backGroundColorRgbToHex = function (col) {
        if (col.charAt(0) == 'r') {
            col = col.replace('rgb(', '').replace(')', '').split(',');
            var r = parseInt(col[0], 10).toString(16);
            var g = parseInt(col[1], 10).toString(16);
            var b = parseInt(col[2], 10).toString(16);
            r = r.length == 1 ? '0' + r : r;
            g = g.length == 1 ? '0' + g : g;
            b = b.length == 1 ? '0' + b : b;
            var colHex = '#' + r + g + b;
            this.customlog('backGroundColorRgbToHex', col);
            return colHex;
        }
    };
    ColorModule.prototype.cssRgbToNumberArray = function (col) {
        try {
            var colArr = col.replace('rgb(', '').replace(')', '').split(',');
            colArr.forEach(function (item, index, targetArray) {
                //console.log('%c cssRgbToNumberArray', 'background: black; color: white', item,index,targetArray);
                targetArray[index] = parseInt(targetArray[index]);
            });
            return JSON.parse(JSON.stringify(colArr));
        }
        catch (error) {
            console.error('%c cssRgbToNumberArray', 'background: black; color: white', error);
            return [255, 255, 255];
        }
    };
    ColorModule.prototype.hslToRGB = function (hue, Saturation, l) {
        if (!isFinite(hue))
            hue = 0;
        if (!isFinite(Saturation))
            Saturation = 0;
        if (!isFinite(l))
            l = 0;
        hue /= 60;
        if (hue < 0)
            hue = 6 - (-hue % 6);
        hue %= 6;
        Saturation = Math.max(0, Math.min(1, Saturation / 100));
        l = Math.max(0, Math.min(1, l / 100));
        var c = (1 - Math.abs((2 * l) - 1)) * Saturation;
        var x = c * (1 - Math.abs((hue % 2) - 1));
        if (hue < 1) {
            r = c;
            g = x;
            b = 0;
        }
        else if (hue < 2) {
            r = x;
            g = c;
            b = 0;
        }
        else if (hue < 3) {
            r = 0;
            g = c;
            b = x;
        }
        else if (hue < 4) {
            r = 0;
            g = x;
            b = c;
        }
        else if (hue < 5) {
            r = x;
            g = 0;
            b = c;
        }
        else {
            r = c;
            g = 0;
            b = x;
        }
        var m = l - c / 2;
        var r = Math.round((r + m) * 255);
        var g = Math.round((g + m) * 255);
        var b = Math.round((b + m) * 255);
        this.customlog('hslToRGB', [r, g, b]);
        return [r, g, b];
    };
    ColorModule.prototype.rgbToHex = function (r, g, b) {
        var red = this.NumTo16Decimal(r);
        var green = this.NumTo16Decimal(g);
        var blue = this.NumTo16Decimal(b);
        this.customlog('rgbToHex', "#" + red + green + blue);
        return "#" + red + green + blue;
    };
    ;
    ColorModule.prototype.NumTo16Decimal = function (rgb) {
        var hex = Number(rgb).toString(16);
        if (hex.length < 2) {
            hex = "0" + hex;
        }
        return hex;
    };
    ;
    //hsv =hsb  轉換為0~360度 ,0~1 ,0~1
    ColorModule.prototype.rgb2HSV = function (rInput, gInput, bInput) {
        this.customlog("rgb2HSVInput", rInput, gInput, bInput);
        var computedH = 0;
        var computedS = 0;
        var computedV = 0;
        //remove spaces from input RGB values, convert to int
        // var r = parseInt(('' + rInput).replace(/\s/g, ''), 10);
        // var g = parseInt(('' + gInput).replace(/\s/g, ''), 10);
        // var b = parseInt(('' + bInput).replace(/\s/g, ''), 10);
        var r = rInput;
        var g = gInput;
        var b = bInput;
        if (r == null || g == null || b == null ||
            isNaN(r) || isNaN(g) || isNaN(b)) {
            alert('Please enter numeric RGB values!');
            return;
        }
        if (r < 0 || g < 0 || b < 0 || r > 255 || g > 255 || b > 255) {
            alert('RGB values must be in the range 0 to 255.');
            return;
        }
        r = r / 255;
        g = g / 255;
        b = b / 255;
        var minRGB = Math.min(r, Math.min(g, b));
        var maxRGB = Math.max(r, Math.max(g, b));
        // Black-gray-white
        if (minRGB == maxRGB) {
            computedV = minRGB;
            return [0, 0, computedV * 100];
        }
        // Colors other than black-gray-white:
        var d = (r == minRGB) ? g - b : ((b == minRGB) ? r - g : b - r);
        var h = (r == minRGB) ? 3 : ((b == minRGB) ? 1 : 5);
        computedH = 60 * (h - d / (maxRGB - minRGB));
        computedS = (maxRGB - minRGB) / maxRGB;
        computedV = maxRGB;
        var result = [Math.round(computedH), Math.round(computedS * 100), Math.round(computedV * 100)];
        this.customlog("rgb2HSVResult", [computedH, computedS, computedV]);
        return result;
    };
    ColorModule.prototype.HSVtoRGB = function (h, s, v) {
        var s1 = h;
        var s2 = s;
        var s3 = v;
        var r, g, b, i, f, p, q, t;
        if (arguments.length === 1) {
            s = h.s, v = h.v, h = h.h;
        }
        i = Math.floor(h * 6);
        f = h * 6 - i;
        p = v * (1 - s);
        q = v * (1 - f * s);
        t = v * (1 - (1 - f) * s);
        switch (i % 6) {
            case 0:
                r = v, g = t, b = p;
                break;
            case 1:
                r = q, g = v, b = p;
                break;
            case 2:
                r = p, g = v, b = t;
                break;
            case 3:
                r = p, g = q, b = v;
                break;
            case 4:
                r = t, g = p, b = v;
                break;
            case 5:
                r = v, g = p, b = q;
                break;
        }
        var result = [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
        //this.customlog("HSVtoRGBResult",result,'Input:h',s1,'s',s2,'v',s3);
        return result;
        // return {
        //     r: Math.round(r * 255),
        //     g: Math.round(g * 255),
        //     b: Math.round(b * 255)
        // };
    };
    ColorModule.prototype.customlog = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        if (consolelogFlag) {
            this.customlog(message, optionalParams);
        }
    };
    return ColorModule;
}());



/***/ }),

/***/ "./src/Module/CustomLedChainFrames.ts":
/*!********************************************!*\
  !*** ./src/Module/CustomLedChainFrames.ts ***!
  \********************************************/
/*! exports provided: LedChainFramesManager, CustomLedChainFrames */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LedChainFramesManager", function() { return LedChainFramesManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomLedChainFrames", function() { return CustomLedChainFrames; });
/* harmony import */ var _BoxSelectionArea__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BoxSelectionArea */ "./src/Module/BoxSelectionArea.ts");

var LedChainFramesManager = /** @class */ (function () {
    function LedChainFramesManager(kaycapNumber) {
        this.LedChainFrames = [];
        this.AllBlockColor = [];
        this.currentChooseIndex = 0;
        this.showRangeType = 0; //0 frames 1 colorMode
        this.showAddColorUI = false;
        this.onEditName = "";
        this.maxkaycapNumber = 0;
        this.BSModule_C = new _BoxSelectionArea__WEBPACK_IMPORTED_MODULE_0__["BoxSelectionArea"]("CustomRGBBlock");
        this.performingCustomLED = false;
        this.frame_selectionColors = ["#000000", "#ffffff"];
        this.maxkaycapNumber = kaycapNumber;
        for (var index = 0; index < 1; index++) {
            this.LedChainFrames.push(new CustomLedChainFrames("Default", this.maxkaycapNumber));
        }
        for (var i = 0; i < this.maxkaycapNumber; i++) {
            this.AllBlockColor.push({ color: "yellow", border: false });
        }
    }
    LedChainFramesManager.prototype.getBlock = function (index) {
        var target = this.AllBlockColor[index];
        if (target != undefined) {
            return target;
        }
        else {
            console.log('%c KeyBoardStyle.getTarget', 'color:rgb(255,75,255,1)', this.AllBlockColor, index);
        }
    };
    LedChainFramesManager.prototype.getIndexClassName = function (index) {
        if (this.LedChainFrames.length > 0) {
            return this.LedChainFrames[index];
        }
    };
    LedChainFramesManager.prototype.getLedProjectKeys = function (type) {
        if (type === void 0) { type = ""; }
        if (type == "PC") {
            return this.LedChainFrames.map(function (item) { return item.projectCode; });
        }
        else if (type == "PN") {
            return this.LedChainFrames.map(function (item) { return item.projectName; });
        }
    };
    LedChainFramesManager.prototype.getLedClassName = function (FindCode) {
        console.log("getLedClassName尋找", FindCode, "來源", this.LedChainFrames);
        for (var i = 0; i < this.LedChainFrames.length; i++) {
            //console.log("來源", this.LedChainFrames[i].projectCode,"比對尋找",FindCode);
            if (this.LedChainFrames[i].projectCode == FindCode) {
                return this.LedChainFrames[i].projectName;
            }
        }
        return "沒有找到目標";
    };
    LedChainFramesManager.prototype.addItem = function (name) {
        if (name === void 0) { name = ""; }
        var NewName = this.createNotRepeatClassName(name);
        this.LedChainFrames.push(new CustomLedChainFrames(NewName, this.maxkaycapNumber));
    };
    LedChainFramesManager.prototype.createNotRepeatClassName = function (name) {
        var TempName = name;
        var i = 1;
        while (1) {
            var flag = this.checkClassNameIsRepeat(TempName);
            if (flag) {
                TempName = name + '-' + i;
                i++;
            }
            else {
                name = TempName;
                break;
            }
        }
        return name;
    };
    LedChainFramesManager.prototype.checkClassNameIsRepeat = function (targetName) {
        for (var index = 0; index < this.LedChainFrames.length; index++) {
            var Tname = this.LedChainFrames[index].projectName;
            if (targetName == Tname) {
                return true;
            }
        }
        return false;
    };
    LedChainFramesManager.prototype.projectSelect = function (i) {
        this.currentChooseIndex = i;
        this.updeteEditName();
        return "Finish";
    };
    LedChainFramesManager.prototype.updeteEditName = function () {
        this.onEditName = this.getClass().projectName;
        this.performingCustomLED = true;
    };
    LedChainFramesManager.prototype.getClass = function () {
        if (this.LedChainFrames.length > 0) {
            return this.LedChainFrames[this.currentChooseIndex];
        }
    };
    LedChainFramesManager.prototype.isFirstPosition = function () {
        if (this.currentChooseIndex - 1 >= 0) {
            return false;
        }
        else {
            return true;
        }
    };
    LedChainFramesManager.prototype.delete_item = function () {
        if (this.currentChooseIndex > 0) {
            var T = this.currentChooseIndex;
            this.currentChooseIndex -= 1;
            this.LedChainFrames.splice(T, 1);
        }
        else if (this.currentChooseIndex == 0) {
            this.LedChainFrames.splice(this.currentChooseIndex, 1);
        }
    };
    LedChainFramesManager.prototype.check_length = function (type) {
        if (type === void 0) { type = ""; }
        if (type == "F") {
            return this.getClass().matrix_frames.length == 0 ? false : true;
        }
        if (type == "C") {
            return this.getClass().matrix_ColorMode.length == 0 ? false : true;
        }
    };
    LedChainFramesManager.prototype.ImportClassCreateData = function (InputData) {
        InputData = JSON.parse(JSON.stringify(InputData));
        var TData = new CustomLedChainFrames("沒有");
        var arrkeys = Object.keys(TData); //取得欄位變成陣列
        for (var index = 0; index < arrkeys.length; index++) {
            if (arrkeys[index] != "BSModule_C") {
                TData[arrkeys[index]] = InputData[arrkeys[index]];
            }
        }
        TData.projectCode = new Date().getTime();
        console.log("ImportClassCreateData_PushData", TData, typeof InputData);
        this.LedChainFrames.push(TData);
    };
    LedChainFramesManager.prototype.ReadClassCreateData = function (InputData) {
        InputData = JSON.parse(JSON.stringify(InputData));
        var TData = new CustomLedChainFrames("沒有");
        var arrkeys = Object.keys(TData); //取得欄位變成陣列
        for (var index = 0; index < arrkeys.length; index++) {
            TData[arrkeys[index]] = InputData[arrkeys[index]];
        }
        console.log("ReadClassCreateData_Push", TData, typeof InputData);
        this.LedChainFrames.push(TData);
        console.log("this.LedChainFrames", TData, typeof InputData);
    };
    LedChainFramesManager.prototype.frame_item_click = function (index) {
        this.getClass().currentFramesIndex = index;
        this.showRangeType = 0; //0 frames 1 colorMode
        this.update_frame_range();
        this.performingCustomLED = false;
    };
    LedChainFramesManager.prototype.frame_item_Auto_Switch = function () {
        this.showRangeType = 0; //0 frames 1 colorMode
        this.update_frame_range();
    };
    LedChainFramesManager.prototype.update_frame_range = function () {
        if (this.getClass().hasFrames()) {
            console.log("update_frame_rangeEnter");
            var T = this.getClass().getTarget("F").frame_selection_range;
            this.allBlockColorUpdate(T, this.frame_selectionColors[1], this.frame_selectionColors[0]);
        }
    };
    LedChainFramesManager.prototype.update_color_range = function () {
        if (!this.getClass().hasColorMode()) {
            return;
        }
        this.getClass().checkColorpickerAdjustable();
        //console.log("update_color_rang=>",this.getClass().getTargetColorMode());
        var T = this.getClass().getTargetColorMode().frame_selection_range;
        var Tcolor = this.getClass().getTargetColorMode().color;
        this.allBlockColorUpdate(T, Tcolor, this.frame_selectionColors[0]);
    };
    LedChainFramesManager.prototype.allBlockColorUpdate = function (T, oneColor, TwoColor) {
        for (var i = 0; i < T.length; i++) {
            var element = T[i];
            if (element == true) {
                this.AllBlockColor[i].color = oneColor;
            }
            else {
                this.AllBlockColor[i].color = TwoColor;
            }
        }
    };
    LedChainFramesManager.prototype.color_item_click = function (index) {
        this.getClass().currentModeIndex = index;
        this.showRangeType = 1; //0 frames 1 colorMode
        this.update_color_range();
        this.performingCustomLED = false;
    };
    LedChainFramesManager.prototype.color_Auto_Switch = function () {
        if (!this.getClass().hasColorMode()) {
            return;
        }
        this.showRangeType = 1; //0 frames 1 colorMode
        this.update_color_range();
    };
    LedChainFramesManager.prototype.refreshRange = function () {
        if (this.showRangeType == 0 && this.getClass().hasFrames()) {
            this.update_frame_range();
        }
        else if (this.showRangeType == 1 && this.getClass().hasColorMode()) {
            this.update_color_range();
        }
    };
    LedChainFramesManager.prototype.setNowCustomModeSingleRange = function (index) {
        if (this.showRangeType == 0 && this.getClass().hasFrames()) {
            this.getClass().setNowCustomModeSingleRange(index, this.showRangeType);
            this.update_frame_range();
        }
        else if (this.showRangeType == 1 && this.getClass().hasColorMode()) {
            this.getClass().setNowCustomModeSingleRange(index, this.showRangeType);
            this.update_color_range();
        }
    };
    LedChainFramesManager.prototype.checkisAllTrueChangeArray = function () {
        var selectedEls = this.BSModule_C.selectedEls;
        //console.log("checkisAllTrueChangeArrayEnter");
        if (selectedEls.length <= 0) {
            console.log("沒有選擇範圍", selectedEls, "AllBlockColor" + this.AllBlockColor);
            return "Fail";
        }
        if (this.showRangeType == 0) {
            var T = this.getClass().getTarget("F").frame_selection_range;
            var isAllTrue = this.BSModule_C.checkArrayisAllTrueP7(T);
            if (isAllTrue) {
                for (var i = 0; i < selectedEls.length; i++) {
                    console.log("checkisAllTrueChangeArray_isAllTrue", "index", i);
                    this.AllBlockColor[selectedEls[i]].color = this.frame_selectionColors[0];
                }
                this.getClass().set_frame_selection_range(selectedEls, !isAllTrue);
            }
            else {
                for (var i = 0; i < selectedEls.length; i++) {
                    console.log("checkisAllTrueChangeArray_NAllTrue", "index", i);
                    this.AllBlockColor[selectedEls[i]].color = this.frame_selectionColors[1];
                }
                this.getClass().set_frame_selection_range(selectedEls, true);
            }
        }
        else if (this.showRangeType == 1) {
            var T = this.getClass().getTarget("").frame_selection_range;
            var isAllTrue = this.BSModule_C.checkArrayisAllTrueP7(T);
            var selectedEls = this.BSModule_C.selectedEls;
            if (isAllTrue) {
                this.getClass().set_color_selection_range(selectedEls, !isAllTrue);
                this.update_color_range();
            }
            else {
                this.getClass().set_color_selection_range(selectedEls, true);
                this.update_color_range();
            }
            //console.log("Result_P7isAllTrue",isAllTrue); 
            //console.log("Result_P7selectedEls",selectedEls);
        }
        this.BSModule_C.mouseOn = false;
        return "Finish";
    };
    return LedChainFramesManager;
}());

var CustomLedChainFrames = /** @class */ (function () {
    //chooseType:any="F";
    function CustomLedChainFrames(inputname, Max) {
        if (inputname === void 0) { inputname = "預設配置"; }
        if (Max === void 0) { Max = 0; }
        this.modeNameTable = ['Static', 'Cycle', 'Breathing', 'Rainbow'];
        this.matrix_ColorMode = []; //TOTAL NUMBER
        this.matrix_frames = [];
        this.currentFramesIndex = 0;
        this.currentModeIndex = 0;
        this.selectionMaxRange = 0; //default
        this.canSeeColorpicker = 0;
        this.selectionMaxRange = Max;
        this.projectName = inputname;
        this.projectCode = new Date().getTime() + inputname;
    }
    CustomLedChainFrames.prototype.hasFile = function () {
        if (this.matrix_frames.length > 0) {
            return true;
        }
        if (this.matrix_ColorMode.length > 0) {
            return true;
        }
    };
    CustomLedChainFrames.prototype.hasFrames = function () {
        if (this.matrix_frames.length > 0) {
            return true;
        }
        else {
            return false;
        }
    };
    CustomLedChainFrames.prototype.hasColorMode = function () {
        if (this.matrix_ColorMode.length > 0) {
            //console.log("hasColorMode", true);
            return true;
        }
        else {
            //console.log("hasColorMode", false);
            return false;
        }
    };
    CustomLedChainFrames.prototype.checkColorpickerAdjustable = function () {
        this.canSeeColorpicker = this.getTarget().adjustable[0];
        console.log("checkColorpickerAdjustable", this.canSeeColorpicker);
    };
    CustomLedChainFrames.prototype.getTargetColorMode = function () {
        if (this.matrix_ColorMode.length > 0) {
            return this.matrix_ColorMode[this.currentModeIndex];
        }
    };
    CustomLedChainFrames.prototype.checkColorParameter = function (min, max) {
        this.matrix_ColorMode.forEach(function (element) {
            console.log("checkColorParameter", element.speed);
            element.speed = element.speed.toString().replace(/[^\d]/g, '');
            element.speed < min ? element.speed = min : ' ';
            element.speed > max ? element.speed = max : ' ';
            element.speed2 = element.speed2.toString().replace(/[^\d]/g, '');
            element.speed2 < min ? element.speed2 = min : ' ';
            element.speed2 > max ? element.speed2 = max : ' ';
        });
    };
    CustomLedChainFrames.prototype.checkFrameParameter = function (min, max) {
        this.matrix_frames.forEach(function (element) {
            element.frame_time = element.frame_time.toString().replace(/[^\d]/g, '');
            element.frame_time < min ? element.frame_time = min : ' ';
            element.frame_time > max ? element.frame_time = max : ' ';
        });
    };
    CustomLedChainFrames.prototype.framesOrder = function (command) {
        if (command === void 0) { command = ""; }
        switch (command) {
            case "Add":
                if (this.matrix_frames.length > 19) {
                    return;
                }
                //var Tname="名稱"+this.matrix_frames.length;
                this.matrix_frames.push({
                    name: "frame" + this.matrix_frames.length,
                    frame_time: "1",
                    frame_selection_range: this.createArr(),
                });
                console.log("framesOrderAdd", this.matrix_frames);
                break;
            case "Delete":
                if (this.matrix_frames.length == 0) {
                    return;
                }
                if (this.currentFramesIndex > 0) {
                    var T = this.currentFramesIndex;
                    this.currentFramesIndex -= 1;
                    this.matrix_frames.splice(T, 1);
                }
                else if (this.currentFramesIndex == 0) {
                    this.matrix_frames.splice(this.currentFramesIndex, 1);
                }
                break;
            case "moveUp":
                if (this.matrix_frames.length == 0) {
                    return;
                }
                var TIndex = this.currentFramesIndex;
                //if (TIndex <1) { return }
                if (TIndex > 0) {
                    var tempVar_1 = JSON.parse(JSON.stringify(this.getTarget("F")));
                    this.matrix_frames[TIndex] = this.matrix_frames[TIndex - 1];
                    this.matrix_frames[TIndex - 1] = tempVar_1;
                    this.currentFramesIndex -= 1;
                }
                break;
            case "moveDown":
                if (this.matrix_frames.length == 0) {
                    return;
                }
                var TIndex = this.currentFramesIndex;
                if (TIndex >= this.matrix_frames.length - 1) {
                    return;
                }
                var tempVar = JSON.parse(JSON.stringify(this.getTarget("F")));
                this.matrix_frames[TIndex] = this.matrix_frames[TIndex + 1];
                this.matrix_frames[TIndex + 1] = tempVar;
                this.currentFramesIndex += 1;
                break;
            case "clone":
                if (this.matrix_frames.length == 0) {
                    return;
                }
                if (this.matrix_frames.length > 19) {
                    return;
                }
                var clone = JSON.parse(JSON.stringify(this.getTarget("F")));
                clone.name = this.getTarget("F").name;
                //+"clone";   
                this.matrix_frames.push(clone);
                break;
        }
    };
    CustomLedChainFrames.prototype.colorModeOrder = function (command, mode) {
        if (command === void 0) { command = ""; }
        if (mode === void 0) { mode = 0; }
        switch (command) {
            case "Add":
                if (this.matrix_ColorMode.length > 19) {
                    return;
                }
                //var Tname="名稱"+this.matrix_frames.length;
                this.matrix_ColorMode.push({
                    color: "#ffffff",
                    border: false,
                    colorMode: mode,
                    modeName: this.modeNameTable[mode],
                    speed: 1,
                    speed2: 1,
                    frame_selection_range: this.createArr(),
                    codeName: new Date().getTime(),
                    adjustable: this.getAdjustmentArr(mode),
                });
                break;
            case "Delete":
                if (this.matrix_ColorMode.length == 0) {
                    return;
                }
                if (this.currentModeIndex > 0) {
                    var T = this.currentModeIndex;
                    this.currentModeIndex -= 1;
                    this.matrix_ColorMode.splice(T, 1);
                }
                else if (this.currentModeIndex == 0) {
                    this.matrix_ColorMode.splice(this.currentModeIndex, 1);
                }
                break;
            case "moveUp":
                if (this.matrix_ColorMode.length == 0) {
                    return;
                }
                var TIndex = this.currentModeIndex;
                if (TIndex > 0) {
                    var tempVar_2 = JSON.parse(JSON.stringify(this.getTarget("")));
                    this.matrix_ColorMode[TIndex] = this.matrix_ColorMode[TIndex - 1];
                    this.matrix_ColorMode[TIndex - 1] = tempVar_2;
                    this.currentModeIndex -= 1;
                }
                break;
            case "moveDown":
                if (this.matrix_ColorMode.length == 0) {
                    return;
                }
                var TIndex = this.currentModeIndex;
                if (TIndex >= this.matrix_ColorMode.length - 1) {
                    return;
                }
                var tempVar = JSON.parse(JSON.stringify(this.getTarget("")));
                this.matrix_ColorMode[TIndex] = this.matrix_ColorMode[TIndex + 1];
                this.matrix_ColorMode[TIndex + 1] = tempVar;
                this.currentModeIndex += 1;
                break;
            case "clone":
                if (this.matrix_ColorMode.length == 0) {
                    return;
                }
                if (this.matrix_ColorMode.length > 19) {
                    return;
                }
                var clone = JSON.parse(JSON.stringify(this.getTarget("")));
                clone.name = this.getTarget().name;
                //+"clone";   
                this.matrix_ColorMode.push(clone);
                break;
        }
    };
    CustomLedChainFrames.prototype.getAdjustmentArr = function (mode) {
        switch (mode) {
            case 0:
                return [1, false, false, false]; //色盤開關 速度1 速度2 速度3
            case 1:
                return [2, true, false, false];
            case 2:
                return [1, false, true, true];
            case 3:
                return [0, false, true, true];
        }
    };
    CustomLedChainFrames.prototype.setNowCustomModeSingleRange = function (index, TargetType) {
        if (TargetType == 0) {
            if (this.matrix_frames.length > 0) {
                var T = this.matrix_frames[this.currentFramesIndex].frame_selection_range[index];
                console.log("setNowCustomModeSingleRange=", "targetBool" + T);
                this.matrix_frames[this.currentFramesIndex].frame_selection_range[index] = !T;
            }
        }
        else if (TargetType == 1) {
            if (this.matrix_ColorMode.length > 0) {
                var T = this.matrix_ColorMode[this.currentModeIndex].frame_selection_range[index];
                this.matrix_ColorMode[this.currentModeIndex].frame_selection_range[index] = !T;
            }
        }
    };
    CustomLedChainFrames.prototype.set_frame_selection_range = function (selectedEls, bool) {
        if (selectedEls === void 0) { selectedEls = []; }
        if (bool === void 0) { bool = false; }
        if (this.matrix_frames.length > 0) {
            console.log("Enter_set_frame_selection_range", selectedEls, "SetBoolTo=" + bool);
            for (var i = 0; i < selectedEls.length; i++) {
                this.matrix_frames[this.currentFramesIndex].frame_selection_range[selectedEls[i]] = bool;
            }
            //console.log("LCFM_set_frame_selection_range" + JSON.stringify(this.matrix_frames[this.currentFramesIndex]), "index" + this.currentFramesIndex);
        }
    };
    CustomLedChainFrames.prototype.set_color_selection_range = function (selectedEls, bool) {
        if (selectedEls === void 0) { selectedEls = []; }
        if (bool === void 0) { bool = false; }
        console.log("Enter_set_frame_selection_range", selectedEls, "SetBoolTo=" + bool);
        if (this.matrix_ColorMode.length > 0) {
            for (var i = 0; i < selectedEls.length; i++) {
                this.matrix_ColorMode[this.currentModeIndex].frame_selection_range[selectedEls[i]] = bool;
            }
        }
    };
    CustomLedChainFrames.prototype.getTarget = function (chooseType) {
        if (chooseType === void 0) { chooseType = ""; }
        if (chooseType == "F") {
            if (this.matrix_frames.length > 0) {
                var T = this.matrix_frames[this.currentFramesIndex];
                // console.log("LCFMgetTargetmatrix_frames"+JSON.stringify(this.matrix_frames),"index"+this.currentFramesIndex);
                return this.matrix_frames[this.currentFramesIndex];
            }
        }
        else {
            if (this.matrix_ColorMode.length > 0) {
                return this.matrix_ColorMode[this.currentModeIndex];
            }
        }
    };
    CustomLedChainFrames.prototype.setCurrentColor = function (Hex) {
        if (Hex === void 0) { Hex = ""; }
        if (this.matrix_ColorMode.length > 0) {
            this.getTarget().color = Hex;
        }
    };
    CustomLedChainFrames.prototype.createArr = function () {
        var T = new Array();
        for (var index = 0; index < this.selectionMaxRange; index++) {
            T.push(false);
        }
        console.log("LCFMcreateArr" + T);
        return T;
    };
    CustomLedChainFrames.prototype.ImportCustomLedData = function (InputData) {
        var arr = Object.keys(this);
        // console.log("ImportCustomLedData", InputData," Object.keys",arr);
        // console.log("ImportCustomLedData_typeof",typeof InputData);0
        for (var index = 0; index < arr.length; index++) {
            if (arr[index] != "") {
                // console.log("替換目標A",arr[index],this[arr[index]],typeof this[arr[index]]);
                // console.log("替換目標B",arr[index],InputData[arr[index]],typeof InputData[arr[index]]);
                this[arr[index]] = InputData[arr[index]];
                //var tempVar = $.extend(true, {}, InputData[arr[index]]);
                //this[arr[index]] =JSON.parse(tempVar);
            }
        }
    };
    CustomLedChainFrames.prototype.setDefault = function () {
    };
    return CustomLedChainFrames;
}());



/***/ }),

/***/ "./src/Module/EffectCenter.ts":
/*!************************************!*\
  !*** ./src/Module/EffectCenter.ts ***!
  \************************************/
/*! exports provided: EffectCenter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EffectCenter", function() { return EffectCenter; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var EffectCenter = /** @class */ (function () {
    function EffectCenter() {
        this.RGBEffectCenterEventArr = [];
        this.mouseOn = false;
        this.TargerName = "";
        this.selectEffectCenter = false;
    }
    EffectCenter.prototype.mousedown = function () {
    };
    EffectCenter.prototype.coordinate_move = function (e) {
        if (!this.selectEffectCenter)
            return;
        console.log("coordinate_move", e.buttons, e.which, this.selectEffectCenter);
        var RGBEffectCenter = document.getElementById("RGBEffectCenter");
        RGBEffectCenter.style.display = "block";
        RGBEffectCenter.style.left = e.layerX + "px";
        //- RGBEffectCenter.clientWidth / 2 + "px";
        RGBEffectCenter.style.top = e.layerY + "px";
        //- RGBEffectCenter.clientHeight / 2 + "px";
    };
    EffectCenter.prototype.mousemove = function () {
    };
    EffectCenter.prototype.tese = function () {
    };
    EffectCenter.prototype.addCenterEvent = function (name) {
        var _this = this;
        this.TargerName = name;
        var target = document.getElementById(this.TargerName);
        this.RGBEffectCenterEventArr[0] = function (e) {
            if (e.buttons !== 1 || e.which !== 1)
                return;
            if (!_this.selectEffectCenter)
                return;
            _this.coordinate_move(e);
            target.addEventListener("mousemove", _this.RGBEffectCenterEventArr[1]);
        };
        this.RGBEffectCenterEventArr[1] = function (e) {
            if (!_this.selectEffectCenter)
                return;
            _this.coordinate_move(e);
            _this.App.M_Light_APMode.setCoordinate(e.layerX, e.layerY);
        };
        this.RGBEffectCenterEventArr[2] = function (e) {
            if (!_this.selectEffectCenter)
                return;
            _this.App.M_Light_APMode.setCoordinate(e.layerX, e.layerY);
            target.removeEventListener("mousemove", _this.RGBEffectCenterEventArr[1]);
            _this.App.setAppModeToServer('RGBEffectCenter');
        };
        target.addEventListener("mousedown", this.RGBEffectCenterEventArr[0]);
        target.addEventListener("mousemove", this.RGBEffectCenterEventArr[1]);
        target.addEventListener("mouseup", this.RGBEffectCenterEventArr[2]);
        document.addEventListener("mouseup", function (e) {
            target.removeEventListener("mousemove", _this.RGBEffectCenterEventArr[1]);
            if (_this.selectEffectCenter) {
                _this.App.setAppModeToServer('DocumentMouseupRGBEffectCenter');
            }
        });
    };
    EffectCenter = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [])
    ], EffectCenter);
    return EffectCenter;
}());



/***/ }),

/***/ "./src/Module/EventManager.ts":
/*!************************************!*\
  !*** ./src/Module/EventManager.ts ***!
  \************************************/
/*! exports provided: EventManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventManager", function() { return EventManager; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var EventManager = /** @class */ (function () {
    function EventManager() {
    }
    // getkeyCodeTxt(keyCode) {
    //     //console.log('getkeyCodeTxt', keyCode);
    //     let index = AllFunctionMapping.findIndex(
    //         (x) => x.keyCode == keyCode
    //     )
    //     if (index != -1) {
    //         //console.log('AllFunctionMapping_index', index);
    //         return AllFunctionMapping[index].translate;
    //     }
    // }
    EventManager.prototype.regexCustom = function (event) {
        console.log("EM.regexCustom", event);
        //var validator = new RegExp('^[A-Za-z0-9_]*$');
        var validator = new RegExp('^[A-Za-z0-9\u4e00-\u9fa5]+$');
        var runner = validator.test(event.key);
        console.log("EM.regexCustom", event, runner);
        if (runner) {
        }
        else {
            event.preventDefault();
        }
    };
    EventManager.prototype.regexOnlyNumber = function (event) {
        var validator = new RegExp(/^[0-9\s]*$/);
        var runner = validator.test(event.key);
        //console.log("EM.regexOnlyNumber",event,runner);
        if (!runner) {
            event.preventDefault();
        }
        else {
        }
    };
    EventManager.prototype.clicklog = function (event) {
        console.log(" clicklog: ", event);
        // var  obj=  document.getElementById("obj") as HTMLDivElement;
        // obj.style.display='none';
    };
    EventManager.prototype.movelog = function (event) {
        //console.log(" movelogEvent: ",event);
    };
    EventManager.prototype.click = function (UIID) {
        if (UIID === void 0) { UIID = ""; }
        var Dom = document.getElementById(UIID);
        Dom.addEventListener("click", function (e) {
            console.log("e=", e, "e.target", e.target);
            alert(e);
        });
    };
    EventManager.prototype.onkeyupEnter = function (event) {
        if (event.keyCode == 13) {
            return true;
        }
        else {
            return false;
        }
    };
    EventManager.prototype.setMinMax = function (event, min, max) {
        if (min === void 0) { min = 0; }
        if (max === void 0) { max = 0; }
        console.log("EM.minmax", event);
        event.target.value = event.target.value.replace(/[^\d]/g, '');
        if (event.target.value < min) {
            event.target.value = min;
        }
        if (event.target.value > max) {
            event.target.value = max;
        }
        ;
        //onkeyup="value=value.replace(/[^\d]/g,'');if(value<100){value=100} if(value>65535){value=65535};
    };
    EventManager.prototype.AlertKeyDown = function (UIID) {
        if (UIID === void 0) { UIID = ""; }
        var Dom = document.getElementById(UIID);
        //var Dom = document.getElementById(UIID);
        Dom.addEventListener("keyup", function (event) {
            console.log("AlertKeyDown_e=", event, "e.target", event.target);
            alert(event.keyCode);
        });
    };
    EventManager.prototype.ForceFocusUI = function (UIID) {
        if (UIID === void 0) { UIID = ""; }
        console.log("ForceFocusUI", UIID);
        var Dom = document.getElementById(UIID);
        Dom.focus();
    };
    EventManager.prototype.ForceFocusUIByClass = function (UIID, index) {
        if (UIID === void 0) { UIID = ""; }
        if (index === void 0) { index = 0; }
        //console.log("ForceFocusUI",UIID);
        var Dom = document.getElementsByClassName(UIID);
        var D = Dom[index];
        D.focus();
    };
    EventManager.prototype.focus = function (UIID) {
        if (UIID === void 0) { UIID = ""; }
        var Dom = document.getElementById(UIID);
        Dom.addEventListener("focus", function (event) {
            console.log("AlertKeyDown_e=", event, "e.target", event.target);
        });
    };
    EventManager.prototype.blur = function (UIID) {
        if (UIID === void 0) { UIID = ""; }
        var Dom = document.getElementById(UIID);
        Dom.addEventListener("blur", function (event) {
            console.log("AlertKeyDown_e=", event, "e.target", event.target);
        });
    };
    EventManager = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])()
    ], EventManager);
    return EventManager;
}());



/***/ }),

/***/ "./src/Module/ImgPath.ts":
/*!*******************************!*\
  !*** ./src/Module/ImgPath.ts ***!
  \*******************************/
/*! exports provided: ImgPathList */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImgPathList", function() { return ImgPathList; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var ImgPathList = /** @class */ (function () {
    function ImgPathList() {
        this.dirBgNormalR = [
            "url('./image/skin/dirBgNormalRHover.png')",
            "url('./image/skin/dirBgNormalR.png')",
        ];
        this.SwitchIcon = [
            "./image/ColorSet/Off/SwitchIcon.png",
            "./image/ColorSet/On/SwitchIcon.png",
        ];
        this.LedModeCanSee = [
            "./image/ColorSet/Off/EyeNotSee.png",
            "./image/ColorSet/On/EyeCanSee.png",
            "./image/ColorSet/Off/EyeNotSeeWhite.png",
            "./image/ColorSet/On/EyeCanSeeWhite.png",
        ];
        this.P_S_OSettingOpen = [
            "./image/Keyboard/Off/P_S_OSettingOpen.png",
            "./image/Keyboard/On/P_S_OSettingOpen.png",
        ];
        this.SystemSettingBtn = [
            "url(./image/Share/Off//SystemSettingBtn.png)",
            "url(./image/Share/On//SystemSettingBtn.png)",
        ];
        this.EditNameIcon = ["./image/ScriptSet/Off/EditName.png",
            "./image/ScriptSet/On/EditName.png"];
        this.MacroIcon = [
            "url('./image/ScriptSet/KeyUpIcon.png')",
            "url('./image/ScriptSet/KeyDownIcon.png')",
        ];
        this.IconRecord = [
            "./image/ScriptSet/Off/IconRecord.png",
            "./image/ScriptSet/On/IconRecord.png",
        ];
        this.IconDelete = [
            "./image/ScriptSet/Off/IconDelete.png",
            "./image/ScriptSet/On/IconDelete.png",
        ];
        this.IconEdit = [
            "./image/ScriptSet/Off/IconEdit.png",
            "./image/ScriptSet/On/IconEdit.png",
        ];
        this.IconMoveDown = [
            "./image/ScriptSet/Off/IconMoveDown.png",
            "./image/ScriptSet/On/IconMoveDown.png",
        ];
        this.IconMoveUP = [
            "./image/ScriptSet/Off/IconMoveUP.png",
            "./image/ScriptSet/On/IconMoveUp.png",
        ];
        this.IconAdd = [
            "./image/ScriptSet/Off/IconAdd.png",
            "./image/ScriptSet/On/IconAdd.png",
        ];
        this.FileSmallIcon = [
            "./image/ScriptSet/FileSmallIcon.png",
        ];
        this.FNIcon = [
            "./image/Keyboard/Off/FnIcon.png",
            "./image/Keyboard/On//FnIcon.png",
        ];
        this.FNIcon1 = [
            "./image/Keyboard/Off/FnIcon1.png",
            "./image/Keyboard/On//FnIcon1.png",
        ];
        this.FNIcon2 = [
            "./image/Keyboard/Off/FnIcon2.png",
            "./image/Keyboard/On//FnIcon2.png",
        ];
        this.FNIcon3 = [
            "./image/Keyboard/Off/FnIcon3.png",
            "./image/Keyboard/On//FnIcon3.png",
        ];
        this.ReportRate = [
            "./image/P7/Off/ReportRate.png",
            "./image/P7/On//ReportRate.png",
        ];
        this.BatteryStats = [
            "url(./image/FirstPage/0%.png)",
            "url(./image/FirstPage/Charging.png)",
            "url(./image/FirstPage/Charging.png)",
            "url(./image/FirstPage/Charging.png)",
            "url(./image/FirstPage/Charging.png)",
            "url(./image/FirstPage/100%.png)",
        ];
        this.ShareOption = [
            "url('./image/P7/Off/Option.png')",
            "url('./image/P7/On/Option.png')",
        ];
        this.Page1 = [
            "url('./image/Share/Off/Page1.png')",
            "url('./image/Share/mouseover/Page1.png')",
            "url('./image/Share/On/Page1.png')",
        ];
        this.Page2 = [
            "url('./image/Share/Off/Page2.png')",
            "url('./image/Share/mouseover/Page2.png')",
            "url('./image/Share/On/Page2.png')",
        ];
        this.Page3 = [
            "url('./image/Share/Off/Page3.png')",
            "url('./image/Share/mouseover/Page3.png')",
            "url('./image/Share/On/Page3.png')",
        ];
        this.Page4 = [
            "url('./image/Share/Off/Page4.png')",
            "url('./image/Share/mouseover/Page4.png')",
            "url('./image/Share/On/Page4.png')",
        ];
        this.BoxState = [
            "url('./image/Share/Off/BoxState.png')",
            "url('./image/Share/On/BoxState.png')",
        ];
        this.APModeSelectBtn = [
            "url('./image/ColorSet/Off/APModeSelectBtn.png')",
            "url('./image/ColorSet/On/APModeSelectBtn.png')",
        ];
        this.APModeCenterBtn = [
            "url('./image/ColorSet/Off/APModeCenterBtn.png')",
            "url('./image/ColorSet/On/APModeCenterBtn.png')",
        ];
        this.FileIcon = [
            "url('./image/ScriptSet/FileIconOff.png')",
            "url('./image/ScriptSet/FileIconOn.png')",
        ];
        this.BellIcon = [
            "url('./image/Share/Off/Bell.png')",
            "url('./image/Share/On/Bell.png')",
        ];
        this.SystemDefault = [
            "url('./image/Share/Off/SystemSettingBtn1.png')",
            "url('./image/Share/On/SystemSettingBtn1.png')",
            "url('./image/Share/mouseover/SystemSettingBtn1.png')",
        ];
        this.KBottomBtn = [
            "url('./image/Keyboard/Off/KBottomBtn0.png')",
            "url('./image/Keyboard/On/KBottomBtn0.png')",
            "url('./image/Keyboard/Off/KBottomBtn1.png')",
            "url('./image/Keyboard/On/KBottomBtn1.png')",
            "url('./image/Keyboard/Off/KBottomBtn2.png')",
            "url('./image/Keyboard/On/KBottomBtn2.png')",
            "url('./image/Keyboard/Off/KBottomBtn3.png')",
            "url('./image/Keyboard/On/KBottomBtn3.png')",
            "url('./image/Keyboard/Off/KBottomBtn4.png')",
            "url('./image/Keyboard/On/KBottomBtn4.png')",
            "url('./image/Keyboard/Off/KBottomBtn5.png')",
            "url('./image/Keyboard/On/KBottomBtn5.png')",
            "url('./image/Keyboard/Off/KBottomBtn6.png')",
            "url('./image/Keyboard/On/KBottomBtn6.png')",
            "url('./image/Keyboard/Off/KBottomBtn7.png')",
            "url('./image/Keyboard/On/KBottomBtn7.png')",
        ];
        ImgPathList_1.instance = this;
    }
    ImgPathList_1 = ImgPathList;
    ImgPathList.getInstance = function () {
        if (this.instance) {
            return this.instance;
        }
        else {
            //console.log("new ImgPathList Class");
            this.instance = new ImgPathList_1();
            console.log('%c ImgPathList_getInstance_err', 'background: blue; color: red');
            return this.instance;
        }
    };
    ImgPathList.instance = undefined;
    ImgPathList = ImgPathList_1 = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [])
    ], ImgPathList);
    return ImgPathList;
    var ImgPathList_1;
}());



/***/ }),

/***/ "./src/Module/KeyAssignManager.ts":
/*!****************************************!*\
  !*** ./src/Module/KeyAssignManager.ts ***!
  \****************************************/
/*! exports provided: KeyAssignManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyAssignManager", function() { return KeyAssignManager; });
/**-----------------------------------------------------------------------------------------
 * Author:G-SPY Louis
 * KeyAssignManager:KeyAssignManager Class
 * Processing KeyAssignStatus
-----------------------------------------------------------------------------------------*/
var KeyAssignManager = /** @class */ (function () {
    function KeyAssignManager() {
        this.assignValue = '';
        this.macro_RepeatType = 0;
        this.combinationkeyEnable = false;
        this.shortcutsWindowsEnable = false;
        this.recordBindCodeName = "";
        this.recordBindCodeType = "";
    }
    /**
       @param CodeName string:recordBindCodeName
       @param CodeNameType string:recordBindCodeType
       * CodeNameType list
       * KEYBOARD
       * MOUSE
       * Multimedia
       * SingleKey
       * MacroFunction
       * Shortcuts
       * DISABLE
       * LaunchProgram
       * LaunchWebsite
       */
    KeyAssignManager.prototype.setNowCodeName = function (CodeName, CodeNameType) {
        this.recordBindCodeName = CodeName;
        this.recordBindCodeType = CodeNameType;
        if (CodeNameType = "Shortcuts") {
            this.setShortCut(CodeNameType);
        }
    };
    /**
    * resetDefaultVariable
    */
    KeyAssignManager.prototype.resetDefaultVariable = function () {
        this.recordBindCodeType = "";
        this.recordBindCodeName = "";
        this.WebsitePath = "";
        this.ApplicationPath = "";
        this.combinationkeyEnable = false;
        this.shortcutsWindowsEnable = false;
        this.Shift = false;
        this.Ctrl = false;
        this.Alt = false;
        this.Windows = false;
        this.hasFNStatus = false;
    };
    /**
     * click Shortcut type
     * @param nameType string:ShortCut Type
     * 1. Launch Program
     * 2. Launch Website
     * 3. Windows
     */
    KeyAssignManager.prototype.setShortCut = function (nameType) {
        if (nameType == "LaunchProgram") {
            this.WebsitePath = "";
        }
        else if (nameType == "LaunchWebsite") {
            this.ApplicationPath = "";
        }
        else {
            this.ApplicationPath = "";
            this.WebsitePath = "";
        }
    };
    /**
     * set Combination key
     */
    KeyAssignManager.prototype.setCombinationKeyEnable = function () {
        if (!this.combinationkeyEnable) {
            this.Shift = false;
            this.Alt = false;
            this.Ctrl = false;
            this.Windows = false;
            this.hasFNStatus = false;
        }
    };
    /**
    * updateVariable
    *@param TData Obj:KeyAssignManager Data
    */
    KeyAssignManager.prototype.updateVariable = function (TData) {
        //var target=this.KeyBoardManager.getTarget().getNowModeTargetMatrixKey();
        var arr = Object.keys(TData);
        for (var index = 0; index < arr.length; index++) {
            if (this[arr[index]] != undefined) {
                this[arr[index]] = TData[arr[index]];
            }
        }
    };
    return KeyAssignManager;
}());



/***/ }),

/***/ "./src/Module/KeyBoardData.ts":
/*!************************************!*\
  !*** ./src/Module/KeyBoardData.ts ***!
  \************************************/
/*! exports provided: KB61Prohibit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KB61Prohibit", function() { return KB61Prohibit; });
var KB61Prohibit = /** @class */ (function () {
    function KB61Prohibit() {
    }
    KB61Prohibit.get_prohibit = function (Class) {
        if (Class === void 0) { Class = ""; }
        var target;
        switch (Class) {
            case "All":
                target = this.prohibitAll;
                break;
            case "Num":
                target = this.prohibitNum;
                break;
            case "Symbol":
                target = this.prohibitSymbol;
                break;
            case "ABC":
                target = this.prohibitABC;
                break;
            case "Control":
                target = this.prohibitControl;
                break;
        }
        if (Class != "") {
            var resultIndexArr = [];
            for (var one = 0; one < this.KeyIndexMatrix1.length; one++) {
                var element = this.KeyIndexMatrix1[one];
                for (var index2 = 0; index2 < target.length; index2++) {
                    if (target[index2] == element) {
                        resultIndexArr.push(one);
                    }
                }
            }
            console.log("KB61Prohibit_constructor", resultIndexArr);
            return resultIndexArr;
        }
    };
    KB61Prohibit.prohibitNum = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "0"];
    KB61Prohibit.prohibitAll = [
        "`", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "-", "+", "Backspace",
        "Tab", "Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P", "[", "]", "\\",
        "Caps", "A", "S", "D", "F", "G", "H", "J", "K", "L", ":", "\"", "Enter",
        "LShift", "Z", "X", "C", "V", "B", "N", "M", ",", ".", "/", "RShift",
        "LCtrl", "LWin", "LAlt", "Space", "RAlt", "RWin", "Menu", "RCtrl"
    ];
    KB61Prohibit.prohibitABC = [
        "Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P",
        "A", "S", "D", "F", "G", "H", "J", "K", "L",
        "Z", "X", "C", "V", "B", "N", "M",
    ];
    KB61Prohibit.prohibitControl = [
        "`", "Backspace",
        "Tab",
        "Caps", "Enter",
        "LShift", "RShift",
        "LCtrl", "LWin", "LAlt", "Space", "RAlt", "RWin", "Menu", "RCtrl"
    ];
    KB61Prohibit.prohibitSymbol = [
        "-", "+",
        "[", "]", "\\",
        ":", "\"",
        ",", ".", "/",
    ];
    KB61Prohibit.KeyIndexMatrix1 = [
        "`", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "-", "+", "Backspace",
        "Tab", "Q", "W", "E", "R", "T", "Y", "U", "I", "O", "P", "[", "]", "\\",
        "Caps", "A", "S", "D", "F", "G", "H", "J", "K", "L", ":", "\"", "Enter",
        "LShift", "Z", "X", "C", "V", "B", "N", "M", ",", ".", "/", "RShift",
        "LCtrl", "LWin", "LAlt", "Space", "RAlt", "RWin", "Menu", "RCtrl"
    ]; //8
    return KB61Prohibit;
}());



/***/ }),

/***/ "./src/Module/KeyBoardManager.ts":
/*!***************************************!*\
  !*** ./src/Module/KeyBoardManager.ts ***!
  \***************************************/
/*! exports provided: KeyBoardManager, KeyBoard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyBoardManager", function() { return KeyBoardManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyBoard", function() { return KeyBoard; });
/* harmony import */ var _KeyBoardData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./KeyBoardData */ "./src/Module/KeyBoardData.ts");

var KeyBoardManager = /** @class */ (function () {
    function KeyBoardManager(inputmax) {
        this.defaultName = "未配置";
        this.combinationkey = "";
        this.combination = [
            { name: "Alt", check: false },
            { name: "Shift", check: false },
            { name: "Ctrl", check: false },
            { name: "Win", check: false },
        ];
        this.currentChooseKeyBoard = 0;
        this.radioOptions = 65535;
        this.radioOptionsFrequency = 100;
        this.KeyBoardArray = [];
        this.maxKayCapNumber = inputmax;
        for (var index = 0; index < 10; index++) {
            this.KeyBoardArray.push(new KeyBoard("硬體配置" + index, inputmax));
        }
    }
    KeyBoardManager.prototype.keyAssignPrompt = function (event) {
        var KeyAssignPrompt = document.getElementById("KeyAssignPrompt");
        //KeyAssignPrompt.style.display='block';
        var H = event.target.offsetHeight;
        var W = event.target.offsetWidth;
        KeyAssignPrompt.style.left = event.target.offsetLeft + event.target.offsetWidth + "px";
        KeyAssignPrompt.style.top = event.target.offsetTop + "px";
        console.log('keyAssignPrompt', H, W, event);
        //console.log('keyAssignPrompt', event.offsetX, event.offsetY);
    };
    KeyBoardManager.prototype.clearAllKeyboardData = function (Name) {
        console.log("%c clearAllKeyboardData", "color:red", Name, this.maxKayCapNumber);
        for (var index = 0; index < this.KeyBoardArray.length; index++) {
            this.KeyBoardArray[index] = new KeyBoard(Name + (index + 1), this.maxKayCapNumber);
        }
    };
    KeyBoardManager.prototype.setAllProfileFieldData = function (field, obj) {
        var KBMarr = this.KeyBoardArray;
        for (var index = 0; index < KBMarr.length; index++) {
            KBMarr[index][field] = obj;
            //console.log('KBMarr[index][field]', KBMarr[index][field])
        }
    };
    KeyBoardManager.prototype.clearAllAssignRecordLed = function (FindName) {
        if (FindName === void 0) { FindName = ""; }
        var KBMarr = this.KeyBoardArray;
        for (var index = 0; index < KBMarr.length; index++) {
            KBMarr[index].clearAssignRecordLed(FindName);
        }
    };
    KeyBoardManager.prototype.ChangeAllLookingforMacroName = function (changeName, targetName) {
        if (changeName === void 0) { changeName = ""; }
        if (targetName === void 0) { targetName = ""; }
        console.log("EnterKeyChangeMacroName", changeName, targetName);
        var KBMarr = this.KeyBoardArray;
        for (var index = 0; index < KBMarr.length; index++) {
            KBMarr[index].ChangeMacroName(changeName, targetName);
        }
    };
    KeyBoardManager.prototype.ChangeAllLookingforLCFMName = function (changeName, targetName) {
        if (changeName === void 0) { changeName = ""; }
        if (targetName === void 0) { targetName = ""; }
        console.log("EnterKeyChangeMacroName", changeName, targetName);
        var KBMarr = this.KeyBoardArray;
        for (var index = 0; index < KBMarr.length; index++) {
            KBMarr[index].ChangeLCFMName(changeName, targetName);
        }
    };
    KeyBoardManager.prototype.clearRecordMacroData = function (targetName) {
        if (targetName === void 0) { targetName = ""; }
        console.log("clearRecordMacroData", targetName);
        var KBMarr = this.KeyBoardArray;
        for (var index = 0; index < KBMarr.length; index++) {
            KBMarr[index].clearMacroName(targetName);
        }
    };
    KeyBoardManager.prototype.getTarget = function () {
        var R_Obj = this.KeyBoardArray[this.currentChooseKeyBoard];
        if (R_Obj != undefined) {
            return R_Obj;
        }
        else {
            console.log("%c getTarget_error", this.currentChooseKeyBoard);
        }
    };
    KeyBoardManager.prototype.getAssignTarget = function (index) {
        return this.KeyBoardArray[index];
    };
    KeyBoardManager.prototype.create_KeyBoard = function (name) {
        if (name === void 0) { name = "配置方案"; }
        var index = this.KeyBoardArray.length + 666;
        this.KeyBoardArray.push(new KeyBoard(name + index, this.maxKayCapNumber));
    };
    KeyBoardManager.prototype.delete_KeyBoard = function () {
        if (this.currentChooseKeyBoard > 0) {
            var T = this.currentChooseKeyBoard;
            this.currentChooseKeyBoard -= 1;
            this.KeyBoardArray.splice(T, 1);
        }
        else if (this.currentChooseKeyBoard == 0) {
            this.KeyBoardArray.splice(this.currentChooseKeyBoard, 1);
        }
    };
    KeyBoardManager.prototype.setDefault = function () {
    };
    return KeyBoardManager;
}());

var KeyBoard = /** @class */ (function () {
    function KeyBoard(name, inputMax) {
        if (name === void 0) { name = ""; }
        this.hibernate = true;
        this.winLock = false;
        this.directionSwitch = false;
        this.hibernateTimeArr = [1, 3, 5, 10];
        this.reportRateIndex = 0;
        this.hibernateTime = 3;
        this.defaultName = "";
        this.recordAssignBtnIndex = 0;
        this.assignText = "設定按鍵:Y";
        this.assignedKeyboardKeys = [[], [], [], []]; //61KEY
        this.assignedFnKeyboardKeys = []; //61KEY
        this.fnModeMartrix = [false, false, false];
        this.fnModeindex = 0;
        this.fiveDefaultLedCode = [];
        this.fiveRecordIndex = 0;
        this.maxKayCapNumber = inputMax;
        this.projectName = name;
        console.log("%c Inpumt_KeyBoard", "color:red", inputMax, this.maxKayCapNumber);
        for (var index = 0; index < 4; index++) {
            for (var i2 = 0; i2 < this.maxKayCapNumber; i2++) {
                this.assignedKeyboardKeys[index].push(this.defaultModule());
            }
        }
        for (var index = 0; index < 5; index++) {
            this.fiveDefaultLedCode.push({
                projectCode: 0,
                projectName: this.defaultName
            });
        }
    }
    KeyBoard.prototype.getHibernateStepTime = function () {
        //console.log("getHibernateStepTime",this.hibernateTimeArr,this.hibernateTime);
        return this.hibernateTimeArr[this.hibernateTime];
    };
    KeyBoard.prototype.clearLostLCFM = function (LCFMArr) {
        if (LCFMArr === void 0) { LCFMArr = []; }
        var V3 = this.fiveDefaultLedCode;
        if (LCFMArr.length <= 0) {
            return this.clearAllLCFM();
        }
        for (var index = 0; index < this.assignedKeyboardKeys.length; index++) {
            for (var index2 = 0; index2 < this.maxKayCapNumber; index2++) {
                var target = this.assignedKeyboardKeys[index];
                if (target[index].projectCode != 0) {
                    if (checkExist(LCFMArr, target[index2].projectCode, target[index2].projectName) == false) {
                        console.log("clearLostLCFMV1=>重置");
                        target[index2].projectCode = 0;
                        target[index2].projectName = this.defaultName;
                    }
                }
            }
        }
        for (var indexV3 = 0; indexV3 < V3.length; indexV3++) {
            if (V3[indexV3].projectCode != 0) {
                if (checkExist(LCFMArr, V3[indexV3].projectCode, V3[indexV3].projectName) == false) {
                    console.log("clearLostLCFMV3=>重置");
                    V3[indexV3].projectCode = 0;
                    V3[indexV3].projectName = this.defaultName;
                }
            }
        }
        //檢查目標是否在陣列內
        function checkExist(array, findTarget1, findTarget2) {
            //console.log("checkExistArr",ary,findTarget);
            for (var index = 0; index < array.length; index++) {
                var element = array[index];
                if (element.projectCode == findTarget1 && element.projectName == findTarget2) {
                    console.log("存在值", element, findTarget1, findTarget2);
                    return true;
                }
            }
            return false;
        }
    };
    KeyBoard.prototype.clearAllLCFM = function () {
        var V3 = this.fiveDefaultLedCode;
        for (var index = 0; index < this.maxKayCapNumber; index++) {
            for (var index2 = 0; index2 < this.assignedKeyboardKeys.length; index2++) {
                var target = this.assignedKeyboardKeys[index];
                if (target[index2].projectCode != 0) {
                    target[index2].projectCode = 0;
                    target[index2].projectName = this.defaultName;
                }
            }
        }
        for (var indexV3 = 0; indexV3 < V3.length; indexV3++) {
            if (V3[indexV3].projectCode != 0) {
                V3[indexV3].projectCode = 0;
                V3[indexV3].projectName = this.defaultName;
            }
        }
    };
    KeyBoard.prototype.clearLostMacro = function (MCIarr) {
        if (MCIarr === void 0) { MCIarr = []; }
        console.log("clearLostMacro_MCIarr", MCIarr);
        if (MCIarr.length > 0) {
            for (var index = 0; index < this.assignedKeyboardKeys.length; index++) {
                for (var index2 = 0; index2 < this.maxKayCapNumber; index2++) {
                    var target = this.assignedKeyboardKeys[index];
                    if (target[index2].keyAssignType[0] == "KMacro") {
                        if (checkExist(MCIarr, target[index2].macroCode, target[index2].value) == false) {
                            target[index2].keyAssignType[0] = this.defaultName;
                            target[index2].value = this.defaultName;
                            target[index2].macroOptionNumber = 65536;
                            target[index2].macroCode = 0;
                        }
                    }
                }
            }
        }
        else {
            this.clearAllKMacro();
        }
        function checkExist(array, findTarget1, findTarget2) {
            for (var index = 0; index < array.length; index++) {
                var element = array[index];
                if (element.IndexCode == findTarget1 && element.name == findTarget2) {
                    console.log("存在值", element, findTarget1, findTarget2);
                    return true;
                }
            }
            return false;
        }
    };
    KeyBoard.prototype.clearAllKMacro = function () {
        for (var index = 0; index < this.assignedKeyboardKeys.length; index++) {
            for (var index2 = 0; index2 < this.maxKayCapNumber; index2++) {
                var target = this.assignedKeyboardKeys[index];
                if (target[index2].keyAssignType[0] == "KMacro") {
                    target[index2].keyAssignType[0] = this.defaultName;
                    target[index2].value = this.defaultName;
                    target[index2].macroOptionNumber = 65536;
                    target[index2].macroCode = 0;
                }
            }
        }
    };
    KeyBoard.prototype.ChangeLCFMName = function (changeName, targetName) {
        if (changeName === void 0) { changeName = ""; }
        if (targetName === void 0) { targetName = ""; }
        var V3 = this.fiveDefaultLedCode;
        console.log("ChangeLCFMName", changeName, targetName, this.assignedKeyboardKeys);
        for (var index = 0; index < this.assignedKeyboardKeys.length; index++) {
            for (var index2 = 0; index2 < this.maxKayCapNumber; index2++) {
                var target = this.assignedKeyboardKeys[index];
                if (target[index2].projectName == targetName) {
                    //V1Fn[index].projectCode=0;
                    target[index2].projectName = changeName;
                }
            }
        }
        for (var index = 0; index < V3.length; index++) {
            if (V3[index].projectName == targetName) {
                //V3[index].projectCode=0;
                V3[index].projectName = changeName;
            }
        }
    };
    KeyBoard.prototype.ChangeMacroName = function (changeName, targetName) {
        if (changeName === void 0) { changeName = ""; }
        if (targetName === void 0) { targetName = ""; }
        console.log("KeyChangeMacroName", changeName, targetName);
        for (var index = 0; index < this.assignedKeyboardKeys.length; index++) {
            var target = this.assignedKeyboardKeys[index];
            for (var index2 = 0; index2 < this.maxKayCapNumber; index2++) {
                var T = target[index2];
                if (T.value == targetName && T.keyAssignType[0] == "KMacro") {
                    console.log("KeyChangeMacroName_t", T);
                    T.value = changeName;
                }
            }
        }
    };
    KeyBoard.prototype.clearMacroName = function (targetName) {
        if (targetName === void 0) { targetName = ""; }
        for (var index = 0; index < this.assignedKeyboardKeys.length; index++) {
            var target = this.assignedKeyboardKeys[index];
            for (var index2 = 0; index2 < this.maxKayCapNumber; index2++) {
                var T = target[index2];
                if (T.value == targetName && T.keyAssignType[0] == "KMacro") {
                    T.value = this.defaultName;
                }
            }
        }
    };
    KeyBoard.prototype.countTotalAssign = function () {
        var V2Normal = this.assignedKeyboardKeys[0];
        var count = 0;
        for (var index = 0; index < this.maxKayCapNumber; index++) {
            if (V2Normal[index].projectCode != 0) {
                count += 1;
            }
        }
        return count;
    };
    KeyBoard.prototype.clearAssignRecordLed = function (FindName) {
        if (FindName === void 0) { FindName = ""; }
        var V3 = this.fiveDefaultLedCode;
        for (var index = 0; index < this.assignedKeyboardKeys.length; index++) {
            var target = this.assignedKeyboardKeys[index];
            for (var index2 = 0; index2 < this.maxKayCapNumber; index2++) {
                if (target[index2].projectName == FindName) {
                    target[index2].projectCode = 0;
                    target[index2].projectName = "";
                }
            }
        }
        for (var index = 0; index < V3.length; index++) {
            if (V3[index].projectName == FindName) {
                V3[index].projectCode = 0;
                V3[index].projectName = "";
            }
        }
    };
    KeyBoard.prototype.clearAssignLedcode = function (FindCode) {
        if (FindCode === void 0) { FindCode = ""; }
        var V3 = this.fiveDefaultLedCode;
        for (var index = 0; index < this.assignedKeyboardKeys.length; index++) {
            var target = this.assignedKeyboardKeys[index];
            for (var index2 = 0; index2 < this.maxKayCapNumber; index2++) {
                if (target[index2].projectCode == FindCode) {
                    target[index2].projectCode = 0;
                    target[index2].projectName = this.defaultName;
                }
            }
        }
        for (var index = 0; index < V3.length; index++) {
            if (V3[index].projectCode == FindCode) {
                V3[index].projectCode = 0;
                V3[index].projectName = this.defaultName;
            }
        }
    };
    KeyBoard.prototype.ImportClassData = function (InputData) {
        console.log("ImportClassData", InputData);
        var arr = Object.keys(this);
        console.log("Object.keys", arr);
        for (var index = 0; index < arr.length; index++) {
            if (arr[index] != "KB61Prohibit") {
                this[arr[index]] = InputData[arr[index]];
            }
        }
    };
    KeyBoard.prototype.HasSet = function (checkIndex) {
        if (checkIndex === void 0) { checkIndex = 0; }
        var target = this.getNowModeKeyMatrix();
        var N = target[checkIndex].value;
        var N2 = target[checkIndex].projectName;
        var N3 = target[checkIndex].LongTimePressValue;
        var N4 = target[checkIndex].InstantPressValue;
        return (N != "" || N2 != "" || N3 != "" || N4 != "") ? true : false;
    };
    KeyBoard.prototype.getKeyTargetOptionFrequency = function () {
        var N = this.getNowModeTargetMatrixKey().macroOptionNumber;
        console.log("getKeyTargetOptionFrequency", N);
        switch (true) {
            case (N < 65535):
                return N;
            case (N == 65535):
                return 1;
            case (N == 65536):
                return 1;
        }
    };
    KeyBoard.prototype.getNowModeKeyMatrix = function () {
        return this.assignedKeyboardKeys[this.fnModeindex];
    };
    KeyBoard.prototype.getNowModeTargetMatrixKey = function () {
        var target = this.getNowModeKeyMatrix()[this.recordAssignBtnIndex];
        if (target != undefined) {
            return target;
        }
        else {
            console.log("%c getNowModeTargetMatrixKey_lost", "color:red", this, this.getNowModeKeyMatrix(), this.recordAssignBtnIndex);
        }
    };
    KeyBoard.prototype.switchLongTime_Instant_Status = function () {
        this.getNowModeTargetMatrixKey().LongTime_Instant_Status = !this.getNowModeTargetMatrixKey().LongTime_Instant_Status;
    };
    KeyBoard.prototype.setFnModeMartrix = function (targetIndex) {
        this.fnModeMartrix[targetIndex] = !this.fnModeMartrix[targetIndex];
        for (var index = 0; index < this.fnModeMartrix.length; index++) {
            if (targetIndex != index) {
                this.fnModeMartrix[index] = false;
            }
        }
        if (!this.fnModeMartrix.some(function (element) { return element == true; })) {
            this.fnModeindex = 0;
        }
        else {
            this.fnModeindex = targetIndex + 1;
        }
        console.log("setFnModeMartrix_改後", this.fnModeMartrix[targetIndex], this.fnModeindex);
    };
    KeyBoard.prototype.set_prohibit = function (Class) {
        if (Class === void 0) { Class = ""; }
        var target = _KeyBoardData__WEBPACK_IMPORTED_MODULE_0__["KB61Prohibit"].get_prohibit(Class);
        console.log("get_prohibit", target);
        for (var index = 0; index < target.length; index++) {
            var T = this.getNowModeKeyMatrix()[target[index]];
            for (var KATindex = 0; KATindex < 3; KATindex++) {
                T.keyAssignType[KATindex] = "K12";
            }
            T.value = "⊘";
            T.LongTimePressValue = "⊘";
            T.InstantPressValue = "⊘";
            T.macroOptionNumber = 65536;
        }
    };
    KeyBoard.prototype.cancel_prohibit = function () {
        console.log("cancel_prohibit_FNMode");
        var T = this.getNowModeKeyMatrix();
        for (var index = 0; index < T.length; index++) {
            for (var KATindex = 0; KATindex < 3; KATindex++) {
                if (T[index].keyAssignType[KATindex] == "K12") {
                    T[index].keyAssignType[KATindex] = this.defaultName;
                    T[index].LongTimePressValue = this.defaultName;
                    T[index].InstantPressValue = this.defaultName;
                    T[index].value = this.defaultName;
                    T[index].macroOptionNumber = 65536;
                    T[index].macroCode = 0;
                }
            }
        }
    };
    //"設定按鍵:"
    KeyBoard.prototype.get_assign_promptText = function (Type) {
        switch (Type) {
            case 'LongTimePressValue':
                return this.getNowModeTargetMatrixKey().LongTimePressValue;
            case 'InstantPressValue':
                return this.getNowModeTargetMatrixKey().InstantPressValue;
            case 'NormalKeyPress':
                return this.getNowModeTargetMatrixKey().value;
        }
    };
    //"燈光設置:"
    KeyBoard.prototype.get_Led_promptText = function () {
        //console.log("FNMode_get_Led_promptText");
        return this.getNowModeTargetMatrixKey().projectName;
    };
    KeyBoard.prototype.checkFnSetOnlyData = function (inputValue) {
        console.log("clearLostMacro_MCIarr");
        var V1 = this.getNowModeKeyMatrix();
        for (var index = 0; index < this.maxKayCapNumber; index++) {
            for (var KATindex = 0; KATindex < 3; KATindex++) {
                if (V1[index].keyAssignType[KATindex] == inputValue) {
                    V1[index] = this.defaultModule();
                }
            }
        }
    };
    KeyBoard.prototype.set_assign_Text_Value = function (type_Code, inputValue, OptionNumber, IndexCode) {
        if (type_Code === void 0) { type_Code = ""; }
        if (OptionNumber === void 0) { OptionNumber = 65536; }
        if (IndexCode === void 0) { IndexCode = 0; }
        console.log("set_assign_Text_ValueTypeName", type_Code);
        console.log("set_assign_Text_ValueIndexCode", IndexCode);
        console.log("FNMode_TextAndValue");
        var T = this.getNowModeTargetMatrixKey();
        T.macroOptionNumber = OptionNumber;
        T.macroCode = IndexCode;
        switch (this.getNowModeTargetKeyPressStatus()) {
            case 'LongTimePress':
                T.keyAssignType[0] = type_Code;
                T.LongTimePressValue = inputValue;
                break;
            case 'InstantPress':
                T.keyAssignType[1] = type_Code;
                T.InstantPressValue = inputValue;
                break;
            case 'NormalPress':
                T.keyAssignType[2] = type_Code;
                T.value = inputValue;
                break;
        }
    };
    KeyBoard.prototype.getNowModeTargetKeyPressStatus = function () {
        if (this.getNowModeTargetMatrixKey().openLongTimePress) {
            if (this.getNowModeTargetMatrixKey().LongTime_Instant_Status) {
                return 'LongTimePress';
            }
            else {
                return 'InstantPress';
            }
        }
        else {
            return 'NormalPress';
        }
    };
    KeyBoard.prototype.setRecordLed = function (projectName, projectCode) {
        console.log("setRecordLedVar_", projectName, projectCode);
        var T = this.getNowModeTargetMatrixKey();
        T.projectName = projectName;
        T.projectCode = projectCode;
    };
    KeyBoard.prototype.set_FiveLed = function (projectName, projectCode) {
        console.log("set_FiveLed", projectName, projectCode);
        var T = this.fiveDefaultLedCode[this.fiveRecordIndex];
        T.projectCode = projectCode;
        T.projectName = projectName;
    };
    KeyBoard.prototype.resetAssignFive = function (index) {
        var T = this.fiveDefaultLedCode[index];
        T.projectCode = 0;
        T.projectName = this.defaultName;
    };
    KeyBoard.prototype.reset_assign_default = function (type) {
        if (type === void 0) { type = ""; }
        console.log("reset_assign_default", type);
        if (type == "key") {
            var T = this.getNowModeTargetMatrixKey();
            T.keyAssignType[2] = this.defaultName;
            T.value = this.defaultName;
            T.macroOptionNumber = 65536;
            T.macroCode = 0;
        }
        else if (type == "led") {
            var T = this.getNowModeTargetMatrixKey();
            T.projectName = this.defaultName;
            T.projectCode = 0;
        }
        else if (type == "LongTime_or_Instant_Delete") {
            var T = this.getNowModeTargetMatrixKey();
            if (T.LongTime_Instant_Status) {
                T.keyAssignType[0] = this.defaultName;
                T.LongTimePressValue = "";
            }
            else {
                T.keyAssignType[1] = this.defaultName;
                T.InstantPressValue = "";
            }
        }
    };
    KeyBoard.prototype.defaultModule = function (type) {
        if (type === void 0) { type = ""; }
        var T = {
            keyAssignType: ["", "", ""],
            LongTimePressValue: "",
            InstantPressValue: "",
            LongTime_Instant_Status: false,
            openLongTimePress: false,
            value: this.defaultName,
            macroOptionNumber: 65536,
            macroCode: 0,
            projectName: this.defaultName,
            projectCode: 0,
        };
        return T;
    };
    return KeyBoard;
}());



/***/ }),

/***/ "./src/Module/KeyBoardStyle.ts":
/*!*************************************!*\
  !*** ./src/Module/KeyBoardStyle.ts ***!
  \*************************************/
/*! exports provided: KeyBoardStyle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyBoardStyle", function() { return KeyBoardStyle; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**-----------------------------------------------------------------------------------------
 * Author:G-SPY Louis
 * KeyBoardStyle:KeyBoardStyle Class
 * Processing KeyBoardStyle
-----------------------------------------------------------------------------------------*/

var KeyBoardStyle = /** @class */ (function () {
    function KeyBoardStyle() {
        this.nowTargetIndex = 0;
        this.nowTargetKey = 'GMMK PRO';
        this.keyBoardList = {
            'GMMK PRO': {
                ItemCss: [
                    "margin-top: 19px;margin-left: 22px;height: 44px;display: flex;",
                    "margin-top: 19px;margin-left: 78px;height: 44px;display: flex;",
                    "margin-top: 18px;margin-left: 124px;height: 44px;display: flex;",
                    "margin-top: 18px;margin-left: 169px;height: 44px;display: flex;",
                    "margin-top: 18px;margin-left: 215px;height: 44px;display: flex;",
                    "margin-top: 18px;margin-left: 271px;height: 44px;display: flex;",
                    "margin-top: 18px;margin-left: 316px;height: 44px;display: flex;",
                    "margin-top: 18px;margin-left: 363px;height: 44px;display: flex;",
                    "margin-top: 18px;margin-left: 408px;height: 44px;display: flex;",
                    "margin-top: 18px;margin-left: 465px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 510px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 555px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 601px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 658px;height: 44px;display: flex;",
                    "margin-top: 19px;margin-left: 724px;border-radius: 25px;height: 44px;display: flex;",
                    "margin-top: 74px;margin-left: 23px;height: 44px;display: flex;",
                    "margin-top: 73px;margin-left: 68px;height: 44px;display: flex;",
                    "margin-top: 73px;margin-left: 113px;height: 44px;display: flex;",
                    "margin-top: 74px;margin-left: 158px;height: 44px;display: flex;",
                    "margin-top: 73px;margin-left: 203px;height: 44px;display: flex;",
                    "margin-top: 73px;margin-left: 249px;height: 44px;display: flex;",
                    "margin-top: 73px;margin-left: 294px;height: 44px;display: flex;",
                    "margin-top: 73px;margin-left: 339px;height: 44px;display: flex;",
                    "margin-top: 73px;margin-left: 384px;height: 44px;display: flex;",
                    "margin-top: 73px;margin-left: 429px;height: 44px;display: flex;",
                    "margin-top: 73px;margin-left: 474px;height: 44px;display: flex;",
                    "margin-top: 73px;margin-left: 520px;height: 44px;display: flex;",
                    "margin-top: 73px;margin-left: 567px;height: 44px;display: flex;",
                    "margin-top: 73px;margin-left: 613px;width: 88px;height: 44px;display: flex;",
                    "margin-top: 73px;margin-left: 723px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 22px;width: 67px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 90px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 137px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 182.1px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 227.1px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 272.1px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 317.1px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 362.1px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 407.1px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 452px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 497px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 543px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 588px;height: 44px;display: flex;",
                    "width: 66px;margin-top: 118px;margin-left: 634px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 722px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 22px;width: 79px;height: 44px;display: flex;",
                    "margin-top: 164px;margin-left: 103px;height: 44px;display: flex;",
                    "margin-top: 164px;margin-left: 148px;height: 44px;display: flex;",
                    "margin-top: 164px;margin-left: 193px;height: 44px;display: flex;",
                    "margin-top: 164px;margin-left: 238px;height: 44px;display: flex;",
                    "margin-top: 164px;margin-left: 283px;height: 44px;display: flex;",
                    "margin-top: 164px;margin-left: 328px;height: 44px;display: flex;",
                    "margin-top: 164px;margin-left: 373px;height: 44px;display: flex;",
                    "margin-top: 164px;margin-left: 418px;height: 44px;display: flex;",
                    "margin-top: 164px;margin-left: 464px;height: 44px;display: flex;",
                    "margin-top: 164px;margin-left: 509px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 554px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 601px;width: 100px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 722px;height: 44px;display: flex;",
                    "width: 98px;margin-top: 208px;margin-left: 24px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 125px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 170px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 215px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 260px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 305px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 351px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 395px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 441px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 486px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 531px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 577px;width: 77px;height: 44px;display: flex;",
                    "margin-top: 218px;margin-left: 667px;height: 44px;display: flex;",
                    "margin-top: 209px;margin-left: 723px;height: 44px;display: flex;",
                    "width: 53px;margin-top: 254px;margin-left: 24px;height: 44px;display: flex;",
                    "width: 53px;margin-top: 254px;margin-left: 80px;height: 44px;display: flex;",
                    "width: 53px;margin-top: 254px;margin-left: 137px;height: 44px;display: flex;",
                    "width: 277px;border-radius: 3px;margin-top: 253px;margin-left: 194px;height: 44px;display: flex;",
                    "margin-top: 254px;margin-left: 477px;height: 44px;display: flex;",
                    "margin-top: 253px;margin-left: 522px;height: 44px;display: flex;",
                    "margin-top: 253px;margin-left: 567px;height: 44px;display: flex;",
                    "margin-top: 262px;margin-left: 622px;height: 44px;display: flex;",
                    "margin-top: 263px;margin-left: 667px;height: 44px;display: flex;",
                    "margin-top: 263px;margin-left: 713px;height: 44px;display: flex;",
                ],
                hasValueStyle: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""],
                keyMapping: [
                    "Escape", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "PrintScreen", "ScrollWheel", "Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "Delete", "Tab", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "Backslash", "PageUp", "CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Enter", "PageDown", "ShiftLeft", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "ShiftRight", "ArrowUp", "End", "ControlLeft", "MetaLeft", "AltLeft", "Space", "AltRight", "Custom_Fnkey", "ControlRight", "ArrowLeft", "ArrowDown", "ArrowRight"
                ],
                cssText: 'position: absolute;height: 100%;width: 100%;pointer-events: none;',
                BGImage: 'url(./image/Share/KB1.png)',
                BGImageKeyerEffects: 'url(./image/Share/KB1KeyerEffects.png)',
                centerBlockPoint: 37,
                qigong_Step1_Range: [0, 15, 30, 58, 71, 82],
                qigong_Step2_Range: [22, 23, 38, 52, 51, 36],
                KeyTableArray: [[0, 14], [15, 29], [30, 44], [45, 58], [59, 72], [73, 82]],
                imageMaxWidth: 765,
                imageMaxHeight: 308,
            },
            "GMMK V2 65US": {
                ItemCss: [
                    "margin-top: 13px; margin-left: 12px; width: 45px; height: 43px; display: flex; ",
                    "margin-top: 13px; margin-left: 60px; width: 45px; height: 43px; display: flex; ",
                    "margin-top: 13px; margin-left: 107px; width: 45px; height: 43px; display: flex; ",
                    "margin-top: 13px; margin-left: 155px; width: 45px; height: 43px; display: flex; ",
                    "margin-top: 13px; margin-left: 202px; width: 45px; height: 43px; display: flex; ",
                    "margin-top: 13px;margin-left: 251px;width: 45px;height: 43px;display: flex;",
                    "margin-top: 13px;margin-left: 299px;width: 45px;height: 43px;display: flex;",
                    "margin-top: 13px;margin-left: 348px;width: 45px;height: 43px;display: flex;",
                    "margin-top: 13px;margin-left: 395px;width: 45px;height: 43px;display: flex;",
                    "margin-top: 13px;margin-left: 443px;width: 45px;height: 43px;display: flex;",
                    "margin-top: 13px;margin-left: 491px;width: 45px;height: 43px;display: flex;",
                    "margin-top: 13px;margin-left: 539px;width: 45px;height: 43px;display: flex;",
                    "margin-top: 13px;margin-left: 587px;width: 45px;height: 43px;display: flex;",
                    "margin-top: 13px;margin-left: 636px;width: 90px;height: 43px;display: flex;",
                    "margin-top: 13px;margin-left: 730px;width: 45px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 12px;width: 68px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 85px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 132px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 181px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 227px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 275px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 324px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 371px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 418px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 467px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 513px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 563px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 610px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 658px;width: 66px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 731px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 14px;width: 77px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 97px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 144px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 192px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 241px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 288px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 337px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 383px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 431px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 478px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 526px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 574px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 622px;width: 104px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 730px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 14px;width: 103px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 122px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 170px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 217px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 264px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 313px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 361px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 409px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 457px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 504px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 552px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 600px;width: 77px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 683px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 732px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 205px;margin-left: 14px;width: 52px;height: 43px;display: flex;",
                    "margin-top: 204px;margin-left: 73px;width: 52px;height: 43px;display: flex;",
                    "margin-top: 204px;margin-left: 134px;width: 52px;height: 43px;display: flex;",
                    "margin-top: 204px;margin-left: 193px;width: 292px;height: 43px;border-radius: 6px;display: flex;",
                    "margin-top: 204px;margin-left: 492px;width: 52px;height: 43px;display: flex;",
                    "margin-top: 204px;margin-left: 552px;width: 52px;height: 43px;display: flex;",
                    "margin-top: 204px;margin-left: 635px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 204px;margin-left: 683px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 204px;margin-left: 731px;width: 43px;height: 43px;display: flex;",
                ],
                hasValueStyle: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""],
                keyMapping: ["Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "Delete", "Tab", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "Backslash", "PageUp", "CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Enter", "PageDown", "ShiftLeft", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "ShiftRight", "ArrowUp", "End", "ControlLeft", "MetaLeft", "AltLeft", "Space", "MetaRight", "AltRight", "ArrowLeft", "ArrowDown", "ArrowRight"],
                cssText: 'position: absolute;height: 100%;width: 100%;pointer-events: none;',
                BGImage: 'url(./image/Share/KB1.png)',
                BGImageKeyerEffects: 'url(./image/Share/KB1KeyerEffects.png)',
                centerBlockPoint: 37,
                qigong_Step1_Range: [0, 15, 30, 33, 43, 54],
                qigong_Step2_Range: [21, 22, 37, 50, 49, 35],
                KeyTableArray: [[0, 14], [15, 29], [30, 43], [44, 57], [58, 66]],
                imageMaxWidth: 765,
                imageMaxHeight: 308,
            },
            "GMMK V2 65ISO": {
                ItemCss: [
                    "margin-top:13px;margin-left:12px;width:45px;height:43px;display:flex;",
                    "margin-top:13px;margin-left:60px;width:45px;height:43px;display:flex;",
                    "margin-top:13px;margin-left:107px;width:45px;height:43px;display:flex;",
                    "margin-top:13px;margin-left:155px;width:45px;height:43px;display:flex;",
                    "margin-top:13px;margin-left:202px;width:45px;height:43px;display:flex;",
                    "margin-top:13px;margin-left:251px;width:45px;height:43px;display:flex;",
                    "margin-top:13px;margin-left:299px;width:45px;height:43px;display:flex;",
                    "margin-top:13px;margin-left:348px;width:45px;height:43px;display:flex;",
                    "margin-top:13px;margin-left:395px;width:45px;height:43px;display:flex;",
                    "margin-top:13px;margin-left:443px;width:45px;height:43px;display:flex;",
                    "margin-top:13px;margin-left:491px;width:45px;height:43px;display:flex;",
                    "margin-top:13px;margin-left:539px;width:45px;height:43px;display:flex;",
                    "margin-top:13px;margin-left:587px;width:45px;height:43px;display:flex;",
                    "margin-top:13px;margin-left:636px;width:90px;height:43px;display:flex;",
                    "margin-top:13px;margin-left:732px;width:45px;height:43px;display:flex;",
                    "margin-top:61px;margin-left:12px;width:68px;height:43px;display:flex;",
                    "margin-top:61px;margin-left:85px;width:43px;height:43px;display:flex;",
                    "margin-top:61px;margin-left:132px;width:43px;height:43px;display:flex;",
                    "margin-top:61px;margin-left:181px;width:43px;height:43px;display:flex;",
                    "margin-top:61px;margin-left:227px;width:43px;height:43px;display:flex;",
                    "margin-top:61px;margin-left:275px;width:43px;height:43px;display:flex;",
                    "margin-top:61px;margin-left:324px;width:43px;height:43px;display:flex;",
                    "margin-top:61px;margin-left:371px;width:43px;height:43px;display:flex;",
                    "margin-top:61px;margin-left:418px;width:43px;height:43px;display:flex;",
                    "margin-top:61px;margin-left:467px;width:43px;height:43px;display:flex;",
                    "margin-top:61px;margin-left:517px;width:43px;height:43px;display:flex;",
                    "margin-top:61px;margin-left:563px;width:43px;height:43px;display:flex;",
                    "margin-top:61px;margin-left:610px;width:43px;height:43px;display:flex;",
                    "margin-top:61px;margin-left:734px;width:43px;height:43px;display:flex;",
                    "margin-top:109px;margin-left:14px;width:77px;height:43px;display:flex;",
                    "margin-top:109px;margin-left:97px;width:43px;height:43px;display:flex;",
                    "margin-top:109px;margin-left:144px;width:43px;height:43px;display:flex;",
                    "margin-top:109px;margin-left:192px;width:43px;height:43px;display:flex;",
                    "margin-top:109px;margin-left:241px;width:43px;height:43px;display:flex;",
                    "margin-top:109px;margin-left:288px;width:43px;height:43px;display:flex;",
                    "margin-top:109px;margin-left:337px;width:43px;height:43px;display:flex;",
                    "margin-top:109px;margin-left:383px;width:43px;height:43px;display:flex;",
                    "margin-top:109px;margin-left:431px;width:43px;height:43px;display:flex;",
                    "margin-top:109px;margin-left:478px;width:43px;height:43px;display:flex;",
                    "margin-top:109px;margin-left:526px;width:43px;height:43px;display:flex;",
                    "margin-top:109px;margin-left:574px;width:43px;height:43px;display:flex;",
                    "margin-top:109px;margin-left:624px;width:45px;height:43px;display:flex;",
                    "width: 62px;margin-top: 101px;margin-left: 671px;height: 89px;border-radius: 8px;transform: translate(-7px, -40px);\
                clip-path: polygon(0px 0px, 100% 0px, 100% 100%, 20% 100%, 21% 48%, 0px 48%);",
                    "margin-top:109px;margin-left:733px;width:43px;height:43px;display:flex;",
                    "margin-top:157px;margin-left:14px;width:56px;height:43px;display:flex;",
                    "margin-top:157px;margin-left:74px;width:44px;height:43px;display:flex;",
                    "margin-top:157px;margin-left:122px;width:43px;height:43px;display:flex;",
                    "margin-top:157px;margin-left:170px;width:43px;height:43px;display:flex;",
                    "margin-top:157px;margin-left:217px;width:43px;height:43px;display:flex;",
                    "margin-top:157px;margin-left:264px;width:43px;height:43px;display:flex;",
                    "margin-top:157px;margin-left:313px;width:43px;height:43px;display:flex;",
                    "margin-top:157px;margin-left:361px;width:43px;height:43px;display:flex;",
                    "margin-top:157px;margin-left:409px;width:43px;height:43px;display:flex;",
                    "margin-top:157px;margin-left:457px;width:43px;height:43px;display:flex;",
                    "margin-top:157px;margin-left:504px;width:43px;height:43px;display:flex;",
                    "margin-top:157px;margin-left:552px;width:43px;height:43px;display:flex;",
                    "margin-top:157px;margin-left:600px;width:77px;height:43px;display:flex;",
                    "margin-top:157px;margin-left:683px;width:43px;height:43px;display:flex;",
                    "margin-top:157px;margin-left:732px;width:43px;height:43px;display:flex;",
                    "margin-top:205px;margin-left:15px;width:52px;height:43px;display:flex;",
                    "margin-top:204px;margin-left:75px;width:52px;height:43px;display:flex;",
                    "margin-top:204px;margin-left:134px;width:52px;height:43px;display:flex;",
                    "margin-top:204px;margin-left:193px;width:292px;height:43px;border-radius:6px;display:flex;",
                    "margin-top:204px;margin-left:492px;width:52px;height:43px;display:flex;",
                    "margin-top:204px;margin-left:555px;width:52px;height:43px;display:flex;",
                    "margin-top:204px;margin-left:635px;width:43px;height:43px;display:flex;",
                    "margin-top:204px;margin-left:683px;width:43px;height:43px;display:flex;",
                    "margin-top:204px;margin-left:734px;width:43px;height:43px;display:flex;",
                ],
                hasValueStyle: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""],
                keyMapping: ["Escape", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "NumpadSubtract", "Equal", "Backspace", "Delete", "Tab", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "PageUp", "CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Backslash", "Enter", "PageDown", "ShiftLeft", "IntlBackslash", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "NumpadDivide", "ShiftRight", "ArrowUp", "End", "ControlLeft", "MetaLeft", "AltRight", "Space", "AltRight", "Custom_Fnkey", "ArrowLeft", "ArrowDown", "ArrowRight"],
                cssText: 'position: absolute;height: 100%;width: 100%;pointer-events: none;',
                BGImage: 'url(./image/Share/KB1.png)',
                BGImageKeyerEffects: 'url(./image/Share/KB1KeyerEffects.png)',
                centerBlockPoint: 37,
                qigong_Step1_Range: [0, 15, 30, 33, 43, 54],
                qigong_Step2_Range: [21, 22, 36, 51, 50, 34],
                KeyTableArray: [[0, 14], [15, 29], [30, 43], [44, 57], [58, 66]],
                imageMaxWidth: 765,
                imageMaxHeight: 308,
            },
            'GMMK PRO ISO': {
                ItemCss: [
                    "margin-top: 17px;margin-left: 22px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 78px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 124px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 169px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 215px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 272px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 317px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 363px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 408px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 465px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 510px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 556px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 602px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 658px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 723px;border-radius: 25px;height: 44px;display: flex;",
                    "margin-top: 72px;margin-left: 22px;height: 44px;display: flex;",
                    "margin-top: 72px;margin-left: 68px;height: 44px;display: flex;",
                    "margin-top: 71px;margin-left: 113px;height: 44px;display: flex;",
                    "margin-top: 71px;margin-left: 158px;height: 44px;display: flex;",
                    "margin-top: 71px;margin-left: 203px;height: 44px;display: flex;",
                    "margin-top: 72px;margin-left: 249px;height: 44px;display: flex;",
                    "margin-top: 71px;margin-left: 294px;height: 44px;display: flex;",
                    "margin-top: 71px;margin-left: 339px;height: 44px;display: flex;",
                    "margin-top: 71px;margin-left: 386px;height: 44px;display: flex;",
                    "margin-top: 71px;margin-left: 432px;height: 44px;display: flex;",
                    "margin-top: 71px;margin-left: 477px;height: 44px;display: flex;",
                    "margin-top: 71px;margin-left: 522px;height: 44px;display: flex;",
                    "margin-top: 71px;margin-left: 565px;height: 44px;display: flex;",
                    "margin-top: 71px;margin-left: 612px;width: 88px;height: 44px;display: flex;",
                    "margin-top: 72px;margin-left: 723px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 22px;width: 67px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 91px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 136px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 182px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 227px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 272px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 317px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 363px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 408px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 454px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 499px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 544px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 589px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 722px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 22px;width: 80px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 102px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 148px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 193px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 238px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 283px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 328px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 373px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 419px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 465px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 510px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 555px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 599px;width: 44px;height: 44px;display: flex;",
                    "width: 58px;margin-top: 159px;margin-left: 646px;height: 83px;\
                clip-path: polygon(0px 0px, 100% 0px, 100% 100%, 20% 100%, 21% 48%, 0px 48%);border-radius: 8px;display: flex;transform: translate(-7px, -40px);",
                    "width: 47px;margin-top: 163px;margin-left: 722px;height: 44px;display: flex;",
                    "width: 57px;margin-top: 208px;margin-left: 22px;height: 44px;display: flex;",
                    "width: 43px;margin-top: 208px;margin-left: 80px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 125px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 170px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 216px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 261px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 306px;height: 44px;display: flex;",
                    "margin-top: 209px;margin-left: 352px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 397px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 442px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 487px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 533px;width: 43px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 578px;height: 44px;width: 77px;display: flex;",
                    "width: 45px;margin-top: 216px;margin-left: 666px;height: 44px;display: flex;",
                    "width: 47px;margin-top: 209px;margin-left: 720px;height: 44px;display: flex;",
                    "width: 56px;height: 44px;margin-top: 253px;margin-left: 23px;display: flex;",
                    "width: 56px;height: 44px;margin-top: 253px;margin-left: 80px;display: flex;",
                    "width: 56px;height: 44px;margin-top: 253px;margin-left: 137px;display: flex;",
                    "width: 280px;height: 44px;margin-top: 253px;margin-left: 194.5px;border-radius: 8px;display: flex;",
                    "height: 44px;margin-top: 253px;margin-left: 476px;display: flex;",
                    "height: 44px;margin-top: 253px;margin-left: 521px;display: flex;",
                    "height: 44px;margin-top: 253px;margin-left: 567px;display: flex;",
                    "height: 44px;margin-top: 263px;margin-left: 621px;display: flex;",
                    "height: 44px;margin-top: 263px;margin-left: 667px;display: flex;",
                    "height: 44px;margin-top: 263px;margin-left: 712px;display: flex;",
                ],
                hasValueStyle: [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "margin-left: 15px",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                ],
                keyMapping: [
                    "Escape", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "PrintScreen", "ScrollWheel", "Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "Delete", "Tab", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "PageUp", "CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Backslash", "Enter", "PageDown", "ShiftLeft", "IntlBackslash", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "ShiftRight", "ArrowUp", "End", "ControlLeft", "MetaLeft", "AltLeft", "Space", "AltRight", "Custom_Fnkey", "ControlRight", "ArrowLeft", "ArrowDown", "ArrowRight"
                ],
                cssText: 'position: absolute;height: 100%;width: 100%;pointer-events: none;',
                BGImage: 'url(./image/Share/KB1.png)',
                BGImageKeyerEffects: 'url(./image/Share/KB1KeyerEffects.png)',
                centerBlockPoint: 37,
                qigong_Step1_Range: [0, 15, 30, 58, 71, 82],
                qigong_Step2_Range: [22, 23, 38, 52, 51, 36],
                KeyTableArray: [[0, 14], [15, 29], [30, 44], [45, 58], [59, 72], [73, 83]],
                imageMaxWidth: 765,
                imageMaxHeight: 308,
            },
            'GMMK V2 96US': {
                ItemCss: [
                    "margin-top: 11px;margin-left: 10px;height: 39px;width: 36px;display: flex;",
                    "margin-top: 10px;margin-left: 61px;height: 39px;width: 36px;display: flex;",
                    "margin-top: 10px;margin-left: 103px;height: 39px;width: 36px;display: flex;",
                    "margin-top: 10px;margin-left: 143px;height: 39px;width: 36px;display: flex;",
                    "margin-top: 10px;margin-left: 185px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 236px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 277px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 318px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 359px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 410px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 451px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 493px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 533px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 584px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 636px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 677px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 718px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 760px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 10px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 51px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 92px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 133px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 175px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 215px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 257px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 298px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 338px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 379px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 420px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 461px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 502px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 544px;width: 76px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 636px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 677px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 718px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 759px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 8px;width: 60px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 72px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 113px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 154px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 195px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 236px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 277px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 317px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 358px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 399px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 440px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 481px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 522px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 562px;width: 58px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 635px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 677px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 718px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 759px;width: 36px;height: 80px;display: flex;",
                    "margin-top: 136px;margin-left: 12px;width: 64px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 82px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 122px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 163px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 204px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 246px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 287px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 328px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 368px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 409px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 450px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 491px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 534px;width: 86px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 635px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 677px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 717px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 12px;width: 86px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 104px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 145px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 186px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 226px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 267px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 308px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 349px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 390px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 431px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 472px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 512px;width: 68px;height: 39px;display: flex;",
                    "margin-top: 183px;margin-left: 590px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 636px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 677px;width: 36px;height: 39px;",
                    "margin-top: 178px;margin-left: 717px;width: 36px;height: 39px;",
                    "margin-top: 178px;margin-left: 758px;width: 36px;height: 79px;",
                    "margin-top: 218px;margin-left: 12px;width: 44px;height: 39px;",
                    "margin-top: 218px;margin-left: 64px;width: 44px;height: 39px;display: flex;",
                    "margin-top: 218px;margin-left: 114px;width: 44px;height: 39px;display: flex;",
                    "margin-top: 218px;margin-left: 165px;width: 249px;height: 39px;display: flex;border-radius: 5px;",
                    "margin-top: 221px;margin-left: 421px;width: 35px;height: 36px;display: flex;",
                    "margin-top: 221px;margin-left: 462px;width: 35px;height: 36px;display: flex;",
                    "margin-top: 221px;margin-left: 503px;width: 35px;height: 36px;",
                    "margin-top: 225px;margin-left: 550px;width: 35px;height: 36px;display: flex;",
                    "margin-top: 225px;margin-left: 590px;width: 35px;height: 36px;display: flex;",
                    "margin-top: 225px;margin-left: 632px;width: 35px;height: 36px;display: flex;",
                    "margin-top: 220px;margin-left: 677px;width: 35px;height: 36px;",
                    "margin-top: 220px;margin-left: 718px;width: 35px;height: 36px;",
                ],
                hasValueStyle: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""],
                keyMapping: ["Escape", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "PrintScreen", "Delete", "Insert", "PageUp", "PageDown", "Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "NumLock", "NumpadDivide", "NumpadMultiply", "NumpadSubtract", "Tab", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "Backslash", "Numpad7", "Numpad8", "Numpad9", "NumpadAdd", "CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Enter", "Numpad4", "Numpad5", "Numpad6", "ShiftLeft", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "ShiftRight", "ArrowUp", "Numpad1", "Numpad2", "Numpad3", "NumpadEnter", "ControlLeft", "MetaLeft", "AltLeft", "Space", "AltRight", "Custom_Fnkey", "ControlRight", "ArrowLeft", "ArrowDown", "ArrowRight", "Numpad0", "NumpadDecimal"],
                cssText: 'position: absolute;height: 100%;width: 100%;pointer-events: none;',
                BGImage: 'url(./image/Share/KB1.png)',
                BGImageKeyerEffects: 'url(./image/Share/KB1KeyerEffects.png)',
                centerBlockPoint: 62,
                qigong_Step1_Range: [0, 18, 36, 69, 86, 98],
                qigong_Step2_Range: [44, 45, 63, 78, 77, 61],
                KeyTableArray: [[0, 17], [18, 35], [36, 53], [54, 69], [70, 86], [87, 98]],
                imageMaxWidth: 765,
                imageMaxHeight: 308,
            },
            'GMMK V2 96ISO': {
                ItemCss: [
                    "margin-top: 11px; margin-left: 10px; height: 39px; width: 36px; display: flex;",
                    "margin-top: 10px; margin-left: 61px; height: 39px; width: 36px; display: flex;",
                    "margin-top: 10px; margin-left: 103px; height: 39px; width: 36px; display: flex;",
                    "margin-top: 10px; margin-left: 143px; height: 39px; width: 36px; display: flex;",
                    "margin-top: 10px;margin-left: 182px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 231px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 272px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 312px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 352px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 401px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 441px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 481px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 522px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 571px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 622px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 663px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 703px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 743px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px; margin-left: 10px; width: 36px; height: 39px; display: flex;",
                    "margin-top: 55px; margin-left: 51px; width: 36px; height: 39px; display: flex;",
                    "margin-top: 55px; margin-left: 92px; width: 36px; height: 39px; display: flex;",
                    "margin-top: 55px; margin-left: 133px; width: 36px; height: 39px; display: flex;",
                    "margin-top: 55px;margin-left: 172px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 212px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 252px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 291px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 332px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 372px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 412px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 452px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 492px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 532px;width: 76px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 623px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 661px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 702px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 743px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px; margin-left: 8px; width: 60px; height: 39px; display: flex;",
                    "margin-top: 95px; margin-left: 72px; width: 36px; height: 39px; display: flex;",
                    "margin-top: 95px; margin-left: 113px; width: 36px; height: 39px; display: flex;",
                    "margin-top: 95px; margin-left: 154px; width: 36px; height: 39px; display: flex;",
                    "margin-top: 95px;margin-left: 191px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 232px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 272px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 312px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 352px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 392px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 432px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 471px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 511px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 622px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 662px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 703px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 742px;width: 36px;height: 80px;display: flex;",
                    "margin-top: 136px; margin-left: 12px; width: 64px; height: 39px; display: flex;",
                    "margin-top: 136px; margin-left: 82px; width: 36px; height: 39px; display: flex;",
                    "margin-top: 136px; margin-left: 122px; width: 36px; height: 39px; display: flex;",
                    "margin-top: 136px; margin-left: 163px; width: 36px; height: 39px; display: flex;",
                    "margin-top: 136px; margin-left: 204px; width: 36px; height: 39px; display: flex;",
                    "margin-top: 136px;margin-left: 242px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 281px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 322px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 361px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 403px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 442px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 482px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 520px;width: 38px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 550px;width: 58px;height: 77px;display: flex;clip-path: polygon(0px 0px, 100% 0px, 100% 100%, 20% 100%, 21% 48%, 0px 48%);",
                    "margin-top: 136px;margin-left: 622px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 663px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 702px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 12px;width: 45px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 60px;width: 38px;height: 39px;display: flex;",
                    "margin-top: 178px; margin-left: 104px; width: 36px; height: 39px; display: flex;",
                    "margin-top: 176px;margin-left: 142px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 175px;margin-left: 181px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 175px;margin-left: 223px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 175px;margin-left: 263px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 175px;margin-left: 302px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 175px;margin-left: 342px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 175px;margin-left: 382px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 175px;margin-left: 422px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 176px;margin-left: 462px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 174px;margin-left: 502px;width: 68px;height: 39px;display: flex;",
                    "margin-top: 180px;margin-left: 577px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 176px;margin-left: 622px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 175px;margin-left: 662px;width: 36px;height: 39px;",
                    "margin-top: 176px;margin-left: 702px;width: 36px;height: 39px;",
                    "margin-top: 176px;margin-left: 742px;width: 36px;height: 79px;",
                    "margin-top: 215px;margin-left: 12px;width: 44px;height: 39px;",
                    "margin-top: 215px;margin-left: 61px;width: 44px;height: 39px;display: flex;",
                    "margin-top: 215px;margin-left: 113px;width: 44px;height: 39px;display: flex;",
                    "margin-top: 216px;margin-left: 162px;width: 249px;height: 39px;display: flex;border-radius: 5px;",
                    "margin-top: 217px;margin-left: 412px;width: 35px;height: 36px;display: flex;",
                    "margin-top: 217px;margin-left: 452px;width: 35px;height: 36px;display: flex;",
                    "margin-top: 217px;margin-left: 493px;width: 35px;height: 36px;",
                    "margin-top: 221px;margin-left: 537px;width: 35px;height: 36px;display: flex;",
                    "margin-top: 221px;margin-left: 578px;width: 35px;height: 36px;display: flex;",
                    "margin-top: 220px;margin-left: 619px;width: 35px;height: 36px;display: flex;",
                    "margin-top: 216px;margin-left: 663px;width: 35px;height: 36px;",
                    "margin-top: 217px;margin-left: 703px;width: 35px;height: 36px;",
                ],
                hasValueStyle: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""],
                keyMapping: ["Escape", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "PrintScreen", "Delete", "Insert", "PageUp", "PageDown", "Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "NumpadSubtract", "Equal", "Backspace", "NumLock", "NumpadDivide", "NumpadMultiply", "NumpadSubtract", "Tab", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "Numpad7", "Numpad8", "Numpad9", "NumpadAdd", "CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Backslash", "Enter", "Numpad4", "Numpad5", "Numpad6", "ShiftLeft", "IntlBackslash", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "NumpadDivide", "ShiftRight", "ArrowUp", "Numpad1", "Numpad2", "Numpad3", "NumpadEnter", "ControlLeft", "MetaLeft", "AltRight", "Space", "AltRight", "Custom_Fnkey", "ControlRight", "ArrowLeft", "ArrowDown", "ArrowRight", "Numpad0", "NumpadDecimal"],
                cssText: 'position: absolute;height: 100%;width: 100%;pointer-events: none;',
                BGImage: 'url(./image/Share/KB1.png)',
                BGImageKeyerEffects: 'url(./image/Share/KB1KeyerEffects.png)',
                centerBlockPoint: 62,
                qigong_Step1_Range: [0, 18, 36, 69, 86, 98],
                qigong_Step2_Range: [44, 45, 62, 79, 78, 60],
                KeyTableArray: [[0, 17], [18, 35], [36, 53], [54, 69], [70, 86], [87, 98]],
                imageMaxWidth: 765,
                imageMaxHeight: 308,
            },
        };
    }
    /**
     * getAssignTarget
     * @param name string:keyBoard name
    */
    KeyBoardStyle.prototype.getAssignTarget = function (name) {
        //console.log("keyBoardList",this.keyBoardList,this.nowTargetKey);
        return this.keyBoardList[name];
    };
    /**
     * get nowTargetkeyBoard name
    */
    KeyBoardStyle.prototype.getTarget = function () {
        //console.log("keyBoardList",this.keyBoardList,this.nowTargetKey);
        return this.keyBoardList[this.nowTargetKey];
    };
    /**
     * get nowTargetkeyBoard keyMapping
    */
    KeyBoardStyle.prototype.getTargetDefaultKeyArray = function () {
        return this.getTarget().keyMapping;
    };
    /**
     * find KeyMappingIndex
     * @param code string:Key name
    */
    KeyBoardStyle.prototype.findKeyMappingIndex = function (code) {
        if (code === void 0) { code = ""; }
        var targetIndex = this.getTargetDefaultKeyArray().findIndex(function (x) { return x == code; });
        if (targetIndex == -1) {
            console.log('findKeyMappingIndex=lostcode', code);
        }
        return targetIndex;
    };
    /**
     * set keyBoardList cssText
     * @param target Array:HTMLElements List
    */
    KeyBoardStyle.prototype.applyStyles = function (target) {
        //console.log("applyStyles", this.getTarget().ItemCss,target);
        this.getTarget().ItemCss.forEach(function (element, index) {
            //console.log("applyStyles_element", element);
            if (target[index]) {
                //console.log("applyStyles_ItemCss_"+index, target[index].style.cssText);
                target[index].style.cssText = element;
            }
            else {
                console.log("applyStyles_ItemCss.forEach_Err", target[index], index);
            }
        });
        this.getTarget().keyMapping.forEach(function (element, index) {
            if (target[index]) {
                target[index].setAttribute('keyMapping', element);
                //console.log("applyStyles_keyMapping", index);
            }
            else {
                console.log("applyStyles_keyMapping.forEach_Err", "color:red", target[index], index);
            }
        });
    };
    KeyBoardStyle = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])()
    ], KeyBoardStyle);
    return KeyBoardStyle;
}());



/***/ }),

/***/ "./src/Module/KeyShortcut.ts":
/*!***********************************!*\
  !*** ./src/Module/KeyShortcut.ts ***!
  \***********************************/
/*! exports provided: KeyShortcut */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyShortcut", function() { return KeyShortcut; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var KeyShortcut = /** @class */ (function () {
    function KeyShortcut() {
    }
    KeyShortcut.prototype.setShortcut = function (key, targetName) {
        if (key === void 0) { key = ""; }
        if (targetName === void 0) { targetName = ""; }
        var UI = document.getElementById(targetName);
        document.addEventListener('keyup', function (event) {
            console.log("KeyShortcut_event.keyCode", event.keyCode);
            if (event.keyCode == 79) {
                UI.style.display != 'block' ? UI.style.display = 'block' : UI.style.display = 'none';
                //console.log("KeyShortcut_event.keyCode", UI.style.display);
            }
        });
    };
    KeyShortcut.prototype.open = function (ObjName) {
        if (ObjName === void 0) { ObjName = ""; }
        var UI = document.getElementById(ObjName);
        document.addEventListener('keyup', function (event) {
            console.log("KeyShortcut_event.keyCode", event.keyCode);
            if (event.keyCode == 79) {
                UI.style.display != 'block' ? UI.style.display = 'block' : UI.style.display = 'none';
                //console.log("KeyShortcut_event.keyCode", UI.style.display);
            }
        });
    };
    KeyShortcut = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])()
    ], KeyShortcut);
    return KeyShortcut;
}());



/***/ }),

/***/ "./src/Module/M_Built_ineffect.ts":
/*!****************************************!*\
  !*** ./src/Module/M_Built_ineffect.ts ***!
  \****************************************/
/*! exports provided: ModeParameter, Wave, M_Built_ineffect */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModeParameter", function() { return ModeParameter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Wave", function() { return Wave; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "M_Built_ineffect", function() { return M_Built_ineffect; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var ModeParameter = /** @class */ (function () {
    function ModeParameter() {
        this.color_quantity = 1;
        this.translate = "";
        this.Multicolor = false;
        this.currentColorsIndex = 0;
        this.brightness = 100;
        this.colors = ["#ff0000", "#ff8000", "#80ff00", "#00ff00", "#00ffff", "#0000ff", "#8000ff", "#ff00ff", "#ff0080", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff"];
        this.speed = 1;
        this.iconpath = ["./image/ColorSet/Off/Cycle.png", "./image/ColorSet/On/Cycle.png"];
        this.ParameterNumberList = [
            {
                visible: true,
                translate: 'SPEED',
                maxValue: 3,
                minValue: 1,
                setValue: 1,
                field: 'speed',
            },
        ];
        this.ParameterBoolList = [
            {
                visible: false,
                translate: 'SEPARATE',
                setValue: false,
                field: 'separate',
            },
        ];
    }
    ModeParameter = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [])
    ], ModeParameter);
    return ModeParameter;
}());

var Wave = /** @class */ (function (_super) {
    __extends(Wave, _super);
    function Wave() {
        var _this = _super.call(this) || this;
        _this.translate = 'Neon_stream';
        _this.PointEffectName = 'WaveSync';
        _this.colors = ["#ff0000", "#ff8000", "#80ff00", "#00ff00", "#00ffff", "#0000ff", "#8000ff", "#ff00ff", "#ff0080", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff"];
        return _this;
    }
    return Wave;
}(ModeParameter));

;
var Rainbow_wheel = /** @class */ (function (_super) {
    __extends(Rainbow_wheel, _super);
    function Rainbow_wheel() {
        var _this = _super.call(this) || this;
        _this.translate = 'Rainbow_wheel';
        _this.PointEffectName = 'FastRunWithoutTrace';
        _this.colors = ["#ff0000", "#ff8000"];
        return _this;
    }
    return Rainbow_wheel;
}(ModeParameter));
;
var Adorn = /** @class */ (function (_super) {
    __extends(Adorn, _super);
    function Adorn() {
        var _this = _super.call(this) || this;
        _this.translate = 'Adorn';
        _this.PointEffectName = 'Kamehemeha';
        _this.colors = ["#ff0000", "#ff8000"];
        return _this;
    }
    return Adorn;
}(ModeParameter));
;
var Starlight = /** @class */ (function (_super) {
    __extends(Starlight, _super);
    function Starlight() {
        var _this = _super.call(this) || this;
        _this.translate = 'Stars_twinkle';
        _this.PointEffectName = 'Starlight';
        _this.colors = ["#ff0000"];
        return _this;
    }
    return Starlight;
}(ModeParameter));
;
var Shadow_disappear = /** @class */ (function (_super) {
    __extends(Shadow_disappear, _super);
    function Shadow_disappear() {
        var _this = _super.call(this) || this;
        _this.translate = 'Shadow_disappear';
        _this.PointEffectName = 'PassWithoutTrace';
        _this.colors = ["#ff0000", "#ff8000"];
        return _this;
    }
    return Shadow_disappear;
}(ModeParameter));
;
var Retro_snake = /** @class */ (function (_super) {
    __extends(Retro_snake, _super);
    function Retro_snake() {
        var _this = _super.call(this) || this;
        _this.translate = 'Retro_snake';
        _this.PointEffectName = 'Blossom';
        _this.colors = ["#ff0000", "#ff8000"];
        return _this;
    }
    return Retro_snake;
}(ModeParameter));
;
var Cycle = /** @class */ (function (_super) {
    __extends(Cycle, _super);
    function Cycle() {
        var _this = _super.call(this) || this;
        _this.translate = 'ColorLoop';
        _this.PointEffectName = 'AcidMode';
        _this.colors = [];
        return _this;
    }
    return Cycle;
}(ModeParameter));
;
var Breath = /** @class */ (function (_super) {
    __extends(Breath, _super);
    function Breath() {
        var _this = _super.call(this) || this;
        _this.translate = 'Respire';
        _this.PointEffectName = 'Breath';
        _this.colors = ["#ff0000", "#ff8000"];
        return _this;
    }
    return Breath;
}(ModeParameter));
;
var Lighting = /** @class */ (function (_super) {
    __extends(Lighting, _super);
    function Lighting() {
        var _this = _super.call(this) || this;
        _this.translate = 'Fixed_on';
        _this.PointEffectName = 'Static';
        _this.colors = ["#ff0000"];
        var findlist = ['speed'];
        var _loop_1 = function (index) {
            var element = findlist[index];
            target = this_1.ParameterNumberList.find(function (x) { return x.field == element; });
            target.visible = false;
            // switch (element) {
            //     case 'speed':
            //         target.setValue=8;
            //             break;
            //     case 'number':
            //           target.setValue = 5;
            //           break;   
            // }
        };
        var this_1 = this, target;
        for (var index = 0; index < findlist.length; index++) {
            _loop_1(index);
        }
        return _this;
    }
    return Lighting;
}(ModeParameter));
;
var Ripple = /** @class */ (function (_super) {
    __extends(Ripple, _super);
    function Ripple() {
        var _this = _super.call(this) || this;
        _this.translate = 'Ripples_shining';
        _this.PointEffectName = 'RippleGraff';
        _this.colors = ["#ff0000", "#ff8000"];
        return _this;
    }
    return Ripple;
}(ModeParameter));
;
var Trigger = /** @class */ (function (_super) {
    __extends(Trigger, _super);
    function Trigger() {
        var _this = _super.call(this) || this;
        _this.translate = 'Reaction';
        _this.PointEffectName = 'PassWithoutTrace';
        _this.colors = ["#ff0000", "#ff8000"];
        return _this;
    }
    return Trigger;
}(ModeParameter));
;
var Flash_away = /** @class */ (function (_super) {
    __extends(Flash_away, _super);
    function Flash_away() {
        var _this = _super.call(this) || this;
        _this.translate = 'Flash_away';
        _this.PointEffectName = 'Rain';
        _this.colors = ["#ff0000"];
        return _this;
    }
    return Flash_away;
}(ModeParameter));
;
var Sine_wave = /** @class */ (function (_super) {
    __extends(Sine_wave, _super);
    function Sine_wave() {
        var _this = _super.call(this) || this;
        _this.translate = 'Sine_wave';
        _this.PointEffectName = 'Rain';
        _this.colors = ["#ff0000"];
        return _this;
    }
    return Sine_wave;
}(ModeParameter));
;
var Rain = /** @class */ (function (_super) {
    __extends(Rain, _super);
    function Rain() {
        var _this = _super.call(this) || this;
        _this.translate = 'Raindrops';
        _this.PointEffectName = 'KeepRaining';
        _this.colors = ["#ff0000"];
        return _this;
    }
    return Rain;
}(ModeParameter));
;
var MAD_CATZ = /** @class */ (function (_super) {
    __extends(MAD_CATZ, _super);
    function MAD_CATZ() {
        var _this = _super.call(this) || this;
        _this.translate = 'MAD_CATZ';
        _this.PointEffectName = 'Rain';
        _this.colors = ["#ff0000"];
        return _this;
    }
    return MAD_CATZ;
}(ModeParameter));
;
var M_Built_ineffect = /** @class */ (function () {
    function M_Built_ineffect() {
        this.ListData = [
            new Wave(),
            new Rainbow_wheel(),
            new Adorn(),
            new Starlight(),
            new Shadow_disappear(),
            new Retro_snake(),
            new Cycle(),
            new Breath(),
            new Lighting(),
            new Ripple(),
            new Trigger(),
            new Flash_away(),
            new Sine_wave(),
            new Rain(),
            new MAD_CATZ(),
        ];
        //Built_inSelected=new Wave();
        this.currentModeIndex = 0;
        //this.Built_ineffectsData.test
        console.log("Built_ineffect", "color:red", this.ListData);
    }
    M_Built_ineffect.prototype.getTarget = function () {
        //console.log(" this.recordModeArr[this.currentModeIndex];", this.recordModeArr[this.currentModeIndex]);
        return this.ListData[this.currentModeIndex];
    };
    M_Built_ineffect.prototype.getDefault = function () {
        return new Wave();
    };
    M_Built_ineffect.prototype.setModeIndex = function ($event, index) {
        this.currentModeIndex = index;
    };
    M_Built_ineffect.prototype.setModeForName = function (obj) {
        console.log("%c Built_ineffect_setModeForName", "color:red", obj);
        var target = this.ListData.findIndex(function (x) { return x.translate == obj.translate; });
        if (target != -1) {
            this.currentModeIndex = target;
            this.ListData[this.currentModeIndex] = obj;
        }
    };
    M_Built_ineffect.prototype.checkNullThenUpdateValue = function () {
        // var target=this.getTarget();
        // for (let index = 0; index <target.ParameterNumberList.length; index++) {
        //     var element = target.ParameterNumberList[index]
        //     if(element.setValue===null || element.setValue<element.minValue){
        //         element.setValue=element.minValue;
        //     }
        //     if(element.setValue>element.maxValue){
        //         element.setValue=element.maxValue;
        //     }
        // }
        var target = this.getTarget();
        for (var index = 0; index < target.ParameterNumberList.length; index++) {
            var element = target.ParameterNumberList[index];
            if (target[element.field] === null || target[element.field] < element.minValue) {
                target[element.field] = element.minValue;
            }
            if (target[element.field] > element.maxValue) {
                target[element.field] = element.maxValue;
            }
        }
    };
    M_Built_ineffect.prototype.getBuilt_inGraph = function (i, status) {
        return status ? './image/Built_inGraph/Off/' + this.ListData[i].translate + '.png' : './image/Built_inGraph/On/' + this.ListData[i].translate + '.png';
    };
    return M_Built_ineffect;
}());



/***/ }),

/***/ "./src/Module/M_Light_CS.ts":
/*!**********************************!*\
  !*** ./src/Module/M_Light_CS.ts ***!
  \**********************************/
/*! exports provided: M_Light_CS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "M_Light_CS", function() { return M_Light_CS; });
var M_Light_CS = /** @class */ (function () {
    // x_Array=new Array(120);//8*26;
    // y_Array=new Array(120);//8*26;
    function M_Light_CS(inputMax) {
        //左上,右上,左下,右下
        this.maxkaycapNumber = 0;
        this.AllBlockColor = [];
        this.lightData = {
            translate: 'GloriousMode',
            PointEffectName: 'GloriousMode',
            colorPickerValue: [255, 0, 0, 1],
            brightness: 100,
            speed: 50,
        };
        this.animationSpeed = 1;
        this.currentBlockIndex = 0;
        this.minKeyWidth = 43;
        this.minKeyHeight = 41;
        this.settingPerkeyName = '';
        this.imageMaxWidth = 0;
        this.imageMaxHeight = 0;
        this.recordModeArr = [];
        this.currentModeIndex = 0;
        this.twoDimensionalArray = new Array(26); //8*26;
        this.KeyTableArray = [];
        this.qigong_Step2_Range = [22, 23, 38, 52, 51, 36];
        this.qigong_Step1_Range = [0, 15, 30, 58, 71, 82];
        this.BreathTempArray = [];
        this.centerBlockPoint = 37;
        this.break_DimensionalArray = [];
        this.max_X_Number = 26;
        this.max_Y_Number = 8;
        this.maxkaycapNumber = inputMax;
        for (var i_block = 0; i_block < this.maxkaycapNumber; i_block++) {
            this.AllBlockColor.push({ clearStatus: false, color: [0, 0, 0, 0], breathing: false, border: true, coordinateData: [], keyCode: '' });
            this.BreathTempArray.push({ clearStatus: false, color: [0, 0, 0, 0], breathing: false, border: true, coordinateData: [], keyCode: '' });
        }
        for (var index = 0; index < this.twoDimensionalArray.length; index++) {
            this.twoDimensionalArray[index] = [];
        }
        for (var index = 0; index < this.twoDimensionalArray.length; index++) {
            for (var index2 = 0; index2 < 8; index2++) {
                this.twoDimensionalArray[index].push(this.defaultModule());
            }
        }
    }
    M_Light_CS.prototype.defaultModule = function (type) {
        if (type === void 0) { type = ''; }
        var T = {
            blockIndex: 9999,
            color: [255, 0, 0, 1],
        };
        return T;
    };
    M_Light_CS.prototype.setKeyTableArray = function (KeyTableArray) {
        this.KeyTableArray = KeyTableArray;
        for (var index = 0; index < this.KeyTableArray.length; index++) {
            var min = this.KeyTableArray[index][0]; //14
            var max = this.KeyTableArray[index][1]; //29
            var total = max - min;
            for (var i3 = 0; i3 <= total; i3++) {
                this.twoDimensionalArray[i3][index].blockIndex = i3 + min;
                //console.log('twoDimensionalArray', this.twoDimensionalArray[index][i3]=i3+min);
            }
        }
        //console.log('twoDimensionalArray', this.twoDimensionalArray);
        //console.log('KeyTableArray', this.KeyTableArray);
    };
    M_Light_CS.prototype.showTwoDimensionalArray = function () {
        for (var index = 0; index < this.twoDimensionalArray.length; index++) {
            for (var index2 = 0; index2 < 8; index2++) {
                var target = this.twoDimensionalArray[index][index2];
                if (target.blockIndex != 9999) {
                    this.AllBlockColor[target.blockIndex].color = target.color;
                }
            }
        }
    };
    M_Light_CS.prototype.resetTwoDimensionalArray = function (colors) {
        if (colors === void 0) { colors = [0, 0, 0, 1]; }
        for (var index = 0; index < this.twoDimensionalArray.length; index++) {
            //var temp_=new Array(26);
            for (var index2 = 0; index2 < this.twoDimensionalArray[index].length; index2++) {
                //const element = array[index];
                var target = this.twoDimensionalArray[index][index2];
                target.color = colors;
            }
        }
    };
    M_Light_CS.prototype.setCoordinateData = function (RGBList) {
        for (var index = 0; index < RGBList.length; index++) {
            var element = RGBList[index];
            //element.setAttribute('data-index', String(index));
            //element.setAttribute('coordinate', String(element));     
            var obj = {
                "clientHeight": element.clientHeight,
                "clientWidth": element.clientWidth,
                "offsetLeft": element.offsetLeft,
                "offsetTop": element.offsetTop,
                "scroll": element.scroll,
                "top_Left": [element.offsetLeft, element.offsetTop],
                "top_Right": [element.offsetLeft + element.clientWidth, element.offsetTop],
                "bottom_Left": [element.offsetLeft, element.offsetTop + element.clientHeight],
                "bottom_Right": [element.offsetLeft + element.clientWidth, element.offsetTop + element.clientHeight],
                "center_Point": [element.offsetLeft + (element.clientWidth / 2), element.offsetTop + (element.clientHeight / 2)],
            };
            this.AllBlockColor[index].coordinateData = obj;
        }
        console.log('setCoordinateData()', this.AllBlockColor);
    };
    M_Light_CS.prototype.setPerkey = function (index, Clear, colorPickerValue, breathing) {
        if (!Clear) {
            this.AllBlockColor[index].color = [0, 0, 0, 0];
            this.AllBlockColor[index].breathing = false;
            this.AllBlockColor[index].clearStatus = false;
        }
        else {
            this.AllBlockColor[index].color = JSON.parse(JSON.stringify(colorPickerValue));
            this.AllBlockColor[index].breathing = breathing;
            this.AllBlockColor[index].clearStatus = true;
            console.log('%c setPerkey,breathing,Clear', 'color:rgb(255,77,255)', this.AllBlockColor[index].breathing, Clear);
        }
    };
    M_Light_CS.prototype.setlightData = function (obj) {
        this.lightData = JSON.parse(JSON.stringify(obj));
    };
    M_Light_CS.prototype.resetDefault = function (resetData) {
        this.lightData = resetData;
        var arr = Object.keys(resetData);
        for (var i = 0; i < this.AllBlockColor.length; i++) {
            for (var index = 0; index < arr.length; index++) {
                if (this.AllBlockColor[i][arr[index]] != undefined) {
                    this.AllBlockColor[i][arr[index]] = resetData[arr[index]];
                }
            }
            this.AllBlockColor[i].color = [0, 0, 0, 0];
        }
    };
    M_Light_CS.prototype.addBlockIndex = function () {
        if (this.currentBlockIndex < this.AllBlockColor.length - 1) {
            this.currentBlockIndex += 1;
        }
        else {
        }
    };
    M_Light_CS.prototype.setGroupArrayColor = function (obj) {
        //groupArray,assignColor=[],isAll=false,clearStatus=false,colorPickerValue,breathing
        if (obj.isAll) {
            obj.groupArray = [];
            for (var i = 0; i < this.AllBlockColor.length; i++) {
                obj.groupArray.push(i);
            }
        }
        if (obj.assignColor.length < 1) {
            //console.log('setGroupArrayColor_assignColor', assignColor)
            obj.assignColor = JSON.parse(JSON.stringify(obj.colorPickerValue));
        }
        var target = this.AllBlockColor;
        obj.groupArray.forEach(function (value, index, array) {
            target[value].color = obj.assignColor;
            target[value].breathing = obj.breathing;
            target[value].clearStatus = obj.clearStatus;
        });
    };
    M_Light_CS.prototype.subBlockIndex = function () {
        if (this.currentBlockIndex > 0) {
            this.currentBlockIndex -= 1;
        }
        else {
        }
    };
    M_Light_CS.prototype.rgbToHex = function (r, g, b) {
        r = Number(r);
        g = Number(g);
        b = Number(b);
        return "#" + this.componentToHex(r) + this.componentToHex(g) + this.componentToHex(b);
    };
    M_Light_CS.prototype.componentToHex = function (c) {
        var hex = c.toString(16);
        return hex.length == 1 ? "0" + hex : hex;
    };
    M_Light_CS.prototype.getNowBlock = function (index) {
        if (index === void 0) { index = -1; }
        if (index != -1) {
            return this.AllBlockColor[index];
        }
        else {
            return this.AllBlockColor[this.currentBlockIndex];
        }
    };
    M_Light_CS.prototype.ImportLedClassData = function (InputData) {
        console.log('ImportLedClassData', InputData);
        var arr = Object.keys(this.getTarget());
        for (var index = 0; index < arr.length; index++) {
            if (arr[index] != '') {
                this.getTarget()[arr[index]] = InputData[arr[index]];
            }
        }
    };
    M_Light_CS.prototype.ImportCreateLedData = function (InputData) {
        console.log('ImportCreateLedData', InputData);
        InputData = JSON.parse(JSON.stringify(InputData));
        this.recordModeArr.push(InputData);
    };
    M_Light_CS.prototype.getTarget = function () {
        //console.log(" this.recordModeArr[this.currentModeIndex];", this.recordModeArr[this.currentModeIndex]);
        return this.recordModeArr[this.currentModeIndex];
    };
    M_Light_CS.prototype.switchEffectMode = function (index) {
        // var clone = $.extend(
        //     true,
        //     Object.create(Object.getPrototypeOf(this.modeClassArr[index])),
        //     this.modeClassArr[index]
        // )
        // console.log('newSwitchEffectMode', clone)
        // this.recordModeArr[this.currentModeIndex] = clone
    };
    M_Light_CS.prototype.deleteChoose = function () {
        if (this.recordModeArr.length > 1) {
            this.recordModeArr.splice(this.currentModeIndex, 1);
        }
        if (this.currentModeIndex - 1 >= 0) {
            this.currentModeIndex -= 1;
        }
        this.updateframe_selection_range();
        console.log('deleteChoose', '=>currentModeIndex' + this.currentModeIndex);
    };
    M_Light_CS.prototype.addNewChoose = function () {
        if (this.recordModeArr.length > 10) {
            return;
        }
    };
    M_Light_CS.prototype.stringFormat = function () {
        if (arguments.length == 0)
            return null;
        var str = arguments[0];
        for (var i = 1; i < arguments.length; i++) {
            var re = new RegExp('\\{' + (i - 1) + '\\}', 'gm');
            str = str.replace(re, arguments[i]);
        }
        return str;
    };
    //原有邊框架構 因客戶要求不顯示邊框 這邊採用border判斷是否顯示此格
    M_Light_CS.prototype.updateframe_selection_range = function () {
    };
    M_Light_CS.prototype.distanceCalculation = function (x1, y1, x2, y2) {
        return Math.sqrt(Math.pow((x1 - x2), 2) + Math.pow((y1 - y2), 2)); //å…©é»žè·�é›¢
    };
    M_Light_CS.prototype.onSetModeRefresh = function () {
        this.setAnimationSpeed();
        clearInterval(this.repeater);
        this.setAllBlockColor([0, 0, 0, 1]);
    };
    M_Light_CS.prototype.mode_NormallyOn = function (colors, isRainbow) {
        var _this = this;
        if (colors === void 0) { colors = [[0, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        clearInterval(this.repeater);
        //this.setAllBlockColor([0, 0, 255, 1]);
        console.log('%c mode_NormallyOn', 'color:rgb(255,75,255,1)', colors, colors[this.getRandom(0, colors.length - 1)]);
        this.repeater = setInterval(function () {
            var temp_colorData = JSON.parse(JSON.stringify(colors[_this.getRandom(0, colors.length - 1)]));
            for (var index = 0; index < 3; index++) {
                temp_colorData[index] = temp_colorData[index] * _this.lightData.brightness / 100;
            }
            _this.setAllBlockColor(temp_colorData);
        }, 50);
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.mode_NormallyOnMulticolor = function (colors, isRainbow) {
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        clearInterval(this.repeater);
        this.setAllBlockColor([0, 0, 0, 1]);
        var repeatCountList = [];
        var target = this.AllBlockColor;
        var setRGB;
        //var RGBObj=this.rainbow7Color()
        var RGBObj = [[255, 0, 0, 1], [255, 0, 0, 1], [0, 255, 0, 1], [0, 0, 255, 1], [0, 0, 255, 1]];
        //[this.getRandom(0, this.rainbow7Color().length - 1)];
        var Rainbow_totalstep = 60;
        var Rainbow_step = 0;
        var Rainbow_i = 0;
        console.log('%c mode_NormallyOnMulticolor', 'color:rgb(255,75,255,1)', colors);
        for (var i_compare = 0; i_compare < this.imageMaxWidth; i_compare += this.imageMaxWidth / 60 / 5) {
            //const element = array[index];
            if (Rainbow_step < Rainbow_totalstep) {
                Rainbow_step += 1;
            }
            else {
                Rainbow_step = 0;
                if (Rainbow_i < RGBObj.length - 2) {
                    Rainbow_i += 1;
                }
                else {
                    Rainbow_i = 0;
                }
            }
            var t_data = [0, 0, 0, 1];
            for (var index = 0; index < 3; index++) {
                t_data[index] = (RGBObj[Rainbow_i][index] * (Rainbow_totalstep - Rainbow_step) + RGBObj[Rainbow_i + 1][index] * Rainbow_step) / Rainbow_totalstep;
            }
            //setRGB = this.rainbow7Color()[this.getRandom(0, this.rainbow7Color().length - 1)];  
            setRGB = t_data;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var dis = this.distanceCalculation(0, this.imageMaxHeight / 2, element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                if (dis <= i_compare && dis >= i_compare - this.minKeyWidth) {
                    // repeatCountList.push({
                    //     color: setRGB,
                    //     recordIndex:index,
                    //     repeatTime: this.getRandom(5, 25),
                    // });
                    var temp_colorData = JSON.parse(JSON.stringify(setRGB));
                    for (var index_1 = 0; index_1 < 3; index_1++) {
                        temp_colorData[index_1] = temp_colorData[index_1] * this.lightData.brightness / 100;
                    }
                    element.color = temp_colorData;
                }
            }
        }
        //console.log('repeatCountList', repeatCountList)
        // this.repeater = setInterval(() => {
        // }, 50*this.animationSpeed)
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.mode_AcidMode = function (colors) {
        var _this = this;
        if (colors === void 0) { colors = []; }
        clearInterval(this.repeater);
        //colors = this.rainbow7Color();
        colors = [[255, 0, 0, 1], [0, 255, 0, 1], [0, 0, 255, 1]];
        var repeatCount = 0;
        var StartPoint = this.getNowBlock(50).coordinateData;
        var mode_step = 0;
        var step = 60;
        var nowStep = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        var repeatCountList = [];
        var target = this.AllBlockColor;
        var setRGB = this.rainbow7Color();
        var repeatCircleCount = 0;
        for (var i_compare = 0; i_compare < this.imageMaxWidth; i_compare += this.minKeyWidth) {
            //const element = array[index];
            //setRGB = [0, 0, 255, 1];
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var dis = this.distanceCalculation(StartPoint.center_Point[0], StartPoint.center_Point[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                if (dis <= i_compare && dis >= i_compare - this.minKeyWidth) {
                    repeatCountList.push({
                        color: colors[0],
                        recordIndex: index,
                        repeatTime: this.getRandom(5, 25),
                    });
                }
            }
        }
        console.log('repeatCountList', repeatCountList);
        this.repeater = setInterval(function () {
            //this.mode_reset();
            var t_Count = repeatCount % 3;
            var t_Count2;
            if (t_Count + 1 < colors.length) {
                t_Count2 = t_Count + 1;
            }
            else {
                t_Count2 = 0;
            }
            //console.log('t_Count',t_Count, t_Count2);
            for (var index = 0; index < repeatCountList.length; index++) {
                //var nowColor=[JSON.parse(JSON.stringify(repeatCountList[index].color)),[0,0,0,1]];
                var nowColor = JSON.parse(JSON.stringify(colors));
                var temp_colorData = [0, 0, 0, 1];
                for (var index_2 = 0; index_2 < 3; index_2++) {
                    temp_colorData[index_2] = (nowColor[t_Count][index_2] * (step - nowStep) + nowColor[t_Count2][index_2] * nowStep) / step;
                    temp_colorData[index_2] = temp_colorData[index_2] * _this.lightData.brightness / 100;
                }
                var target = _this.AllBlockColor;
                target[repeatCountList[index].recordIndex].color = JSON.parse(JSON.stringify(temp_colorData));
                //console.log('element.color', t_data, step, nowStep)
            }
            if (nowStep < step - 1) {
                nowStep += 1;
            }
            else {
                nowStep = 0;
                repeatCount += 1;
                //repeatCount=0;            
            }
        }, 50 * this.animationSpeed);
    };
    M_Light_CS.prototype.setAnimationSpeed = function () {
        //this.acceleration
        this.animationSpeed = 1 * (1 - this.lightData.speed / 400);
    };
    M_Light_CS.prototype.mode_Kamehemeha = function (colors, isRainbow) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        clearInterval(this.repeater);
        if (isRainbow) {
            colors = this.rainbow7Color();
        }
        var centerBlockIndex = this.centerBlockPoint;
        var repeatCount = 0;
        var StartPoint = this.getNowBlock(this.centerBlockPoint).coordinateData;
        this.setAllBlockColor([0, 0, 0, 1]);
        var target = this.AllBlockColor;
        var setRGB = this.rainbow7Color();
        var setArray = JSON.parse(JSON.stringify(this.qigong_Step1_Range));
        console.log('enter mode_Kamehemeha');
        this.repeater = setInterval(function () {
            //this.mode_reset();  
            //this.setAllBlockColor([0, 0, 0, 1]);
            for (var index = 0; index < setArray.length; index++) {
                var temp_colorData = JSON.parse(JSON.stringify(colors[_this.getRandom(0, colors.length - 1)]));
                for (var index_3 = 0; index_3 < 3; index_3++) {
                    temp_colorData[index_3] = temp_colorData[index_3] * _this.lightData.brightness / 100;
                }
                target[setArray[index]].color = temp_colorData;
            }
            for (var index = 0; index < setArray.length; index++) {
                if (setArray[index] < centerBlockIndex) {
                    setArray[index] += 1;
                }
                else {
                    if (target[setArray[index]].coordinateData.center_Point[0] > StartPoint.center_Point[0]) {
                        setArray[index] -= 1;
                    }
                }
            }
            repeatCount += 1;
            if (repeatCount > 7) {
                if (isRainbow) {
                    _this.mode_Kamehemeha2(colors, true);
                }
                else {
                    _this.mode_Kamehemeha2(colors, false);
                }
                //this.mode_RippleGraff([],false,37);              
            }
        }, 55 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_Kamehemeha2 = function (colors, isRainbow) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1], [0, 255, 0, 1], [0, 0, 255, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        clearInterval(this.repeater);
        //colors = this.rainbow7Color();
        var repeatCount = 0;
        var StartPoint = this.getNowBlock(this.centerBlockPoint).coordinateData;
        if (isRainbow) {
            colors = this.rainbow7Color();
        }
        var step = 60;
        var nowStep = 0;
        var qigongRangeIndex = [0];
        this.setAllBlockColor([0, 0, 0, 1]);
        var repeatCountList = [];
        var target = this.AllBlockColor;
        for (var index = 0; index < target.length; index++) {
            var element = target[index];
            var dis = this.distanceCalculation(StartPoint.center_Point[0], StartPoint.center_Point[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
            if (dis > 5 && dis <= this.minKeyWidth * 1.5) {
                repeatCountList.push({
                    color: colors[0],
                    recordIndex: index,
                    repeatTime: this.getRandom(5, 25),
                });
            }
        }
        for (var i_compare = 0; i_compare < this.imageMaxHeight / 2; i_compare += this.minKeyHeight) {
        }
        //console.log('repeatCountList', repeatCountList)
        this.repeater = setInterval(function () {
            _this.setAllBlockColor([0, 0, 0, 1]);
            var target = _this.AllBlockColor;
            for (var index = 0; index < qigongRangeIndex.length; index++) {
                var temp_colorData = JSON.parse(JSON.stringify(colors[_this.getRandom(0, colors.length - 1)]));
                for (var index_4 = 0; index_4 < 3; index_4++) {
                    temp_colorData[index_4] = temp_colorData[index_4] * _this.lightData.brightness / 100;
                }
                temp_colorData;
                target[_this.qigong_Step2_Range[qigongRangeIndex[index]]].color = temp_colorData;
            }
            for (var index = 0; index < qigongRangeIndex.length; index++) {
                if (qigongRangeIndex[index] < _this.qigong_Step2_Range.length - 1) {
                    qigongRangeIndex[index] += 1;
                }
                else {
                    qigongRangeIndex[index] = 0;
                }
            }
            repeatCount += 1;
            if (repeatCount > 27) {
                if (isRainbow) {
                    _this.mode_RippleGraff(colors, true, _this.centerBlockPoint);
                }
                else {
                    _this.mode_RippleGraff(colors, false, _this.centerBlockPoint);
                }
            }
        }, 50 * this.animationSpeed);
    };
    /**
     * 排列Array順序
     * @param array
     * @param key
     */
    M_Light_CS.prototype.ArraySort = function (array, key) {
        return array.sort(function (a, b) {
            var x = a[key];
            var y = b[key];
            x;
            return x - y;
        });
    };
    M_Light_CS.prototype.loopArrDisplacementAssignSpacing = function (directionSwitch, Arr, Spacing) {
        if (directionSwitch === void 0) { directionSwitch = 1; }
        if (Spacing === void 0) { Spacing = 1; }
        var handleArr = JSON.parse(JSON.stringify(Arr));
        if (directionSwitch == 2) {
            handleArr = (handleArr.splice(handleArr.length - Spacing, handleArr.length)).concat(handleArr);
        }
        else if (directionSwitch == 1) {
            handleArr = handleArr.concat(handleArr.splice(0, Spacing));
        }
        return handleArr;
    };
    M_Light_CS.prototype.mode_Surmount = function (colors, isRainbow, blockIndex) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        if (blockIndex === void 0) { blockIndex = 48; }
        console.log('%c mode_Surmount_enter', 'color:rgb(255,75,255,1)', colors, this.repeater);
        clearInterval(this.repeater);
        //colors = this.rainbow7Color();
        //this.rainbow7Color();
        //this.currentBlockIndex = 48;
        var repeatCount = 0;
        var StartPoint = this.getNowBlock(blockIndex).coordinateData;
        //var setRGB=[255,0,0,1];
        var mode_step = 0;
        var step = 30;
        var nowStep = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        this.repeater = setInterval(function () {
            //this.mode_reset();
            var target = _this.AllBlockColor;
            var setRGB;
            if (isRainbow) {
                setRGB = _this.rainbow7Color()[_this.getRandom(0, colors.length - 1)];
            }
            else {
                setRGB = colors[_this.getRandom(0, colors.length - 1)];
            }
            var compareResult = _this.minKeyWidth * repeatCount;
            var compareResultMax = _this.minKeyWidth * repeatCount - _this.minKeyWidth;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var dis = _this.distanceCalculation(StartPoint.center_Point[0], StartPoint.center_Point[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                //console.log('mode_step', mode_step)
                if (mode_step == 0) {
                    if (dis <= compareResult && dis >= compareResultMax) {
                        var temp_colorData = JSON.parse(JSON.stringify(setRGB));
                        for (var index2 = 0; index2 < 3; index2++) {
                            temp_colorData[index2] = temp_colorData[index2] * _this.lightData.brightness / 100;
                        }
                        element.color = temp_colorData;
                    }
                }
                else {
                    clearInterval(_this.repeater);
                }
            }
            if (nowStep + 1 < step) {
                nowStep += 1;
            }
            else {
                nowStep = 0;
                mode_step = 0;
                repeatCount = 0;
                clearInterval(_this.repeater);
                //console.log('nowStep_end', mode_step, repeatCount, nowStep)
                _this.setAllBlockColor([0, 0, 0, 1]);
            }
            if (_this.minKeyWidth * repeatCount < _this.imageMaxWidth) {
                repeatCount += 1;
                //console.log('repeatCount', repeatCount)
            }
            else {
                mode_step = 1;
                //this.setAllBlockColor([0,0,0,1]);
            }
        }, Math.pow(50, this.animationSpeed));
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.mode_HardCode = function (colors, InputArray) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (InputArray === void 0) { InputArray = [[]]; }
        console.log('%c mode_HardCode_enter', 'color:rgb(255,75,255,1)', colors, InputArray);
        clearInterval(this.repeater);
        var nowStep = 0;
        this.repeater = setInterval(function () {
            _this.setAllBlockColor([0, 0, 0, 1]);
            //InputArray = this.loopArrDisplacementAssignSpacing(2, InputArray, nowStep);
            var target = _this.AllBlockColor;
            try {
                for (var index = 0; index < InputArray[nowStep].length; index++) {
                    var rowArray = InputArray[nowStep];
                    for (var rowindex = 0; rowindex < rowArray.length; rowindex++) {
                        var element = rowArray[rowindex];
                        var setRGB = colors[_this.getRandom(0, colors.length - 1)];
                        var temp_colorData = JSON.parse(JSON.stringify(setRGB));
                        for (var index2 = 0; index2 < 3; index2++) {
                            temp_colorData[index2] = temp_colorData[index2] * _this.lightData.brightness / 100;
                        }
                        target[rowArray[rowindex]].color = temp_colorData;
                    }
                }
                if (nowStep < InputArray.length - 1) {
                    nowStep += 1;
                }
                else {
                    nowStep = 0;
                    // clearInterval(this.repeater);
                }
            }
            catch (error) {
                console.log('%c mode_HardCode_error', 'color:rgb(255,0,0,1)', nowStep, InputArray);
                clearInterval(_this.repeater);
            }
        }, 150 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_Retro_snake = function (colors, InputArray) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (InputArray === void 0) { InputArray = []; }
        console.log('%c mode_Retro_snake_enter', 'color:rgb(255,75,255,1)', colors, this.repeater);
        clearInterval(this.repeater);
        var nowStep = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        this.repeater = setInterval(function () {
            if (nowStep < InputArray.length) {
                nowStep += 1;
            }
            else {
                nowStep = 0;
            }
            //InputArray = this.loopArrDisplacementAssignSpacing(2, InputArray, nowStep);
            var target = _this.AllBlockColor;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                if (index == InputArray[nowStep]) {
                    var setRGB = colors[_this.getRandom(0, colors.length - 1)];
                    var temp_colorData = JSON.parse(JSON.stringify(setRGB));
                    for (var index2 = 0; index2 < 3; index2++) {
                        temp_colorData[index2] = temp_colorData[index2] * _this.lightData.brightness / 100;
                    }
                    element.color = temp_colorData;
                }
                else {
                    element.color = [0, 0, 0, 1];
                }
            }
        }, 70 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_RippleGraff = function (colors, isRainbow, blockIndex) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        if (blockIndex === void 0) { blockIndex = 48; }
        console.log('%c mode_RippleGraff', 'color:rgb(255,75,255,1)', colors, isRainbow);
        clearInterval(this.repeater);
        var repeatCount = 0;
        var StartPoint = this.getNowBlock(blockIndex).coordinateData;
        //var setRGB=[255,0,0,1];
        var mode_step = 0;
        var totalstep = 30;
        var nowStep = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        var r_totalstep = 30;
        var r_nowStep = 0;
        this.repeater = setInterval(function () {
            //this.mode_reset();
            var target = _this.AllBlockColor;
            var setRGB;
            if (isRainbow) {
                setRGB = _this.rainbow7Color()[_this.getRandom(0, _this.rainbow7Color().length - 1)];
            }
            else {
                setRGB = colors[_this.getRandom(0, colors.length - 1)];
            }
            var compareResult = _this.minKeyWidth * repeatCount;
            var compareResultMax = _this.minKeyWidth * repeatCount - _this.minKeyWidth;
            if (r_nowStep + 1 < r_totalstep) {
                r_nowStep += 1;
            }
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var dis = _this.distanceCalculation(StartPoint.center_Point[0], StartPoint.center_Point[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                if (mode_step == 0) {
                    //console.log('mode_step', mode_step)
                    //console.log('%c mode_RippleGraff_dis.compareResult','color:rgb(255,75,255,1)',dis,compareResult,compareResultMax);
                    if (dis <= compareResult && dis >= compareResultMax) {
                        var temp_colorData = JSON.parse(JSON.stringify(setRGB));
                        for (var index_5 = 0; index_5 < 3; index_5++) {
                            temp_colorData[index_5] = (temp_colorData[index_5] * (r_totalstep - r_nowStep) + 0 * r_nowStep) / r_totalstep;
                            temp_colorData[index_5] = temp_colorData[index_5] * _this.lightData.brightness / 100;
                        }
                        element.color = temp_colorData;
                    }
                }
                else {
                    var temp_colorData = JSON.parse(JSON.stringify(setRGB));
                    for (var index_6 = 0; index_6 < 3; index_6++) {
                        temp_colorData[index_6] = (temp_colorData[index_6] * (totalstep - nowStep) + 0 * nowStep) / totalstep;
                        temp_colorData[index_6] = temp_colorData[index_6] * _this.lightData.brightness / 100;
                    }
                    element.color = temp_colorData;
                    //console.log('element.color', T, step, nowStep)
                }
            }
            if (nowStep + 1 < totalstep) {
                nowStep += 1;
            }
            else {
                nowStep = 0;
                mode_step = 0;
                repeatCount = 0;
                clearInterval(_this.repeater);
                //console.log('nowStep_end', mode_step, repeatCount, nowStep)
                _this.setAllBlockColor([0, 0, 0, 1]);
                if (_this.lightData.PointEffectName == "Kamehemeha") {
                    _this.mode_Kamehemeha(colors, isRainbow);
                }
            }
            if (_this.minKeyWidth * repeatCount < _this.imageMaxWidth) {
                repeatCount += 1;
                //console.log('repeatCount', repeatCount)
            }
            else {
                mode_step = 1;
                //this.setAllBlockColor([0,0,0,1]);
            }
        }, Math.pow(50, this.animationSpeed));
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.mode_ConicRipple = function (colors, isRainbow, blockIndex) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        if (blockIndex === void 0) { blockIndex = 37; }
        console.log('%c mode_ConccRipple', 'color:rgb(255,75,255,1)', colors, isRainbow);
        clearInterval(this.repeater);
        var repeatCount = 0;
        var StartPoint = this.getNowBlock(blockIndex).coordinateData;
        console.log('%c StartPoint', 'color:rgb(255,75,255,1)', StartPoint);
        var mode_step = 0;
        var totalstep = 30;
        var nowStep = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        var r_totalstep = 30;
        var r_nowStep = 0;
        var setRGB;
        var zzzzzzz = [
            [255, 0, 0, 1],
            [255, 65, 0, 1],
            [255, 125, 0, 1],
            [255, 255, 0, 1],
            [125, 255, 0, 1],
            [65, 255, 0, 1],
            [0, 255, 0, 1],
            [0, 255, 65, 1],
            [0, 255, 125, 1],
            [0, 255, 255, 1],
            [0, 125, 255, 1],
            [0, 65, 255, 1],
            [0, 0, 255, 1],
            [65, 0, 255, 1],
            [125, 0, 255, 1],
            [255, 0, 255, 1],
            [255, 0, 125, 1],
            [255, 0, 65, 1],
            [255, 0, 0, 1],
            [255, 65, 0, 1],
            [255, 125, 0, 1],
            [255, 255, 0, 1],
            [125, 255, 0, 1],
            [65, 255, 0, 1],
            [0, 255, 0, 1],
            [0, 255, 65, 1],
            [0, 255, 125, 1],
            [0, 255, 255, 1],
            [0, 125, 255, 1],
            [0, 65, 255, 1],
            [0, 0, 255, 1],
            [65, 0, 255, 1],
            [125, 0, 255, 1],
            [255, 0, 255, 1],
            [255, 0, 125, 1],
            [255, 0, 65, 1],
        ];
        if (isRainbow) {
            setRGB = this.getGradientArr_RGB();
        }
        else {
            setRGB = colors[this.getRandom(0, colors.length - 1)];
        }
        var T_center_Point = StartPoint.center_Point;
        //[this.imageMaxWidth/2,this.imageMaxHeight/2]
        var diameter = this.imageMaxWidth - T_center_Point[0] + this.minKeyWidth; //StartPoint.center_Point[0]
        //var diameter=this.minKeyWidth*setRGB.length;//StartPoint.center_Point[0]
        //var diameter=this.imageMaxHeight-T_center_Point[1];//StartPoint.center_Point[0]
        var target = this.AllBlockColor;
        var direction = 0;
        var averagearr = [];
        for (var d_index = 0; d_index < setRGB.length; d_index++) {
            //average.push(diameter/setRGB.length);
            //var averageNow=Math.round(diameter/setRGB.length*d_index);
            var averagePrevious = diameter / setRGB.length * d_index;
            var averageNext = averagePrevious + (diameter / setRGB.length);
            var _loop_1 = function (index) {
                element = target[index];
                dis = this_1.distanceCalculation(T_center_Point[0], T_center_Point[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                if (mode_step == 0) {
                    //console.log('mode_step', mode_step)
                    //console.log('%c mode_RippleGraff_dis.compareResult','color:rgb(255,75,255,1)',dis,compareResult,compareResultMax);
                    if (dis >= averagePrevious && dis <= averageNext) {
                        if (averagearr.some(function (x) { return x.recordIndex == index; }) == false) {
                            averagearr.push({
                                color: setRGB[d_index],
                                colorIndex: d_index,
                                // nowStep:0,
                                // totalstep:30,
                                recordIndex: index,
                            });
                        }
                    }
                }
            };
            var this_1 = this, element, dis;
            for (var index = 0; index < target.length; index++) {
                _loop_1(index);
            }
        }
        console.log('%c mode_ConccRipple_averagearr', 'color:rgb(255,75,255,1)', averagearr);
        this.repeater = setInterval(function () {
            for (var index = 0; index < averagearr.length; index++) {
                var element_1 = averagearr[index];
                if (direction == 1) {
                    if (element_1.colorIndex < setRGB.length - 1) {
                        element_1.colorIndex += 1;
                    }
                    else {
                        element_1.colorIndex = 0;
                    }
                }
                else {
                    if (element_1.colorIndex > 0) {
                        element_1.colorIndex -= 1;
                    }
                    else {
                        element_1.colorIndex = setRGB.length - 1;
                    }
                }
                //     element.color=setRGB[Math.abs(element.colorIndex-(setRGB.length-1))];
                //    }
                //    else{
                //     element.color=setRGB[element.colorIndex];
                //    }
                var temp_colorData = JSON.parse(JSON.stringify(setRGB[element_1.colorIndex]));
                for (var index_7 = 0; index_7 < 3; index_7++) {
                    temp_colorData[index_7] = temp_colorData[index_7] * _this.lightData.brightness / 100;
                }
                target[element_1.recordIndex].color = temp_colorData;
            }
        }, 220 * this.animationSpeed);
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.mode_ConicRippleRainbow = function (colors, isRainbow, blockIndex) {
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        if (blockIndex === void 0) { blockIndex = 37; }
        console.log('%c mode_ConccRipple', 'color:rgb(255,75,255,1)', colors, isRainbow);
        clearInterval(this.repeater);
        var repeatCount = 0;
        var StartPoint = this.getNowBlock(blockIndex).coordinateData;
        var setRGB;
        var mode_step = 0;
        var totalstep = 30;
        var nowStep = 0;
        // for (let index = 0; index < array.length; index++) {
        //     const element = array[index];
        // }
        this.setAllBlockColor([0, 0, 0, 1]);
        var r_totalstep = 30;
        var r_nowStep = 0;
        if (isRainbow) {
            setRGB = this.rainbow7Color(); //this.rainbow7Color();
        }
        else {
            setRGB = colors[this.getRandom(0, colors.length - 1)];
        }
        var T_center_Point = StartPoint.center_Point;
        //[this.imageMaxWidth/2,this.imageMaxHeight/2]
        var diameter = this.imageMaxWidth - T_center_Point[0]; //StartPoint.center_Point[0]
        //var diameter=this.imageMaxHeight-T_center_Point[1];//StartPoint.center_Point[0]
        var target = this.AllBlockColor;
        //diameter/10;
        var direction = 0;
        //var average=[];
        var averagearr = [];
        for (var d_index = 0; d_index < 7; d_index++) {
            //average.push(diameter/setRGB.length);
            //var averageNow=Math.round(diameter/setRGB.length*d_index);
            var averagePrevious = diameter / 7 * d_index;
            var averageNext = averagePrevious + (diameter / 7);
            var _loop_2 = function (index) {
                element = target[index];
                dis = this_2.distanceCalculation(T_center_Point[0], T_center_Point[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                if (mode_step == 0) {
                    //console.log('mode_step', mode_step)
                    //console.log('%c mode_RippleGraff_dis.compareResult','color:rgb(255,75,255,1)',dis,compareResult,compareResultMax);
                    if (dis >= averagePrevious && dis <= averageNext) {
                        if (averagearr.some(function (x) { return x.recordIndex == index; }) == false) {
                            averagearr.push({
                                color: setRGB[d_index],
                                colorIndex: d_index,
                                nowStep: 0,
                                totalstep: 30,
                                recordIndex: index,
                            });
                        }
                    }
                }
            };
            var this_2 = this, element, dis;
            //var T_averageArr=[];
            for (var index = 0; index < target.length; index++) {
                _loop_2(index);
            }
        }
        console.log('%c mode_ConccRipple_averagearr', 'color:rgb(255,75,255,1)', averagearr);
        this.repeater = setInterval(function () {
            for (var index = 0; index < averagearr.length; index++) {
                var element_2 = averagearr[index];
                if (element_2.nowStep < 30) {
                    element_2.nowStep += 1;
                }
                else {
                    element_2.nowStep = 0;
                }
                if (direction == 1) {
                    if (element_2.colorIndex < setRGB.length - 1) {
                        element_2.colorIndex += 1;
                    }
                    else {
                        element_2.colorIndex = 0;
                    }
                }
                else {
                    if (element_2.colorIndex > 0) {
                        element_2.colorIndex -= 1;
                    }
                    else {
                        element_2.colorIndex = setRGB.length - 1;
                    }
                }
                //     element.color=setRGB[Math.abs(element.colorIndex-(setRGB.length-1))];
                //    }
                //    else{
                //     element.color=setRGB[element.colorIndex];
                //    }
                if (setRGB[element_2.colorIndex] == undefined) {
                    console.log('%c mode_ConccRipple_element.colorIndex]', 'color:rgb(255,75,255,1)', element_2.colorIndex);
                    return;
                }
                element_2.color = JSON.parse(JSON.stringify(setRGB[element_2.colorIndex]));
                target[element_2.recordIndex].color = JSON.parse(JSON.stringify(element_2.color));
            }
        }, 700 * this.animationSpeed);
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.mode_Conical_Diffusion = function () {
        console.log('%c mode_Conical_Diffusion', 'color:rgb(255,75,255,1)');
        clearInterval(this.repeater);
        var repeatCount = 0;
        // var StartPoint = this.getNowBlock(0).coordinateData;
        // console.log('%c StartPoint','color:rgb(255,75,255,1)',StartPoint);
        var mode_step = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        var setRGB = this.getGradientArr_RGB(3, 0);
        var T_center_Point = [0, this.imageMaxHeight / 2];
        var diameter = this.imageMaxWidth; //StartPoint.center_Point[0]
        var target = this.AllBlockColor;
        var direction = 0;
        var averagearr = [];
        for (var d_index = 0; d_index < setRGB.length; d_index++) {
            //average.push(diameter/setRGB.length);
            //var averageNow=Math.round(diameter/setRGB.length*d_index);
            var averagePrevious = diameter / setRGB.length * d_index;
            var averageNext = averagePrevious + (diameter / setRGB.length);
            var _loop_3 = function (index) {
                element = target[index];
                dis = this_3.distanceCalculation(T_center_Point[0], T_center_Point[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                if (mode_step == 0) {
                    //console.log('mode_step', mode_step)
                    //console.log('%c mode_RippleGraff_dis.compareResult','color:rgb(255,75,255,1)',dis,compareResult,compareResultMax);
                    if (dis >= averagePrevious && dis <= averageNext) {
                        if (averagearr.some(function (x) { return x.recordIndex == index; }) == false) {
                            averagearr.push({
                                color: setRGB[d_index],
                                colorIndex: d_index,
                                recordIndex: index,
                            });
                        }
                    }
                }
            };
            var this_3 = this, element, dis;
            for (var index = 0; index < target.length; index++) {
                _loop_3(index);
            }
        }
        console.log('%c mode_Conical_Diffusion_averagearr', 'color:rgb(255,75,255,1)', averagearr);
        for (var index = 0; index < averagearr.length; index++) {
            var element_3 = averagearr[index];
            var temp_colorData = JSON.parse(JSON.stringify(setRGB[element_3.colorIndex]));
            for (var index_8 = 0; index_8 < 3; index_8++) {
                temp_colorData[index_8] = temp_colorData[index_8] * this.lightData.brightness / 100;
            }
            target[element_3.recordIndex].color = temp_colorData;
        }
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.getGradientArr_RGB = function (g_totalStep, g_nowstep) {
        if (g_totalStep === void 0) { g_totalStep = 2; }
        if (g_nowstep === void 0) { g_nowstep = 0; }
        var gradientArr_RGB = [];
        var T_RGB = this.rainbow7Color();
        //var T_RGB=[[255,0,0,1],[0,255,0,1]];
        var T_nowColorIndex = 0;
        while (T_nowColorIndex < T_RGB.length - 1) {
            var T1Color = T_RGB[T_nowColorIndex];
            var T2Color = T_RGB[T_nowColorIndex + 1];
            var gradient_COLOR = [0, 0, 0, 1];
            for (var i_2 = 0; i_2 < 3; i_2++) {
                //console.log('%c getGradientArr_RGB','color:rgb(255,75,255,1)', T1Color[i_2],T2Color[i_2],gradient_COLOR,T1Color,T2Color);
                gradient_COLOR[i_2] = (T1Color[i_2] * (g_totalStep - g_nowstep) + T2Color[i_2] * g_nowstep) / g_totalStep;
            }
            gradientArr_RGB.push(gradient_COLOR);
            if (g_nowstep < g_totalStep) {
                g_nowstep += 1;
            }
            else {
                g_nowstep = 0;
                T_nowColorIndex += 1;
            }
        }
        console.log('%c getGradientArr_RGB', 'color:rgb(255,75,255,1)', gradientArr_RGB);
        return gradientArr_RGB;
    };
    M_Light_CS.prototype.mode_Blossom = function (colors, isRainbow, blockIndex) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        if (blockIndex === void 0) { blockIndex = 48; }
        //console.log('%c mode_RippleGraff_enter','color:rgb(255,75,255,1)',colors,this.AllBlockColor);
        clearInterval(this.repeater);
        //colors = this.rainbow7Color();
        //this.rainbow7Color();
        //this.currentBlockIndex = 48;
        var repeatCount = 0;
        var StartPoint = this.getNowBlock(blockIndex).coordinateData;
        //var setRGB=[255,0,0,1];
        var mode_step = 0;
        var step = 30;
        var nowStep = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        this.repeater = setInterval(function () {
            //this.mode_reset();
            var target = _this.AllBlockColor;
            var setRGB;
            if (isRainbow) {
                setRGB = _this.rainbow7Color()[_this.getRandom(0, colors.length - 1)];
            }
            else {
                setRGB = colors[_this.getRandom(0, colors.length - 1)];
            }
            var compareResult = _this.minKeyWidth * repeatCount;
            var compareResultMax = _this.minKeyWidth * repeatCount - _this.minKeyWidth;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var dis = _this.distanceCalculation(StartPoint.center_Point[0], StartPoint.center_Point[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                if (mode_step == 0) {
                    //console.log('mode_step', mode_step)
                    console.log('%c mode_Blossom', 'color:rgb(255,75,255,1)', dis, compareResult, compareResultMax);
                    if (dis <= compareResult && dis >= compareResultMax) {
                        var temp_colorData = JSON.parse(JSON.stringify(setRGB));
                        for (var index_9 = 0; index_9 < 3; index_9++) {
                            temp_colorData[index_9] = temp_colorData[index_9] * _this.lightData.brightness / 100;
                        }
                        element.color = temp_colorData;
                    }
                }
                else {
                    var temp_colorData = JSON.parse(JSON.stringify(element.color));
                    for (var index_10 = 0; index_10 < 3; index_10++) {
                        temp_colorData[index_10] = (temp_colorData[index_10] * (step - nowStep) + index_10 * nowStep) / step;
                        //temp_colorData[index] = temp_colorData[index] * this.lightData.brightness/100;
                    }
                    element.color = temp_colorData;
                    //console.log('element.color', temp_colorData, step, nowStep)
                }
            }
            if (nowStep + 1 < step) {
                nowStep += 1;
            }
            else {
                nowStep = 0;
                mode_step = 0;
                repeatCount = 0;
                clearInterval(_this.repeater);
                //console.log('nowStep_end', mode_step, repeatCount, nowStep)
                _this.setAllBlockColor([0, 0, 0, 1]);
            }
            if (_this.minKeyWidth * repeatCount < 100) {
                repeatCount += 1;
                //console.log('repeatCount', repeatCount)
            }
            else {
                mode_step = 1;
                //this.setAllBlockColor([0,0,0,1]);
            }
        }, 50 * this.animationSpeed);
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.mode_Cross = function (colors, isRainbow, blockIndex) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        if (blockIndex === void 0) { blockIndex = 48; }
        //console.log('%c mode_RippleGraff_enter','color:rgb(255,75,255,1)',colors,this.AllBlockColor);
        clearInterval(this.repeater);
        //colors = this.rainbow7Color();
        //this.rainbow7Color();
        //this.currentBlockIndex = 48;
        var repeatCount = 0;
        var StartPoint = this.getNowBlock(blockIndex).coordinateData;
        //var setRGB=[255,0,0,1];
        var mode_step = 0;
        var step = 30;
        var nowStep = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        var RangeList = [];
        for (var index = -StartPoint.center_Point[0]; index < this.imageMaxWidth; index += this.minKeyWidth / 2) {
            //var modStep=(target[index].coordinateData.center_Point[0]%this.imageMaxWidth)/this.imageMaxWidth;
            RangeList.push([index, StartPoint.center_Point[1]]);
        }
        for (var index = -StartPoint.center_Point[1]; index < this.imageMaxHeight; index += this.minKeyHeight) {
            //var modStep=(target[index].coordinateData.center_Point[0]%this.imageMaxWidth)/this.imageMaxWidth;
            RangeList.push([StartPoint.center_Point[0], index]);
            RangeList.push([StartPoint.center_Point[0] + this.minKeyWidth / 2, index]);
        }
        this.repeater = setInterval(function () {
            //this.mode_reset();
            var target = _this.AllBlockColor;
            var setRGB;
            if (isRainbow) {
                setRGB = _this.rainbow7Color()[_this.getRandom(0, colors.length - 1)];
            }
            else {
                setRGB = colors[_this.getRandom(0, colors.length - 1)];
            }
            var repeatCountList = [];
            var RanRange = [10, 100];
            var temp_point = [StartPoint[0] + 500];
            //var temp_target=JSON.parse(JSON.stringify(this.AllBlockColor));   
            console.log('RangeList', RangeList);
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var dis = _this.distanceCalculation(StartPoint.center_Point[0], StartPoint.center_Point[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                if (mode_step == 0) {
                    //console.log('%c mode_Cross','color:rgb(255,75,255,1)',dis);
                    for (var i2 = 0; i2 < RangeList.length; i2++) {
                        var T = RangeList[i2];
                        if (T[0] > element.coordinateData.top_Left[0] &&
                            T[0] < element.coordinateData.top_Right[0] &&
                            T[1] > element.coordinateData.top_Left[1] &&
                            T[1] < element.coordinateData.bottom_Left[1]) {
                            element.color = setRGB;
                            break;
                        }
                    }
                    var temp_colorData = JSON.parse(JSON.stringify(element.color));
                    for (var index_11 = 0; index_11 < 3; index_11++) {
                        temp_colorData[index_11] = (temp_colorData[index_11] * (step - nowStep) + index_11 * nowStep) / step;
                        temp_colorData[index_11] = temp_colorData[index_11] * _this.lightData.brightness / 100;
                    }
                    element.color = temp_colorData;
                }
                // else {
                //     var T = JSON.parse(JSON.stringify(element.color));
                //     T[0] = (T[0] * (step - nowStep) + 0 * nowStep) / step;
                //     T[1] = (T[1] * (step - nowStep) + 0 * nowStep) / step;
                //     T[2] = (T[2] * (step - nowStep) + 0 * nowStep) / step;
                //     element.color = T;
                //     //console.log('element.color', T, step, nowStep)
                // }
            }
            if (nowStep + 1 < step) {
                nowStep += 1;
            }
            else {
                nowStep = 0;
                mode_step = 0;
                clearInterval(_this.repeater);
                //console.log('nowStep_end', mode_step, repeatCount, nowStep)
                //this.setAllBlockColor([0, 0, 0, 1]);
            }
        }, 50 * this.animationSpeed);
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.mode_Breathing = function (colors, isRainbow) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        clearInterval(this.repeater);
        var repeatCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        var mode_step = 0;
        var step = 60;
        var nowStep = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        var repeatCountList = [];
        var target = this.AllBlockColor;
        var setRGB;
        var repeatCircleCount = 0;
        console.log('%c mode_Breathing', 'color:rgb(255,75,255,1)', this.imageMaxWidth);
        for (var i_compare = 0; i_compare < this.imageMaxWidth; i_compare += this.minKeyWidth) {
            //const element = array[index];
            if (isRainbow) {
                setRGB = this.rainbow7Color()[this.getRandom(0, this.rainbow7Color().length - 1)];
            }
            else {
                setRGB = colors[0];
            }
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var dis = this.distanceCalculation(StartPoint.center_Point[0], StartPoint.center_Point[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                if (dis <= i_compare && dis >= i_compare - this.minKeyWidth) {
                    //element.color = setRGB;
                    repeatCountList.push({
                        color: setRGB,
                        recordIndex: index,
                        repeatTime: this.getRandom(5, 25),
                    });
                }
            }
        }
        console.log('repeatCountList', repeatCountList);
        this.repeater = setInterval(function () {
            //this.mode_reset();
            var t_Count = repeatCount % 2;
            var t_Count2 = 0;
            if (t_Count == 0) {
                t_Count2 = 1;
            }
            else {
                t_Count2 = 0;
            }
            for (var index = 0; index < repeatCountList.length; index++) {
                var nowColor = [JSON.parse(JSON.stringify(repeatCountList[index].color)), [0, 0, 0, 1]];
                var temp_colorData = [0, 0, 0, 1];
                for (var index2 = 0; index2 < 3; index2++) {
                    temp_colorData[index2] = (nowColor[t_Count][index2] * (step - nowStep) + nowColor[t_Count2][index2] * nowStep) / step;
                    temp_colorData[index2] = temp_colorData[index2] * _this.lightData.brightness / 100;
                }
                var target = _this.AllBlockColor;
                target[repeatCountList[index].recordIndex].color = temp_colorData;
                //console.log('element.color', t_data, step, nowStep)
            }
            if (nowStep < step - 1) {
                nowStep += 1;
            }
            else {
                nowStep = 0;
                repeatCount += 1;
                //repeatCount=0;            
            }
        }, 50 * this.animationSpeed);
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.mode_BreathingMulticolor = function (colors, isRainbow) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        clearInterval(this.repeater);
        var repeatCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        var totalstep = 60;
        var nowStep = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        var repeatCountList = [];
        var target = this.AllBlockColor;
        var setRGB;
        var repeatCircleCount = 0;
        //var RGBObj=this.rainbow7Color()
        var RGBObj = [[255, 0, 0, 1], [255, 0, 0, 1], [0, 255, 0, 1], [0, 0, 255, 1], [0, 0, 255, 1]];
        //[this.getRandom(0, this.rainbow7Color().length - 1)];
        var Rainbow_totalstep = 60;
        var Rainbow_step = 0;
        var Rainbow_i = 0;
        console.log('%c mode_BreathingMulticolor', 'color:rgb(255,75,255,1)', this.imageMaxWidth);
        for (var i_compare = 0; i_compare < this.imageMaxWidth; i_compare += this.imageMaxWidth / 60 / 5) {
            //const element = array[index];
            if (Rainbow_step < Rainbow_totalstep) {
                Rainbow_step += 1;
            }
            else {
                Rainbow_step = 0;
                if (Rainbow_i < RGBObj.length - 2) {
                    Rainbow_i += 1;
                }
                else {
                    Rainbow_i = 0;
                }
            }
            if (isRainbow) {
                var t_data = [0, 0, 0, 1];
                if (RGBObj[Rainbow_i] == undefined) {
                    console.log('%c RGBObjError', 'color:rgb(255,75,255,1)', RGBObj, Rainbow_i);
                    return;
                }
                else {
                    console.log('%c RGBObj', 'color:rgb(255,75,255,1)', Rainbow_i);
                }
                var temp_colorData = [0, 0, 0, 1];
                for (var index2 = 0; index2 < 3; index2++) {
                    temp_colorData[index2] = (RGBObj[Rainbow_i][index2] * (Rainbow_totalstep - Rainbow_step) + RGBObj[Rainbow_i + 1][index2] * Rainbow_step) / Rainbow_totalstep;
                    temp_colorData[index2] = temp_colorData[index2] * this.lightData.brightness / 100;
                }
                //setRGB = this.rainbow7Color()[this.getRandom(0, this.rainbow7Color().length - 1)];
                console.log('%c RGBObj_t_data', 'color:rgb(255,75,255,1)', temp_colorData);
                setRGB = temp_colorData;
            }
            else {
                setRGB = colors[0];
            }
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var dis = this.distanceCalculation(0, this.imageMaxHeight / 2, element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                if (dis <= i_compare && dis >= i_compare - this.minKeyWidth) {
                    //element.color = setRGB;
                    repeatCountList.push({
                        color: setRGB,
                        recordIndex: index,
                    });
                }
            }
        }
        console.log('repeatCountList', repeatCountList);
        this.repeater = setInterval(function () {
            //this.mode_reset();
            var t_Count = repeatCount % 2;
            var t_Count2 = 0;
            if (t_Count == 0) {
                t_Count2 = 1;
            }
            else {
                t_Count2 = 0;
            }
            for (var index = 0; index < repeatCountList.length; index++) {
                var nowColor = [JSON.parse(JSON.stringify(repeatCountList[index].color)), [0, 0, 0, 1]];
                var temp_colorData = [0, 0, 0, 1];
                for (var index2 = 0; index2 < 3; index2++) {
                    temp_colorData[index2] = (nowColor[t_Count][index2] * (totalstep - nowStep) + nowColor[t_Count2][index2] * nowStep) / totalstep;
                    temp_colorData[index2] = temp_colorData[index2] * _this.lightData.brightness / 100;
                }
                var target = _this.AllBlockColor;
                target[repeatCountList[index].recordIndex].color = temp_colorData;
                //console.log('element.color', t_data, step, nowStep)
            }
            if (nowStep < totalstep - 1) {
                nowStep += 1;
            }
            else {
                nowStep = 0;
                repeatCount += 1;
                //repeatCount=0;            
            }
        }, 50 * this.animationSpeed);
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.mode_CycleBreath = function (colors, isRainbow) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        clearInterval(this.repeater);
        var repeatCount = 0;
        var mode_step = 0;
        var totalstep = 60;
        var nowStep = 0;
        if (isRainbow) {
            colors = this.rainbow7Color();
        }
        else {
            //colors=[[0, 0, 255, 1],[255, 0, 0, 1]];
        }
        var nowC_index = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        var repeatCountList = [];
        var target = this.AllBlockColor;
        var setRGB;
        var repeatCircleCount = 0;
        console.log('%c mode_Breathing', 'color:rgb(255,75,255,1)', colors, isRainbow);
        //setRGB = this.rainbow7Color()[this.getRandom(0, this.rainbow7Color().length - 1)];  
        for (var index = 0; index < target.length; index++) {
            //var element = target[index];
            repeatCountList.push({
                color: [0, 0, 0, 1],
                recordIndex: index,
                repeatTime: this.getRandom(5, 25),
            });
        }
        console.log('repeatCountList', repeatCountList);
        this.repeater = setInterval(function () {
            //this.mode_reset();
            var t_Count = repeatCount % 2;
            var t_Count2 = 0;
            if (t_Count == 0) {
                t_Count2 = 1;
            }
            else {
                t_Count2 = 0;
            }
            var T_colors = JSON.parse(JSON.stringify(colors[nowC_index]));
            //console.log('T_colors', T_colors)
            for (var index = 0; index < repeatCountList.length; index++) {
                var nowColor = [[0, 0, 0, 1], T_colors];
                var temp_colorData = [0, 0, 0, 1];
                for (var index2 = 0; index2 < 3; index2++) {
                    temp_colorData[index2] = (nowColor[t_Count][index2] * (totalstep - nowStep) + nowColor[t_Count2][index2] * nowStep) / totalstep;
                    temp_colorData[index2] = temp_colorData[index2] * _this.lightData.brightness / 100;
                }
                var target = _this.AllBlockColor;
                target[repeatCountList[index].recordIndex].color = JSON.parse(JSON.stringify(temp_colorData));
                //console.log('element.color', t_data, nowStep, totalstep)
            }
            if (nowStep < totalstep - 1) {
                nowStep += 1;
            }
            else {
                nowStep = 0;
                repeatCount += 1;
                var t_Count3 = repeatCount % 2;
                console.log('t_Count', t_Count3);
                if (t_Count3 == 0) {
                    if (nowC_index < colors.length - 1) {
                        nowC_index += 1;
                    }
                    else {
                        nowC_index = 0;
                    }
                }
                //repeatCount=0;            
            }
        }, 50 * this.animationSpeed);
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.mode_LEDOFF = function () {
        clearInterval(this.repeater);
        this.setAllBlockColor([0, 0, 0, 1]);
    };
    M_Light_CS.prototype.mode_TrainMove = function (colors, isRainbow, bandwidth) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        if (bandwidth === void 0) { bandwidth = 200; }
        //this.addBlockIndex();
        clearInterval(this.repeater);
        this.currentBlockIndex = 30;
        var repeatMin = 5;
        var repeatMax = 200;
        var repeatCount = 0;
        this.repeater = setInterval(function () {
            //var StartPoint = this.getNowBlock().coordinateData;
            var target = _this.AllBlockColor;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var compareResult = (repeatCount * 180);
                repeatMax = compareResult + bandwidth;
                if (compareResult > element.coordinateData.top_Left[0] && repeatMax < element.coordinateData.top_Right[0]) {
                    var temp_colorData = JSON.parse(JSON.stringify(colors[0]));
                    for (var index_12 = 0; index_12 < 3; index_12++) {
                        temp_colorData[index_12] = temp_colorData[index_12] * _this.lightData.brightness / 100;
                    }
                    element.color = temp_colorData;
                }
                else if (compareResult < element.coordinateData.top_Left[0] && repeatMax > element.coordinateData.top_Left[0]) {
                    var temp_colorData = JSON.parse(JSON.stringify(colors[0]));
                    for (var index_13 = 0; index_13 < 3; index_13++) {
                        temp_colorData[index_13] = temp_colorData[index_13] * _this.lightData.brightness / 100;
                    }
                    element.color = temp_colorData;
                }
                else {
                    element.color = [0, 0, 0, 1];
                }
            }
            if (repeatCount < 15 && repeatMax < _this.imageMaxWidth) {
                repeatCount += 1;
            }
            else {
                repeatCount = 0;
            }
        }, 500 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_SlopeRight = function (colors, isRainbow, bandwidth) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        if (bandwidth === void 0) { bandwidth = 200; }
        //this.addBlockIndex();
        clearInterval(this.repeater);
        this.currentBlockIndex = 30;
        var repeatMin = 5;
        var repeatMax = 200;
        var repeatCount = 0;
        var StartPoint = this.getNowBlock().coordinateData;
        //var SlopeEquation=this.SlopeEquation([0,0],[834,372]);//StartPoint.clientWidth
        var startX = -StartPoint.clientWidth * 5;
        this.repeater = setInterval(function () {
            var SlopeEquation = _this.slopeEquation([0 + startX, _this.imageMaxWidth / _this.minKeyWidth], [startX + StartPoint.clientWidth * 5, _this.imageMaxHeight]);
            console.log('SlopeEquation', SlopeEquation);
            _this.mode_reset();
            var target = _this.AllBlockColor;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                for (var i2 = 0; i2 < SlopeEquation.length; i2++) {
                    var T = SlopeEquation[i2];
                    //console.log('SlopeEquation[index]', i2, T, element.coordinateData.top_Left);
                    if (T[0] > element.coordinateData.top_Left[0] &&
                        T[0] < element.coordinateData.top_Right[0] &&
                        T[1] > element.coordinateData.top_Left[1] &&
                        T[1] < element.coordinateData.bottom_Left[1]) {
                        var temp_colorData = JSON.parse(JSON.stringify(colors[0]));
                        for (var index_14 = 0; index_14 < 3; index_14++) {
                            temp_colorData[index_14] = temp_colorData[index_14] * _this.lightData.brightness / 100;
                        }
                        element.color = temp_colorData;
                        continue;
                    }
                }
            }
            if (startX < _this.imageMaxWidth) {
                startX += 22;
            }
            else {
                startX = -StartPoint.clientWidth * 5;
                _this.mode_reset();
            }
        }, 25 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_WaveSync = function (colors, isRainbow, bandwidth, BaseSpeed) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        if (bandwidth === void 0) { bandwidth = 20; }
        if (BaseSpeed === void 0) { BaseSpeed = 140; }
        console.log('%c mode_WaveSync_enter', 'color:rgb(255,75,255,1)', colors, this.repeater);
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        if (isRainbow) {
            //colors =this.rainbow7Color();
            colors = [[255, 0, 0, 1], [255, 165, 0, 1], [255, 255, 0, 1], [0, 255, 0, 1], [0, 127, 255, 1], [0, 0, 255, 1], [139, 0, 255, 1]];
            //colors= colors.concat(colors);
        }
        else {
            var maxPercent = 55;
            var currentPercent = 55;
            var tempColorArray = [];
            var inputColor_T = colors[0];
            //console.log('%c inputColor_T','color:rgb(255,75,255,1)',inputColor_T);
            while (currentPercent > 25) {
                currentPercent -= 5;
                var tempColor = [0, 0, 0, 1];
                tempColor[0] = inputColor_T[0] * currentPercent / maxPercent;
                tempColor[1] = inputColor_T[1] * currentPercent / maxPercent;
                tempColor[2] = inputColor_T[2] * currentPercent / maxPercent;
                //console.log('%c currentPercent>0','color:rgb(255,75,255,1)',tempColor);
                tempColorArray.push(tempColor);
            }
            colors = tempColorArray;
            //console.log('%c tempColorArray','color:rgb(255,75,255,1)',tempColorArray);
        }
        //console.log('%c colors','color:rgb(255,75,255,1)',colors);
        var setRGB = colors[this.getRandom(0, colors.length - 1)];
        var spacing = -5;
        var nowColor = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        var angle = 40;
        var theta = Math.PI * angle / 180; //弧度
        var dx = Math.cos(theta);
        var dy = -Math.sin(theta);
        if (Math.abs(dx) < 1e-5)
            dx = 0;
        if (Math.abs(dy) < 1e-5)
            dy = 0;
        var position = 0;
        var color_number = colors.length;
        var target = this.AllBlockColor;
        var handleAllList = [];
        position += 5;
        //console.log('%c getColor','color:rgb(255,75,255,1)',result,this.use_scales,loop,this.colors,scales);
        this.repeater = setInterval(function () {
            //position+=5;
            position += 50;
            position %= bandwidth * color_number;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                //var y=sinx + cosx;
                //var y=sinx + cosx;
                var OffsetValue = element.coordinateData.center_Point[0] * dx + element.coordinateData.center_Point[1] * dy; //x*cos+y*sin=P(x,y)theta
                var scale = (OffsetValue - position) / bandwidth / color_number;
                var defaultscales = [
                    0, 0.2, 0.4, 0.6, 0.8
                ];
                //console.log('%c dy','color:rgb(255,75,255,1)',dx,dy);
                // console.log('%c OffsetValue','color:rgb(255,75,255,1)',OffsetValue);
                // console.log('%c scale','color:rgb(255,75,255,1)',String(scale));
                // console.log('%c position','color:rgb(255,75,255,1)',position);
                // console.log('%c bandwidth','color:rgb(255,75,255,1)',bandwidth);
                var scales = defaultscales.slice(0);
                scale -= Math.floor(scale); // [0, 1)                
                var lower_index = -1;
                var lower_scale = 0;
                var upper_index = colors.length;
                var upper_scale = 1;
                for (var i = 0; i < color_number; ++i) {
                    if (scales[i] <= scale) {
                        if (scales[i] >= lower_scale)
                            //console.log('%c lower_index','color:rgb(255,75,255,1)',lower_index);
                            lower_scale = scales[lower_index = i];
                        //console.log('%c lower_index','color:rgb(255,75,255,1)',lower_index);
                    }
                    else {
                        if (scales[i] < upper_scale)
                            upper_scale = scales[upper_index = i];
                    }
                }
                //console.log('%c lower_scale','color:rgb(255,75,255,1)',upper_scale);
                //console.log('%c upper_scale','color:rgb(255,75,255,1)',upper_scale);
                // colors[lower_index];
                //element.color = JSON.parse(JSON.stringify(colors[nowColor]));
                var temp_colorData = JSON.parse(JSON.stringify(colors[lower_index]));
                for (var index_15 = 0; index_15 < 3; index_15++) {
                    temp_colorData[index_15] = temp_colorData[index_15] * _this.lightData.brightness / 100;
                }
                element.color = temp_colorData;
            }
        }, BaseSpeed * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_Spiral = function (colors, isRainbow, direction) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        if (direction === void 0) { direction = 0; }
        console.log('%c mode_Spiral', 'color:rgb(255,75,255,1)', colors, this.repeater);
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        if (isRainbow) {
            //colors =this.rainbow7Color();
            colors = [[255, 0, 0, 1], [255, 165, 0, 1], [255, 255, 0, 1], [0, 255, 0, 1], [0, 127, 255, 1], [0, 0, 255, 1], [139, 0, 255, 1]];
            //colors= colors.concat(colors);
        }
        else {
            var maxPercent = 55;
            var currentPercent = 55;
            var tempColorArray = [];
            var inputColor_T = colors[0];
            console.log('%c inputColor_T', 'color:rgb(255,75,255,1)', inputColor_T);
            while (currentPercent > 25) {
                currentPercent -= 5;
                var tempColor = [0, 0, 0, 1];
                tempColor[0] = inputColor_T[0] * currentPercent / maxPercent;
                tempColor[1] = inputColor_T[1] * currentPercent / maxPercent;
                tempColor[2] = inputColor_T[2] * currentPercent / maxPercent;
                console.log('%c currentPercent>0', 'color:rgb(255,75,255,1)', tempColor);
                tempColorArray.push(tempColor);
            }
            colors = tempColorArray;
            console.log('%c tempColorArray', 'color:rgb(255,75,255,1)', tempColorArray);
        }
        //console.log('%c colors','color:rgb(255,75,255,1)',colors);
        var setRGB = colors[this.getRandom(0, colors.length - 1)];
        var spacing = -5;
        var nowColor = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        var angle = 0;
        var theta = Math.PI * 30 / 180; //弧度
        var dx = Math.cos(theta);
        var dy = -Math.sin(theta);
        if (Math.abs(dx) < 1e-5)
            dx = 0;
        if (Math.abs(dy) < 1e-5)
            dy = 0;
        var position = 0;
        var color_number = colors.length;
        var bandwidth = 20;
        var target = this.AllBlockColor;
        position += 5;
        this.repeater = setInterval(function () {
            if (direction == 1) {
                angle += 10 * 1; //-1 反向
            }
            else {
                angle += 10 * -1; //-1 反向
            }
            var bandangle = 360 / (colors.length);
            var dis_angle = angle % 360;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                //var y=sinx + cosx;
                //var OffsetValue = element.coordinateData.center_Point[0] * dx + element.coordinateData.center_Point[1] * dy;  //x*cos+y*sin=P(x,y)theta
                var center_Point = [_this.imageMaxWidth / 2, _this.imageMaxHeight / 2];
                var PointRotation = _this.PointRotation(center_Point, element.coordinateData.center_Point);
                if (PointRotation < 0) {
                    PointRotation += 360;
                }
                var remainder;
                var scale = (PointRotation - angle) / bandangle / colors.length; // / colors.length
                var defaultscales = [
                    0, 0.5, 0.1, 0.3, 0.5, 0.7, 0.9
                ];
                // var defaultscales = [
                // ];
                // var addvalue=0;
                // for (let index = 0; index < colors.length; index++) {
                //     addvalue+=1/colors.length;
                //     defaultscales.push(addvalue);    
                // }
                ///(360/colors.length);
                remainder = Math.floor(remainder);
                scale -= Math.floor(scale); // [0, 1)
                var data = {
                    PointRotation: PointRotation,
                    remainder: scale,
                    dis_angle: dis_angle,
                    part: bandangle,
                };
                //console.log('%c mode_Spiral','color:rgb(255,75,255,1)',data);
                var scales = defaultscales.slice(0);
                var lower_index = -1;
                var lower_scale = 0;
                var upper_index = colors.length;
                var upper_scale = 1;
                for (var i = 0; i < color_number; ++i) {
                    if (scales[i] <= scale) {
                        if (scales[i] >= lower_scale)
                            //console.log('%c lower_index','color:rgb(255,75,255,1)',lower_index);
                            lower_scale = scales[lower_index = i];
                        //console.log('%c lower_index','color:rgb(255,75,255,1)',lower_index);
                    }
                    else {
                        if (scales[i] < upper_scale)
                            upper_scale = scales[upper_index = i];
                    }
                }
                var temp_colorData = JSON.parse(JSON.stringify(colors[lower_index]));
                for (var index_16 = 0; index_16 < 3; index_16++) {
                    temp_colorData[index_16] = temp_colorData[index_16] * _this.lightData.brightness / 100;
                }
                element.color = temp_colorData;
            }
        }, 100);
    };
    M_Light_CS.prototype.mode_WaveSyncBack2 = function (colors, isRainbow) {
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        console.log('%c mode_WaveSyncBack2', 'color:rgb(255,75,255,1)', colors, this.repeater);
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        if (isRainbow) {
            //colors =this.rainbow7Color();
            colors = [[255, 0, 0, 1], [255, 165, 0, 1], [255, 255, 0, 1], [0, 255, 0, 1], [0, 127, 255, 1], [0, 0, 255, 1], [139, 0, 255, 1]];
        }
        var setRGB = colors[this.getRandom(0, colors.length - 1)];
        var spacing = -5;
        var nowColor = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        var horizontalList = [];
        var coordinateAllList = [];
        var AverageArea = 10;
        var PartW = this.imageMaxWidth;
        var PartH = this.imageMaxHeight;
        // if (T.coordinate[0] > element.coordinateData.top_Left[0] &&
        //     T.coordinate[0] < element.coordinateData.top_Right[0] &&
        //     T.coordinate[1] > element.coordinateData.top_Left[1] &&
        //     T.coordinate[1] < element.coordinateData.bottom_Left[1] 
        //     && (handleAllList.find((x) => x == index) == undefined)
        // ) 
        var Parallelogram_point = [];
        // ctx.lineTo(25, 0);
        // ctx.lineTo(35, 10);
        // ctx.lineTo(10, 10);
        // ctx.lineTo(0, 0);
        var nowAddDis = 0;
        while (nowAddDis < 500) {
            nowAddDis += this.minKeyWidth;
            Parallelogram_point.push({
                "top_Left": [-this.minKeyWidth * 3 + nowAddDis, 0],
                "top_Right": [-this.minKeyWidth * 3 + 25 + nowAddDis, 0],
                "bottom_Left": [this.minKeyWidth + nowAddDis, PartH],
                "bottom_Right": [this.minKeyWidth + 25 + nowAddDis, PartH],
            });
        }
        console.log('Parallelogram_point', Parallelogram_point);
        // for (let index = AverageArea; index > 1; index--) {
        //     //const element = array[index];
        // }
        var target = this.AllBlockColor;
        var handleAllList = [];
        for (var i2 = 0; i2 < Parallelogram_point.length; i2++) {
            var P_Target = Parallelogram_point[i2];
            //var P_Target = Parallelogram_point[0];
            var angleLeft = this.PointRotation(P_Target.top_Left, P_Target.bottom_Left);
            var angleRight = this.PointRotation(P_Target.top_Right, P_Target.bottom_Right);
            console.log('angleLeft', angleLeft);
            console.log('angleRight', angleRight);
            if (nowColor < colors.length - 1) {
                nowColor += 1;
            }
            else {
                nowColor = 0;
            }
            var _loop_4 = function (index) {
                element = target[index];
                t_angleLeft = this_4.PointRotation(P_Target.top_Left, element.coordinateData.top_Left);
                t_angleRight = this_4.PointRotation(P_Target.top_Right, element.coordinateData.top_Left);
                if (t_angleRight > angleRight && t_angleLeft < angleLeft
                    && (handleAllList.find(function (x) { return x == index; }) == undefined)) {
                    console.log('t_angleLeft', t_angleLeft, index);
                    console.log('t_angleRight', t_angleRight, index);
                    handleAllList.push(index);
                    element.color = JSON.parse(JSON.stringify(colors[nowColor]));
                }
                //handleAllList.push(index);
                //isCheck=true;
                //ItemList.push(index);   
            };
            var this_4 = this, element, t_angleLeft, t_angleRight;
            for (var index = 0; index < target.length; index++) {
                _loop_4(index);
            }
        }
        var AllItemList = [];
        //AllItemList.push(ItemList);
        console.log('handleAllList', handleAllList);
        //console.log('AllItemList', AllItemList);       
        this.repeater = setInterval(function () {
        }, 100);
    };
    M_Light_CS.prototype.mode_KeepRaining = function (colors, isRainbow, bandwidth, BaseSpeed) {
        var _this = this;
        if (colors === void 0) { colors = [[0, 0, 255, 1]]; }
        if (isRainbow === void 0) { isRainbow = false; }
        if (bandwidth === void 0) { bandwidth = 20; }
        if (BaseSpeed === void 0) { BaseSpeed = 140; }
        console.log('%c mode_KeepRaining', 'color:rgb(255,75,255,1)', colors, this.repeater);
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        console.log('%c mode_Starlight', 'color:rgb(255,75,255,1)', colors);
        //colors=[[255,0,0,1]];
        var translatecolors = [];
        if (isRainbow) {
            translatecolors = this.rainbow7Color();
        }
        else {
            translatecolors = colors;
        }
        var totalStep = 5;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        var target = this.AllBlockColor;
        this.setAllBlockColor([0, 0, 0, 1]);
        var repeatCountList = [];
        var RanRange = [1, 200];
        var coordinateAllList = [];
        //RotationMatrixValue: xpos + space+ypos,
        //x' = cos(θ) * x - sin(θ) * y
        //y' = sin(θ) * x + cos(θ) * y
        //var temp_target=JSON.parse(JSON.stringify(this.AllBlockColor));
        for (var xpos = -this.minKeyWidth * 5; xpos < this.imageMaxWidth; xpos += this.imageMaxWidth / 7) {
            var space = 0;
            for (var ypos = -this.minKeyHeight; ypos < this.imageMaxHeight - 50; ypos += this.imageMaxHeight / 8) {
                //space += this.minKeyWidth/2;
                space += 5;
                coordinateAllList.push({
                    coordinate: [xpos + space, ypos],
                    backupPos: [xpos + space, ypos],
                    RotationMatrixValue: xpos + space + ypos,
                    isCheck: false,
                });
            }
        }
        for (var index = 0; index < target.length; index++) {
            //var modStep = (target[index].coordinateData.center_Point[0] % this.imageMaxWidth) / this.imageMaxWidth;
            var ran = this.getRandom(0, translatecolors.length - 1);
            console.log('ran', ran);
            repeatCountList.push({
                nowColor: [0, 0, 0, 1],
                nextColor: translatecolors[ran],
                recordIndex: index,
                nowStep: 10,
                totalStep: 10,
                repeatCount: 0,
                repeatTime: this.getRandom(RanRange[0], RanRange[1]),
                switchOn: false,
            });
            //target[index].color=repeatCountList[index].color;
        }
        var MoveCenter = [0, 0];
        this.repeater = setInterval(function () {
            _this.setAllBlockColor([0, 0, 0, 1]);
            var nowAddx = 0;
            // if(MoveCenter[0]<this.imageMaxWidth){
            //     MoveCenter[0]+=50;
            //     MoveCenter[1]+=50;
            // }
            // else{
            //     MoveCenter[0]=0;
            //     MoveCenter[1]=0;
            // }
            for (var c2 = 0; c2 < coordinateAllList.length; c2++) {
                var T_CA = coordinateAllList[c2];
                //T_CA.coordinate[0]+=this.getRandom(25, 75);
                if (T_CA.coordinate[1] < _this.imageMaxHeight) {
                    nowAddx = 50;
                    //T_CA.coordinate[0]+=this.getRandom(25, 75);
                    T_CA.coordinate[0] += _this.minKeyHeight;
                    T_CA.coordinate[1] += _this.minKeyHeight;
                }
                else {
                    //T_CA.coordinate[0]=this.getRandom(0, 20);
                    T_CA.coordinate[0] = T_CA.backupPos[0];
                    T_CA.coordinate[1] = -_this.minKeyHeight;
                }
            }
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var temp_block = repeatCountList[index];
                var RotationMatrixValue = MoveCenter[0] + MoveCenter[1];
                var RotationMatrixValue2 = element.coordinateData.top_Left[0] + element.coordinateData.top_Left[1];
                for (var c2 = 0; c2 < coordinateAllList.length; c2++) {
                    var T_CA = coordinateAllList[c2];
                    if (T_CA.coordinate[0] > element.coordinateData.top_Left[0] &&
                        T_CA.coordinate[0] < element.coordinateData.top_Right[0] &&
                        T_CA.coordinate[1] > element.coordinateData.top_Left[1] &&
                        T_CA.coordinate[1] < element.coordinateData.bottom_Left[1]) {
                        var colorData = [0, 0, 0, 1];
                        colorData[0] = (temp_block.nowColor[0] * (temp_block.totalStep - temp_block.nowStep) + temp_block.nextColor[0] * temp_block.nowStep) / temp_block.totalStep;
                        colorData[1] = (temp_block.nowColor[1] * (temp_block.totalStep - temp_block.nowStep) + temp_block.nextColor[1] * temp_block.nowStep) / temp_block.totalStep;
                        colorData[2] = (temp_block.nowColor[2] * (temp_block.totalStep - temp_block.nowStep) + temp_block.nextColor[2] * temp_block.nowStep) / temp_block.totalStep;
                        element.color = JSON.parse(JSON.stringify(colorData));
                    }
                    // var dis = this.distanceCalculation(T_CA.coordinate[0], T_CA.coordinate[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                    // if (dis < 25&&element.coordinateData.center_Point[0]>T_CA.coordinate[0]) {
                    //     //if (Math.abs(RotationMatrixValue2-RotationMatrixValue) < 10) {
                    //     console.log('%c RotationMatrixValue', 'color:rgb(255,75,255,1)', RotationMatrixValue, RotationMatrixValue2);
                    //     // if (temp_block.nowStep < temp_block.totalStep) {
                    //     //     temp_block.nowStep += 1;
                    //     // }
                    //     // else {
                    //     //     //temp_block.nowStep = 0;
                    //     //     temp_block.repeatCount += 1;
                    //     //     // var T_Now = JSON.parse(JSON.stringify(temp_block.nowColor));
                    //     //     // var T_Next = JSON.parse(JSON.stringify(temp_block.nextColor));
                    //     //     // temp_block.nextColor = T_Now;
                    //     //     // temp_block.nowColor = T_Next;
                    //     //     temp_block.switchOn = false;
                    //     //     // if(temp_block.repeatCount>=1){
                    //     //     //     temp_block.repeatCount=0;
                    //     //     //     temp_block.switchOn=false;
                    //     //     // }
                    //     // }
                    //     var colorData = [0, 0, 0, 1]
                    //     colorData[0] = (temp_block.nowColor[0] * (temp_block.totalStep - temp_block.nowStep) + temp_block.nextColor[0] * temp_block.nowStep) / temp_block.totalStep;
                    //     colorData[1] = (temp_block.nowColor[1] * (temp_block.totalStep - temp_block.nowStep) + temp_block.nextColor[1] * temp_block.nowStep) / temp_block.totalStep;
                    //     colorData[2] = (temp_block.nowColor[2] * (temp_block.totalStep - temp_block.nowStep) + temp_block.nextColor[2] * temp_block.nowStep) / temp_block.totalStep;
                    //     element.color = JSON.parse(JSON.stringify(colorData));
                    //     break;
                    // }
                }
            }
        }, 250);
    };
    M_Light_CS.prototype.mode_KeepRainingBackup = function (colors, isRainbow, bandwidth, BaseSpeed) {
        var _this = this;
        if (colors === void 0) { colors = [[0, 0, 255, 1]]; }
        if (isRainbow === void 0) { isRainbow = false; }
        if (bandwidth === void 0) { bandwidth = 20; }
        if (BaseSpeed === void 0) { BaseSpeed = 140; }
        console.log('%c mode_KeepRainingBackup', 'color:rgb(255,75,255,1)', colors, this.repeater);
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        console.log('%c mode_Starlight', 'color:rgb(255,75,255,1)', colors);
        //colors=[[255,0,0,1]];
        var translatecolors = [];
        if (isRainbow) {
            translatecolors = this.rainbow7Color();
        }
        else {
            translatecolors = colors;
        }
        var totalStep = 5;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        var target = this.AllBlockColor;
        this.setAllBlockColor([0, 0, 0, 1]);
        var repeatCountList = [];
        var RanRange = [1, 200];
        var coordinateAllList = [];
        //RotationMatrixValue: xpos + space+ypos,
        //x' = cos(θ) * x - sin(θ) * y
        //y' = sin(θ) * x + cos(θ) * y
        //var temp_target=JSON.parse(JSON.stringify(this.AllBlockColor));
        for (var xpos = -this.minKeyWidth * 10; xpos < this.imageMaxWidth; xpos += this.imageMaxWidth / 10) {
            var space = 0;
            for (var ypos = 0; ypos < this.imageMaxHeight; ypos += this.imageMaxHeight / 10) {
                //space += this.minKeyWidth/2;
                space += 0;
                coordinateAllList.push({
                    coordinate: [xpos + space, ypos],
                    backupPos: [xpos + space, ypos],
                    RotationMatrixValue: xpos + space + ypos,
                    isCheck: false,
                });
            }
        }
        for (var index = 0; index < target.length; index++) {
            //var modStep = (target[index].coordinateData.center_Point[0] % this.imageMaxWidth) / this.imageMaxWidth;
            var ran = this.getRandom(0, translatecolors.length - 1);
            console.log('ran', ran);
            repeatCountList.push({
                nowColor: [0, 0, 0, 1],
                nextColor: translatecolors[ran],
                recordIndex: index,
                nowStep: 10,
                totalStep: 10,
                repeatCount: 0,
                repeatTime: this.getRandom(RanRange[0], RanRange[1]),
                switchOn: false,
            });
            //target[index].color=repeatCountList[index].color;
        }
        this.repeater = setInterval(function () {
            _this.setAllBlockColor([0, 0, 0, 1]);
            var nowAddx = 0;
            for (var c2 = 0; c2 < coordinateAllList.length; c2++) {
                var T_CA = coordinateAllList[c2];
                //T_CA.coordinate[0]+=this.getRandom(25, 75);
                if (T_CA.coordinate[1] < _this.imageMaxHeight) {
                    nowAddx = 50;
                    T_CA.coordinate[0] += 55;
                    T_CA.coordinate[1] += 25;
                }
                else {
                    //T_CA.coordinate[0]=this.getRandom(0, 20);
                    T_CA.coordinate[0] = T_CA.backupPos[0];
                    T_CA.coordinate[1] = -50;
                }
            }
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var temp_block = repeatCountList[index];
                for (var i2 = 0; i2 < coordinateAllList.length; i2++) {
                    var T = coordinateAllList[i2];
                    var RotationMatrixValue = T.coordinate[0] + T.coordinate[1];
                    var RotationMatrixValue2 = element.coordinateData.top_Left[0] + element.coordinateData.center_Point[1];
                    // if (Math.abs(RotationMatrixValue - RotationMatrixValue2) < 2) {
                    //     console.log('%c RotationMatrixValue', 'color:rgb(255,75,255,1)', RotationMatrixValue, RotationMatrixValue2);
                    //     if (temp_block.nowStep < temp_block.totalStep) {
                    //         temp_block.nowStep += 1;
                    //     }
                    //     else {
                    //         temp_block.nowStep = 0;
                    //         temp_block.repeatCount += 1;
                    //         var T_Now = JSON.parse(JSON.stringify(temp_block.nowColor));
                    //         var T_Next = JSON.parse(JSON.stringify(temp_block.nextColor));
                    //         temp_block.nextColor = T_Now;
                    //         temp_block.nowColor = T_Next;
                    //         temp_block.switchOn = false;
                    //         // if(temp_block.repeatCount>=1){
                    //         //     temp_block.repeatCount=0;
                    //         //     temp_block.switchOn=false;
                    //         // }
                    //     }
                    //     break;
                    // }                
                    if (T.coordinate[0] > element.coordinateData.top_Left[0] &&
                        T.coordinate[0] < element.coordinateData.top_Right[0] &&
                        T.coordinate[1] > element.coordinateData.top_Left[1] &&
                        T.coordinate[1] < element.coordinateData.bottom_Left[1]) {
                        if (temp_block.nowStep < temp_block.totalStep) {
                            temp_block.nowStep += 1;
                        }
                        else {
                            //temp_block.nowStep = 0;
                            temp_block.repeatCount += 1;
                            // var T_Now = JSON.parse(JSON.stringify(temp_block.nowColor));
                            // var T_Next = JSON.parse(JSON.stringify(temp_block.nextColor));
                            // temp_block.nextColor = T_Now;
                            // temp_block.nowColor = T_Next;
                            temp_block.switchOn = false;
                            // if(temp_block.repeatCount>=1){
                            //     temp_block.repeatCount=0;
                            //     temp_block.switchOn=false;
                            // }
                        }
                        var colorData = [0, 0, 0, 1];
                        colorData[0] = (temp_block.nowColor[0] * (temp_block.totalStep - temp_block.nowStep) + temp_block.nextColor[0] * temp_block.nowStep) / temp_block.totalStep;
                        colorData[1] = (temp_block.nowColor[1] * (temp_block.totalStep - temp_block.nowStep) + temp_block.nextColor[1] * temp_block.nowStep) / temp_block.totalStep;
                        colorData[2] = (temp_block.nowColor[2] * (temp_block.totalStep - temp_block.nowStep) + temp_block.nextColor[2] * temp_block.nowStep) / temp_block.totalStep;
                        element.color = JSON.parse(JSON.stringify(colorData));
                        //break;
                    }
                }
            }
        }, 250);
    };
    M_Light_CS.prototype.mode_WaveSyncbackup = function (colors, isRainbow) {
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        console.log('%ccmode_WaveSyncbackup_enter', 'color:rgb(255,75,255,1)', colors, this.repeater);
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        if (isRainbow) {
            //colors =this.rainbow7Color();
            colors = [[255, 0, 0, 1], [255, 165, 0, 1], [255, 255, 0, 1], [0, 255, 0, 1], [0, 127, 255, 1], [0, 0, 255, 1], [139, 0, 255, 1]];
        }
        var setRGB = colors[this.getRandom(0, colors.length - 1)];
        //console.log('StartPoint','color:green',JSON.stringify(StartPoint),this.AllBlockColor); 
        //var SlopeEquation=this.SlopeEquation([0,0],[834,372]);//StartPoint.clientWidth
        //Math.trunc(3.7); // 3
        var spacing = -5;
        var nowColor = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        var horizontalList = [];
        var coordinateAllList = [];
        for (var xpos = -this.minKeyWidth; xpos < this.imageMaxWidth; xpos += this.minKeyWidth) {
            var space = 0;
            var ItemList = [];
            for (var ypos = 0; ypos < this.imageMaxHeight; ypos += StartPoint.clientHeight / 2) {
                space += this.minKeyWidth / 10;
                ItemList.push({
                    coordinate: [xpos + space, ypos],
                    isCheck: false,
                });
            }
            coordinateAllList.push(ItemList);
        }
        console.log('coordinateAllList', coordinateAllList);
        console.log('horizontalList', horizontalList);
        var handleAllList = [];
        var AllItemList = [];
        var target = this.AllBlockColor;
        for (var i33 = 0; i33 < coordinateAllList.length; i33++) {
            var coordinateData = coordinateAllList[i33];
            if (nowColor < colors.length - 1) {
                nowColor += 1;
            }
            else {
                nowColor = 0;
            }
            var ItemList = [];
            var _loop_5 = function (index) {
                isCheck = false;
                var element = target[index];
                for (var i2 = 0; i2 < coordinateData.length; i2++) {
                    T = coordinateData[i2];
                    if (T.coordinate[0] > element.coordinateData.top_Left[0] &&
                        T.coordinate[0] < element.coordinateData.top_Right[0] &&
                        T.coordinate[1] > element.coordinateData.top_Left[1] &&
                        T.coordinate[1] < element.coordinateData.bottom_Left[1]
                        && (handleAllList.find(function (x) { return x == index; }) == undefined)) {
                        handleAllList.push(index);
                        //isCheck=true;
                        ItemList.push(index);
                        //element.color = colors[this.getRandom(0, colors.length - 1)];
                        //console.log('                        colors[nowColor]',                         colors[nowColor],nowColor);       
                        element.color = JSON.parse(JSON.stringify(colors[nowColor]));
                        continue;
                    }
                }
            };
            var isCheck, T;
            for (var index = 0; index < target.length; index++) {
                _loop_5(index);
            }
            AllItemList.push(ItemList);
        }
        console.log('handleAllList', handleAllList);
        console.log('AllItemList', AllItemList);
        var repeatCount = 0;
        this.repeater = setInterval(function () { }, 100);
    };
    M_Light_CS.prototype.mode_Parallelogram = function () {
        var _this = this;
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var repeatCount = 0;
        var StartPoint = this.getNowBlock().coordinateData;
        this.setAllBlockColor([0, 0, 0, 1]);
        //this.mode_reset();
        this.setAllBlockAlpha;
        //var SlopeEquation=this.SlopeEquation([0,0],[834,372]);//StartPoint.clientWidth
        var startX = -StartPoint.clientWidth * 5;
        var movewidth = 4;
        var horizontalList = [];
        //Math.trunc(3.7); // 3
        var H_range = Math.trunc(372 / 40);
        this.repeater = setInterval(function () {
            _this.setAllBlockColor([0, 0, 0, 1]);
            horizontalList = [];
            //console.log('SlopeEquation', SlopeEquation);
            var spacing = -5;
            for (var index = 0; index < 372; index += 40) {
                var ypos = index;
                //horizontalList.push([xpos, ypos]);
                spacing += 1;
                //var ypos = 25;
                for (var index2 = spacing * 22 + repeatCount * 43; index2 < spacing * 22 + 140 + repeatCount * 43; index2 += 1) {
                    var xpos = index2;
                    horizontalList.push([index2, ypos]);
                }
                // var xpos = index;
                // horizontalList.push([xpos, ypos]);
                //+(repeatCount*this.minKeyWidth)
            }
            console.log('horizontalList', horizontalList);
            var target = _this.AllBlockColor;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                for (var i2 = 0; i2 < horizontalList.length; i2++) {
                    var T = horizontalList[i2];
                    //console.log('SlopeEquation[index]', i2, T, element.coordinateData.top_Left);
                    if (T[0] > element.coordinateData.top_Left[0] &&
                        T[0] < element.coordinateData.top_Right[0] &&
                        T[1] > element.coordinateData.top_Left[1] &&
                        T[1] < element.coordinateData.bottom_Left[1]) {
                        element.color = [0, 0, 255, 1];
                        continue;
                    }
                }
            }
            // if(startX<this.imageMaxWidth){
            //     startX+=22;
            // }
            // else{
            //     startX=-StartPoint.clientWidth*5;
            //     this.mode_reset();
            // }
            //clearInterval(this.repeater);
            //     var dis = this.distanceCalculation(0, 0, element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
            //repeatCount+=1;
            if (spacing * 22 + repeatCount * 43 < _this.imageMaxWidth) {
                repeatCount += 1;
            }
            else {
                repeatCount = 0;
            }
        }, 100 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_Pingpong = function (colors, isRainbow) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        console.log('%cmode_Pingpong_enter', 'color:rgb(255,75,255,1)', colors, this.repeater);
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        if (isRainbow) {
            colors = this.rainbow7Color();
        }
        //console.log('StartPoint','color:green',JSON.stringify(StartPoint),this.AllBlockColor); 
        //var SlopeEquation=this.SlopeEquation([0,0],[834,372]);//StartPoint.clientWidth
        //Math.trunc(3.7); // 3
        var repeatCount = 0;
        this.repeater = setInterval(function () {
            _this.setAllBlockColor([0, 0, 0, 1]);
            var horizontalList = [];
            var setRGB = colors[_this.getRandom(0, colors.length - 1)];
            //console.log('repeatCount', repeatCount);
            var spacing = -5;
            if (repeatCount % 2 == 0) {
                for (var index = 0; index < _this.imageMaxHeight; index += StartPoint.clientHeight) {
                    var ypos = index;
                    spacing += 1;
                    var min = intervalCount * StartPoint.clientWidth + spacing * 22;
                    var max = intervalCount * StartPoint.clientWidth + StartPoint.clientWidth * 4 + spacing * 22;
                    for (var index2 = min; index2 < max; index2 += 1) {
                        var xpos = index2;
                        horizontalList.push([xpos, ypos]);
                    }
                }
            }
            else {
                var spacing = -5;
                for (var index = 0; index < _this.imageMaxHeight; index += StartPoint.clientHeight) {
                    spacing += 1;
                    var ypos = index;
                    var min = _this.imageMaxWidth - intervalCount * StartPoint.clientWidth - spacing * 22 - StartPoint.clientWidth * 4;
                    var max = _this.imageMaxWidth - intervalCount * StartPoint.clientWidth - spacing * 22;
                    //var spacing2 = this.minKeyWidth * intervalCount;
                    for (var index2 = max; index2 > min; index2 -= 1) {
                        var xpos = index2;
                        horizontalList.push([xpos, ypos]);
                    }
                }
            }
            //console.log('horizontalList', horizontalList); 
            var target = _this.AllBlockColor;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                for (var i2 = 0; i2 < horizontalList.length; i2++) {
                    var T = horizontalList[i2];
                    if (T[0] > element.coordinateData.top_Left[0] &&
                        T[0] < element.coordinateData.top_Right[0] &&
                        T[1] > element.coordinateData.top_Left[1] &&
                        T[1] < element.coordinateData.bottom_Left[1]) {
                        var temp_colorData = JSON.parse(JSON.stringify(colors[_this.getRandom(0, colors.length - 1)]));
                        for (var index_17 = 0; index_17 < 3; index_17++) {
                            temp_colorData[index_17] = temp_colorData[index_17] * _this.lightData.brightness / 100;
                        }
                        element.color = temp_colorData;
                        //element.color = setRGB;
                        continue;
                    }
                }
            }
            if (intervalCount * StartPoint.clientWidth * 2 < _this.imageMaxWidth) {
                intervalCount += 1;
            }
            else {
                intervalCount = 0;
                repeatCount += 1;
            }
        }, 100);
    };
    M_Light_CS.prototype.mode_BreatheSeparately = function () {
        clearInterval(this.repeater);
        var opacity = 1;
        var opacityCount = 0;
        //RGBcolors =[[255,0,0,1],[255,0,0,0.8],[0,255,0,1],[0,255,0,0.8],[0,0,255,1],[0,0,255,0.8]];
        var totalStep = 30;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        var target = this.AllBlockColor;
        this.setAllBlockColor([0, 0, 255, 1]);
        var repeatCountList = [];
        var RanRange = [10, 100];
        //var temp_target=JSON.parse(JSON.stringify(this.AllBlockColor));   
        for (var index = 0; index < target.length; index++) {
            //var modStep=(target[index].coordinateData.center_Point[0]%this.imageMaxWidth)/this.imageMaxWidth;
            repeatCountList.push({
                color: 0,
                nowPos: 0,
                nowstep: 0,
                repeatCount: 1,
                repeatTime: this.getRandom(RanRange[0], RanRange[1]),
            });
        }
        //var SlopeEquation=this.SlopeEquation([0,0],[834,372]);//StartPoint.clientWidth
        var repeatCount = 0;
        var exist = [];
        this.repeater = setInterval(function () {
            if (opacityCount % 2 == 0) {
                opacity -= 0.05;
            }
            else {
                opacity += 0.05;
            }
            if (opacity >= 1 || opacity <= 0) {
                opacityCount += 1;
            }
            //var horizontalList = [];
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                // var resultL = exist.find((x) => x == index)
                // if (resultL != undefined) {
                //     break;
                // }
                if (element.breathing && element.clearStatus) {
                    //console.log('%c mode_BreatheSeparately_element','color:rgb(255,77,255)',  element);
                    element.color[3] = opacity;
                }
                else {
                }
                //continue;
                //break;
            }
        }, 100);
    };
    M_Light_CS.prototype.clearIntervalEvent = function () {
        clearInterval(this.repeater);
    };
    M_Light_CS.prototype.mode_BreatheSeparatelyBlack = function () {
        var _this = this;
        console.log('%c Enter_BreatheSeparatelyBlack', 'color:rgb(255,77,255)');
        clearInterval(this.repeater);
        //RGBcolors =[[255,0,0,1],[255,0,0,0.8],[0,255,0,1],[0,255,0,0.8],[0,0,255,1],[0,0,255,0.8]];
        var totalStep = 255;
        var nowStep = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        var target = this.AllBlockColor;
        //this.setAllBlockColor([0,0,255,1]);
        //    var tempList=[];
        //    var RanRange=[10,100];
        //     for (let index = 0; index < target.length; index ++) {
        //         tempList.push({
        //             color: JSON.parse(JSON.stringify(target[index].color)),
        //             recordIndex:index,
        //             repeatCount: 1,
        //             repeatTime: this.getRandom(RanRange[0], RanRange[1]),
        //         });
        //     }
        //     var exist=[];
        var repeatCount = 0;
        var nowColor = [];
        var newColor = [];
        this.repeater = setInterval(function () {
            if (nowStep < totalStep) {
                nowStep += 5;
            }
            else {
                nowStep = 0;
                repeatCount += 1;
            }
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var listItem = target[index];
                if (element.breathing && element.clearStatus) {
                    if (repeatCount % 2 == 1) {
                        nowColor = [0, 0, 0, 1];
                        newColor = JSON.parse(JSON.stringify(listItem.color));
                    }
                    else {
                        nowColor = JSON.parse(JSON.stringify(listItem.color));
                        newColor = [0, 0, 0, 1];
                    }
                    var t_data = [0, 0, 0, 1];
                    for (var i_step = 0; i_step < 3; i_step++) {
                        t_data[i_step] = Math.floor((nowColor[i_step] * (totalStep - nowStep) + newColor[i_step] * nowStep) / totalStep);
                    }
                    //var target = this.AllBlockColor;
                    _this.BreathTempArray[index].color = JSON.parse(JSON.stringify(t_data));
                    //element.color= JSON.parse(JSON.stringify(t_data))      
                }
                else {
                    _this.BreathTempArray[index].color = JSON.parse(JSON.stringify(listItem.color));
                }
                //continue;
                //break;
            }
            //console.log('%c Enter_BreatheSeparatelyBlack','color:rgb(255,77,255)',t_data,nowColor,newColor,nowStep,totalStep);
        }, 30);
    };
    M_Light_CS.prototype.mode_Wave1 = function (colors, isRainbow) {
        var _this = this;
        if (colors === void 0) { colors = [[0, 0, 255, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var RGBcolors = [];
        RGBcolors = [[255, 0, 0, 1], [0, 255, 0, 1], [0, 0, 255, 1]];
        if (isRainbow) {
            //colors=this.rainbow7Color();
            colors = RGBcolors;
        }
        else {
            colors = [colors[0], [colors[0][0], colors[0][1], colors[0][2], 0.4]];
        }
        var totalStep = 3;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        var target = this.AllBlockColor;
        this.setAllBlockColor([0, 0, 0, 1]);
        var temp_target = JSON.parse(JSON.stringify(this.AllBlockColor));
        for (var index = 0; index < temp_target.length; index++) {
            //console.log(' target[index].center_Point[0]', target[index].coordinateData.center_Point[0]);
            // var alpha=(target[index].coordinateData.center_Point[0]%this.imageMaxWidth)/this.imageMaxWidth;
            var modStep = (target[index].coordinateData.center_Point[0] % this.imageMaxWidth) / this.imageMaxWidth;
            var ran = (colors.length - 1) - Math.round(modStep * (colors.length - 1));
            console.log('modStep', modStep);
            temp_target[index].nowStep = modStep * totalStep;
            temp_target[index].nowPos = 0;
            var temp_block = temp_target[index];
            var temp_colorData = [0, 0, 0, 1];
            var temp_C = colors[0];
            var nextColor = colors[1];
            if (isRainbow) {
                temp_target[index].nowPos = ran;
                if (ran < colors.length - 1) {
                    temp_C = colors[ran];
                    nextColor = colors[ran + 1];
                }
                else {
                    temp_C = colors[0];
                    nextColor = colors[0];
                }
            }
            var temp_colorData = [0, 0, 0, 1];
            for (var index2 = 0; index2 < 3; index2++) {
                temp_colorData[index2] = (temp_C[index2] * (totalStep - temp_block.nowStep) + nextColor[index2] * temp_block.nowStep) / totalStep;
                temp_colorData[index2] = temp_colorData[index2] * this.lightData.brightness / 100;
            }
            target[index].color = temp_colorData;
        }
        console.log('temp_target', temp_target);
        //var SlopeEquation=this.SlopeEquation([0,0],[834,372]);//StartPoint.clientWidth
        var exist = [];
        this.repeater = setInterval(function () {
            var horizontalList = [];
            //var setRGB=colors[this.getRandom(0, colors.length - 1)];
            var spacing = -5;
            for (var index = 0; index < _this.imageMaxHeight; index += StartPoint.clientHeight) {
                var ypos = index;
                spacing += 1;
                var min = intervalCount * StartPoint.clientWidth + spacing * 22;
                var max = intervalCount * StartPoint.clientWidth + StartPoint.clientWidth + spacing * 22;
                for (var index2 = min; index2 < max; index2 += StartPoint.clientWidth / 2) {
                    var xpos = index2;
                    horizontalList.push([xpos, ypos]);
                }
            }
            var _loop_6 = function (index) {
                var element = target[index];
                for (var i2 = 0; i2 < horizontalList.length; i2++) {
                    T = horizontalList[i2];
                    resultL = exist.find(function (x) { return x == index; });
                    //console.log('exist',exist);
                    if (resultL != undefined) {
                        //console.log('resultL',resultL);
                        break;
                        //return;
                    }
                    if (T[0] > element.coordinateData.top_Left[0] && T[0] < element.coordinateData.top_Right[0] && T[1] > element.coordinateData.top_Left[1] && T[1] < element.coordinateData.bottom_Left[1]) {
                        exist.push(index);
                        temp_block = temp_target[index];
                        //console.log('temp_block.color',temp_block.color);
                        tempColors = colors;
                        if (temp_block.nowStep + 1 < totalStep) {
                            temp_block.nowStep += 1;
                        }
                        else {
                            temp_block.nowStep = 0;
                            if (temp_block.nowPos + 1 < tempColors.length) {
                                temp_block.nowPos += 1;
                            }
                            else {
                                temp_block.nowPos = 0;
                            }
                        }
                        temp_C = tempColors[temp_block.nowPos];
                        if (temp_block.nowPos + 1 < tempColors.length) {
                            nextColor = tempColors[temp_block.nowPos + 1];
                        }
                        else {
                            nextColor = tempColors[0];
                        }
                        temp_colorData = [0, 0, 0, 1];
                        for (var index2 = 0; index2 < 3; index2++) {
                            temp_colorData[index2] = (temp_C[index2] * (totalStep - temp_block.nowStep) + nextColor[index2] * temp_block.nowStep) / totalStep;
                            temp_colorData[index2] = temp_colorData[index2] * _this.lightData.brightness / 100;
                        }
                        element.color = temp_colorData;
                        //continue;
                        //break;
                    }
                }
            };
            var T, resultL, temp_block, tempColors, nextColor, temp_C, temp_colorData;
            //console.log('horizontalList;',horizontalList);
            for (var index = 0; index < target.length; index++) {
                _loop_6(index);
            }
            if (intervalCount * StartPoint.clientWidth < _this.imageMaxWidth) {
                intervalCount += 1;
            }
            else {
                intervalCount = 0;
                exist = [];
            }
        }, 100);
    };
    M_Light_CS.prototype.mode_Rainbow = function () {
        var _this = this;
        console.log('%c Enter_mode_Rainbow', 'color:rgb(255,77,255)');
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        this.setAllBlockColor([0, 0, 0, 1]);
        var H_spacing = Math.trunc(this.imageMaxHeight / StartPoint.clientHeight);
        var w_range = Math.trunc(this.imageMaxWidth / this.minKeyWidth);
        var repeatCountList = [];
        var times = 0;
        var setColors = this.rainbow7Color();
        var target = this.twoDimensionalArray;
        for (var index = 0; index < this.max_X_Number; index++) {
            //this.twoDimensionalArray[index][0].color=[0,0,255,1];
            for (var index2 = 0; index2 < setColors.length; index2++) {
                repeatCountList.push({
                    nowPos: index2,
                    color: setColors[index2],
                    pos: [index, index2],
                    backupPos: [index, index2],
                    step: 5,
                    nowStep: 0,
                });
            }
        }
        this.repeater = setInterval(function () {
            _this.resetTwoDimensionalArray();
            for (var i2 = 0; i2 < repeatCountList.length; i2++) {
                var T = repeatCountList[i2];
                if (T.nowStep + 1 < T.step) {
                    T.nowStep += 1;
                }
                else {
                    T.nowStep = 0;
                    T.nowPos += 1;
                }
                var temp_C = setColors[T.nowPos];
                var nextColor = [];
                if (T.nowPos + 1 < setColors.length - 1) {
                    //T.nowPos+=1;
                    nextColor = setColors[T.nowPos + 1];
                }
                else {
                    T.nowPos = 0;
                    nextColor = setColors[T.nowPos];
                }
                var temp_colorData = [0, 0, 0, 1];
                for (var index2 = 0; index2 < 3; index2++) {
                    temp_colorData[index2] = (temp_C[index2] * (T.step - T.nowStep) + nextColor[index2] * T.nowStep) / T.step;
                    temp_colorData[index2] = temp_colorData[index2] * _this.lightData.brightness / 100;
                }
                _this.twoDimensionalArray[T.pos[0]][T.pos[1]].color = temp_colorData;
            }
            _this.showTwoDimensionalArray();
        }, 50 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_Cooking = function (colors, isRainbow) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var rainbowColors = this.rainbow7Color();
        var StartPoint = this.getNowBlock(0).coordinateData;
        this.setAllBlockColor([0, 0, 0, 1]);
        var H_spacing = Math.trunc(this.imageMaxHeight / StartPoint.clientHeight);
        var w_range = Math.trunc(this.imageMaxWidth / this.minKeyWidth);
        var repeatCountList = [];
        var times = 0;
        var target = this.twoDimensionalArray;
        // var a2=[0,3,5,8,11,13];
        for (var index = 0; index < this.max_X_Number; index++) {
            //this.twoDimensionalArray[index][0].color=[0,0,255,1];
            for (var index2 = 0; index2 < this.max_Y_Number; index2++) {
                repeatCountList.push({
                    nowPos: 0,
                    color: [0, 0, 0, 1],
                    pos: [index, index2],
                    backupPos: [index, index2],
                    repeatTime: this.getRandom(0, 3),
                });
            }
        }
        this.repeater = setInterval(function () {
            var temp_colorData = JSON.parse(JSON.stringify(colors[0]));
            for (var index = 0; index < 3; index++) {
                temp_colorData[index] = temp_colorData[index] * _this.lightData.brightness / 100;
            }
            _this.resetTwoDimensionalArray(temp_colorData); //
            for (var i2 = 0; i2 < repeatCountList.length; i2++) {
                var T = repeatCountList[i2];
                if (T.repeatTime > 0) {
                    T.repeatTime -= 1;
                }
                if (T.repeatTime == 0) {
                    if (T.pos[1] - 1 > 0) {
                        T.pos[1] -= 1;
                    }
                    else {
                        T.pos[1] = T.backupPos[1];
                        T.repeatTime = 0;
                    }
                    //console.log('repeatCountList;', i2,repeatCountList[i2].repeatCount);
                }
                _this.twoDimensionalArray[T.pos[0]][T.pos[1]].color = [0, 0, 0, 1];
            }
            _this.showTwoDimensionalArray();
        }, 50 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_Snowing = function (colors, isRainbow) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        this.setAllBlockColor([0, 0, 0, 1]);
        var H_spacing = Math.trunc(this.imageMaxHeight / StartPoint.clientHeight);
        var w_range = Math.trunc(this.imageMaxWidth / this.minKeyWidth);
        var repeatCountList = [];
        for (var x = StartPoint.top_Left[0]; x < this.imageMaxWidth; x += this.minKeyWidth) {
            //var xpos=[];
            //StartPoint.top_Left[1]
            var temp_list = [];
            //console.log('StartPoint.top_Left[1]',  StartPoint.top_Left[1],this.imageMaxHeight);
            for (var index2 = StartPoint.top_Left[1]; index2 < this.imageMaxHeight; index2 += StartPoint.clientHeight) {
                temp_list.push([x, index2]);
            }
            repeatCountList.push({
                color: [0, 255, 255, 1],
                i_list: temp_list,
                pos: 0,
                repeatCount: 6,
                repeatTime: this.getRandom(1, 25),
            });
            //this.getRandom(1,50)
            //var k = (movement + x) / this.imageMaxHeight;    // 回合數
            //var r = (movement + x) % this.imageMaxHeight;    // 餘數
            //console.log(x, y);
        }
        console.log('repeatCountList;', repeatCountList);
        this.repeater = setInterval(function () {
            _this.setAllBlockColor([0, 0, 0, 1]);
            //current_time+=5;
            for (var i2 = 0; i2 < repeatCountList.length; i2++) {
                var T = repeatCountList[i2];
                if (T.repeatTime > 0) {
                    repeatCountList[i2].repeatTime -= 1;
                }
                else if (T.repeatTime == 0 && T.repeatCount < T.i_list.length) {
                    repeatCountList[i2].repeatCount += 1;
                    //console.log('repeatCountList;', i2,repeatCountList[i2].repeatCount);
                }
                if (T.repeatCount >= T.i_list.length) {
                    repeatCountList[i2].repeatCount = 0;
                    repeatCountList[i2].repeatTime = _this.getRandom(1, 25);
                }
            }
            var target = _this.AllBlockColor;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                for (var i2 = 0; i2 < repeatCountList.length; i2++) {
                    var T = repeatCountList[i2];
                    //console.log('T_now;', T);
                    var now = T.i_list[T.repeatCount];
                    //console.log('now;', now);
                    if (now[0] >= element.coordinateData.top_Left[0] &&
                        now[0] <= element.coordinateData.top_Right[0] &&
                        now[1] >= element.coordinateData.top_Left[1] &&
                        now[1] <= element.coordinateData.bottom_Left[1]) {
                        var temp_colorData = JSON.parse(JSON.stringify(repeatCountList[i2].color));
                        for (var index_18 = 0; index_18 < 3; index_18++) {
                            temp_colorData[index_18] = temp_colorData[index_18] * _this.lightData.brightness / 100;
                        }
                        target[index].color = temp_colorData;
                    }
                }
            }
        }, 100 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_DigitTimes = function (colors, isRainbow) {
        var _this = this;
        if (colors === void 0) { colors = [[0, 0, 255, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        this.setAllBlockColor([0, 0, 0, 1]);
        var H_spacing = Math.trunc(this.imageMaxHeight / StartPoint.clientHeight);
        var w_range = Math.trunc(this.imageMaxWidth / this.minKeyWidth);
        var repeatCountList = [];
        var setRGB;
        var target = this.twoDimensionalArray;
        // var a2=[0,3,5,8,11,13];
        //    var randomList=[];
        //    for (let i = 0; i < this.KeyTableArray[0][1]-1; i++) {
        //        randomList.push(this.getRandom(0, this.KeyTableArray[0][1]-1));   //亂數產生，亂數產生的範圍是1~9
        //        for (let j = 0; j < i; j++) {
        //            while (randomList[j] == randomList[i])    //檢查是否與前面產生的數值發生重複，如果有就重新產生
        //            {
        //                j = 0;  //如有重複，將變數j設為0，再次檢查 (因為還是有重複的可能)
        //                randomList[i] = this.getRandom(0, this.KeyTableArray[0][1]-1);   //重新產生，存回陣列，亂數產生的範圍是1~9
        //            }
        //        }
        //    }
        for (var index = 0; index <= this.KeyTableArray[0][1]; index++) {
            //this.twoDimensionalArray[index][0].color=[0,0,255,1];
            repeatCountList.push({
                color: colors[this.getRandom(0, colors.length - 1)],
                pos: [index, index % (this.max_Y_Number / 2)],
                backupPos: [index, index % (this.max_Y_Number / 2)],
                repeatTime: this.getRandom(0, 3),
            });
        }
        this.repeater = setInterval(function () {
            _this.resetTwoDimensionalArray();
            for (var i2 = 0; i2 < repeatCountList.length; i2++) {
                var T = repeatCountList[i2];
                if (T.repeatTime > 0) {
                    T.repeatTime -= 1;
                }
                if (T.repeatTime == 0) {
                    if (T.pos[1] + 1 < _this.max_Y_Number) {
                        if (T.pos[0] < 1) {
                            T.pos[1] += 1;
                        }
                        else {
                            T.pos[1] += 1;
                            T.pos[0] += 1;
                        }
                    }
                    else {
                        T.pos[0] = T.backupPos[0];
                        T.pos[1] = 0;
                        T.repeatTime = 1;
                    }
                    //console.log('repeatCountList;', i2,repeatCountList[i2].repeatCount);
                }
                var temp_colorData = JSON.parse(JSON.stringify(T.color));
                for (var index = 0; index < 3; index++) {
                    temp_colorData[index] = temp_colorData[index] * _this.lightData.brightness / 100;
                }
                _this.twoDimensionalArray[T.pos[0]][T.pos[1]].color = temp_colorData;
            }
            _this.showTwoDimensionalArray();
        }, 500 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_SinGraphics = function (colors) {
        var _this = this;
        if (colors === void 0) { colors = []; }
        colors = [[255, 0, 0, 1], [0, 255, 0, 1], [0, 0, 255, 1]];
        var Brightness = 1;
        clearInterval(this.repeater);
        this.currentBlockIndex = 43;
        var repeatMin = 5;
        var repeatMax = 200;
        var repeatCount = 0;
        var StartPoint = this.getNowBlock().coordinateData;
        var horizontalList = [];
        var record = 0;
        //var radian = 75 * Math.PI / 180;    //計算出弧度
        var maxH = 268;
        this.repeater = setInterval(function () {
            _this.setAllBlockColor([0, 0, 0, 1]);
            //console.log('SlopeEquation', SlopeEquation);
            var spacing = -5;
            horizontalList = [];
            // for (let x = 0; x < 834; x++) { 
            //     const y = Math.sin(x * 2) * 100 ;
            //     horizontalList.push([x, y]);
            // }
            // for (let x = 0; x < this.imageMaxWidth; x++) { 
            //     const radians = x / this.imageMaxWidth * Math.PI * 2;
            //     const scale = (Math.sin(radians - Math.PI * 0.5) + 1) * 0.5*maxH; 
            //     const y = Math.sin(x * 0.02 + 6) * 5 * scale; 
            //     horizontalList.push([x, y]);
            // }
            for (var i_xpos = 0; i_xpos < 834; i_xpos++) {
                var ratio = Math.sin(i_xpos / 2 * Math.PI / 180);
                var xpos = 120 + i_xpos;
                //const scale = (Math.sin(radian - Math.PI * 0.5) + 1) * 0.5*maxH; 
                //var ypos=22+((ratio+1)/2*372);
                var h = 22 + ((ratio + 1) / 2 * 268);
                horizontalList.push([xpos, h]);
            }
            console.log('horizontalList', horizontalList);
            var target = _this.AllBlockColor;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                for (var i2 = 0; i2 < horizontalList.length; i2++) {
                    var T = horizontalList[i2];
                    //console.log('SlopeEquation[index]', i2, T, element.coordinateData.top_Left);
                    if (T[0] > element.coordinateData.top_Left[0] &&
                        T[0] < element.coordinateData.top_Right[0] &&
                        T[1] > element.coordinateData.top_Left[1] &&
                        T[1] < element.coordinateData.bottom_Left[1]) {
                        element.color = [0, 0, 255, 1];
                        continue;
                    }
                }
            }
            if (record <= 0 || record >= 1) {
                repeatCount += 1;
            }
            if (repeatCount % 2 == 0) {
                record -= 0.15;
            }
            else {
                record += 0.15;
            }
        }, 150 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_HeartbeatSensor = function (colors) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1], [0, 255, 0, 1], [0, 0, 255, 1]]; }
        console.log('%c Enter_mode_HeartbeatSensor', 'color:rgb(255,77,255)', colors);
        var Brightness = 1;
        clearInterval(this.repeater);
        this.currentBlockIndex = 43;
        //var StartPoint = [this.imageMaxWidth/2,this.imageMaxHeight/2];
        var StartPoint = this.getNowBlock(0).coordinateData;
        var share_RepeatCount = 0;
        var horizontalList = [];
        for (var index = 0; index < this.imageMaxWidth; index += this.minKeyWidth) {
            var ratio = Math.sin((index * Math.PI / 180));
            //var xpos=120+index;
            //const scale = (Math.sin(radian - Math.PI * 0.5) + 1) * 0.5*maxH; 
            var ypos = (ratio + 1) / 2 * this.imageMaxHeight;
            horizontalList.push({
                repeatCount: 0,
                coordinate: [index, StartPoint.top_Left[0] + ypos],
            });
        }
        this.repeater = setInterval(function () {
            _this.setAllBlockColor([0, 0, 0, 1]);
            var isEnd = false;
            var spacing = -5;
            // if(horizontalList[0]['coordinate'][1]<=0||horizontalList[1]['coordinate'][1]>=this.imageMaxHeight){
            //     //h_Item['repeatCount']+=1;
            //     share_RepeatCount+=1;
            // }
            for (var index = 0; index < horizontalList.length; index++) {
                var h_Item = horizontalList[index];
                if (h_Item.coordinate[1] <= 0 || h_Item.coordinate[1] >= _this.imageMaxHeight) {
                    h_Item['repeatCount'] += 1;
                    //isEnd=true;
                    //break;
                }
                if (h_Item['repeatCount'] % 2 == 0) {
                    h_Item['coordinate'][1] -= 40;
                    if (h_Item['coordinate'][1] <= 0) {
                        h_Item['coordinate'][1] = 0;
                    }
                }
                else {
                    h_Item['coordinate'][1] += 40;
                    if (h_Item['coordinate'][1] >= _this.imageMaxHeight) {
                        h_Item['coordinate'][1] = _this.imageMaxHeight;
                    }
                }
            }
            // if(isEnd){
            //     for (let i_2 = 0; i_2 <  horizontalList.length; i_2++) {
            //         var h_Item2=horizontalList[i_2];
            //         h_Item2.repeatCount+=1; 
            //     }
            // }
            console.log('horizontalList', horizontalList, share_RepeatCount % 2);
            var target = _this.AllBlockColor;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                for (var i2 = 0; i2 < horizontalList.length; i2++) {
                    var T = horizontalList[i2].coordinate;
                    //console.log('SlopeEquation[index]', i2, T, element.coordinateData.top_Left);
                    if (T[0] >= element.coordinateData.top_Left[0] &&
                        T[0] <= element.coordinateData.top_Right[0] &&
                        T[1] >= element.coordinateData.top_Left[1] &&
                        T[1] <= element.coordinateData.bottom_Left[1]) {
                        var temp_colorData = JSON.parse(JSON.stringify(colors[_this.getRandom(0, colors.length - 1)]));
                        for (var index_19 = 0; index_19 < 3; index_19++) {
                            temp_colorData[index_19] = temp_colorData[index_19] * _this.lightData.brightness / 100;
                        }
                        element.color = temp_colorData;
                        continue;
                    }
                }
            }
            //console.log('this.animationSpeed', this.animationSpeed);
        }, 60 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_SinMoving_Up_Down = function (colors) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1], [0, 255, 0, 1], [0, 0, 255, 1]]; }
        console.log('%c Enter_mode_HeartbeatSensor', 'color:rgb(255,77,255)', colors);
        var Brightness = 1;
        clearInterval(this.repeater);
        this.currentBlockIndex = 43;
        //var StartPoint = [this.imageMaxWidth/2,this.imageMaxHeight/2];
        var StartPoint = this.getNowBlock(0).coordinateData;
        var share_RepeatCount = 0;
        var horizontalList = [];
        for (var index = 0; index < this.imageMaxWidth; index += this.minKeyWidth) {
            var ratio = Math.sin((index * Math.PI / 180));
            //var xpos=120+index;
            //const scale = (Math.sin(radian - Math.PI * 0.5) + 1) * 0.5*maxH; 
            var ypos = (ratio + 1) / 2 * 268;
            horizontalList.push({
                repeatCount: 0,
                coordinate: [index, StartPoint.top_Left[0] + ypos],
            });
        }
        this.repeater = setInterval(function () {
            _this.setAllBlockColor([0, 0, 0, 1]);
            var spacing = -5;
            if (horizontalList[0]['coordinate'][1] <= 0 || horizontalList[1]['coordinate'][1] >= _this.imageMaxHeight) {
                //h_Item['repeatCount']+=1;
                share_RepeatCount += 1;
            }
            for (var index = 0; index < horizontalList.length; index++) {
                var h_Item = horizontalList[index];
                if (share_RepeatCount % 2 == 0) {
                    h_Item['coordinate'][1] -= 40;
                }
                else {
                    h_Item['coordinate'][1] += 40;
                }
                // if(h_Item['coordinate'][1]<=0||h_Item['coordinate'][1]>=this.imageMaxHeight){
                //     //h_Item['repeatCount']+=1;
                //     share_RepeatCount+=1;
                // }
            }
            console.log('horizontalList', horizontalList, share_RepeatCount % 2);
            var target = _this.AllBlockColor;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                for (var i2 = 0; i2 < horizontalList.length; i2++) {
                    var T = horizontalList[i2].coordinate;
                    //console.log('SlopeEquation[index]', i2, T, element.coordinateData.top_Left);
                    if (T[0] >= element.coordinateData.top_Left[0] &&
                        T[0] <= element.coordinateData.top_Right[0] &&
                        T[1] >= element.coordinateData.top_Left[1] &&
                        T[1] <= element.coordinateData.bottom_Left[1]) {
                        element.color = colors[_this.getRandom(0, colors.length - 1)];
                        continue;
                    }
                }
            }
            console.log('this.animationSpeed', _this.animationSpeed);
        }, 60 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_Matrix3_Rainbow = function (colors, speed) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 255, 0, 1]]; }
        if (speed === void 0) { speed = 1; }
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        //colors=this.rainbow7Color();
        var totalStep = 30;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        var target = this.AllBlockColor;
        this.setAllBlockColor([0, 0, 0, 1]);
        var repeatCountList = [];
        var RanRange = [1, 25];
        //var temp_target=JSON.parse(JSON.stringify(this.AllBlockColor));
        for (var index = 0; index < target.length; index++) {
            //console.log(' target[index].center_Point[0]', target[index].coordinateData.center_Point[0]);
            // var alpha=(target[index].coordinateData.center_Point[0]%this.imageMaxWidth)/this.imageMaxWidth;
            var modStep = (target[index].coordinateData.center_Point[0] % this.imageMaxWidth) / this.imageMaxWidth;
            //var ran=this.getRandom(0, colors.length - 1);
            var ran = (colors.length - 1) - Math.round(modStep * (colors.length - 1));
            //console.log('alpha',alpha);
            //console.log('modStep',modStep);
            //nowstep:modStep*totalStep
            repeatCountList.push({
                color: 0,
                nowPos: 0,
                nowstep: 0,
                repeatCount: 1,
                repeatTime: this.getRandom(RanRange[0], RanRange[1]),
            });
            var temp_block = repeatCountList[index];
            var temp_C = colors[0];
            var nextColor = colors[1];
            repeatCountList[index].nowPos = ran;
            if (ran < colors.length - 1) {
                temp_C = colors[ran];
                nextColor = colors[ran + 1];
            }
            else {
                temp_C = colors[0];
                nextColor = colors[0];
            }
        }
        //var SlopeEquation=this.SlopeEquation([0,0],[834,372]);//StartPoint.clientWidth
        var repeatCount = 0;
        var exist = [];
        this.repeater = setInterval(function () {
            var horizontalList = [];
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                exist.push(index);
                var temp_block = repeatCountList[index];
                var tempColors = colors;
                var nextColor;
                if (temp_block.repeatTime > 0) {
                    temp_block.repeatTime -= 1;
                }
                if (temp_block.repeatTime == 0) {
                    if (temp_block.nowStep + 1 < totalStep) {
                        temp_block.nowStep += 1;
                    }
                    else {
                        temp_block.nowStep = 0;
                        var newRand = _this.getRandom(RanRange[0], RanRange[1]);
                        temp_block.repeatTime = newRand;
                        if (temp_block.nowPos + 1 < tempColors.length) {
                            temp_block.nowPos += 1;
                        }
                        else {
                            temp_block.nowPos = 0;
                        }
                    }
                    var temp_C = tempColors[temp_block.nowPos];
                    if (temp_block.nowPos + 1 < tempColors.length) {
                        nextColor = tempColors[temp_block.nowPos + 1];
                    }
                    else {
                        nextColor = tempColors[0];
                    }
                    var temp_colorData = [0, 0, 0, 1];
                    for (var index_20 = 0; index_20 < 3; index_20++) {
                        temp_colorData[index_20] = (temp_C[index_20] * (totalStep - temp_block.nowStep) + nextColor[index_20] * temp_block.nowStep) / totalStep;
                        temp_colorData[index_20] = temp_colorData[index_20] * _this.lightData.brightness / 100;
                    }
                    element.color = temp_colorData;
                }
            }
            if (intervalCount * StartPoint.clientWidth < _this.imageMaxWidth) {
                intervalCount += 1;
            }
            else {
                intervalCount = 0;
                exist = [];
                repeatCount += 1;
            }
        }, 100 * this.animationSpeed * speed);
    };
    M_Light_CS.prototype.mode_Matrix3 = function (colors, isRainbow, speed) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 255, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = false; }
        if (speed === void 0) { speed = 1; }
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var RGBcolors = [];
        RGBcolors = [[255, 0, 0, 1], [0, 255, 0, 1], [0, 0, 255, 1]];
        //RGBcolors =[[255,0,0,1],[255,0,0,0.8],[0,255,0,1],[0,255,0,0.8],[0,0,255,1],[0,0,255,0.8]];
        if (isRainbow) {
            //colors=this.rainbow7Color();
            colors = RGBcolors;
        }
        else {
            colors = [colors[0], [0, 0, 0, 1]];
        }
        var totalStep = 30;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        var target = this.AllBlockColor;
        this.setAllBlockColor([0, 0, 0, 1]);
        var repeatCountList = [];
        var RanRange = [1, 25];
        //var temp_target=JSON.parse(JSON.stringify(this.AllBlockColor));
        for (var index = 0; index < target.length; index++) {
            //console.log(' target[index].center_Point[0]', target[index].coordinateData.center_Point[0]);
            // var alpha=(target[index].coordinateData.center_Point[0]%this.imageMaxWidth)/this.imageMaxWidth;
            var modStep = (target[index].coordinateData.center_Point[0] % this.imageMaxWidth) / this.imageMaxWidth;
            //var ran=this.getRandom(0, colors.length - 1);
            var ran = (colors.length - 1) - Math.round(modStep * (colors.length - 1));
            //console.log('alpha',alpha);
            //console.log('modStep',modStep);
            //nowstep:modStep*totalStep
            repeatCountList.push({
                color: 0,
                nowPos: 0,
                nowstep: 0,
                repeatCount: 1,
                repeatTime: this.getRandom(RanRange[0], RanRange[1]),
            });
            var temp_block = repeatCountList[index];
            var temp_C = colors[0];
            var nextColor = colors[1];
            if (isRainbow) {
                repeatCountList[index].nowPos = ran;
                if (ran < colors.length - 1) {
                    temp_C = colors[ran];
                    nextColor = colors[ran + 1];
                }
                else {
                    temp_C = colors[0];
                    nextColor = colors[0];
                }
            }
        }
        //var SlopeEquation=this.SlopeEquation([0,0],[834,372]);//StartPoint.clientWidth
        var repeatCount = 0;
        var exist = [];
        this.repeater = setInterval(function () {
            //this.setAllBlockColor([0, 0, 0, 1]);
            var horizontalList = [];
            //console.log('horizontalList;',horizontalList);
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                // var resultL = exist.find((x) => x == index)
                // if (resultL != undefined) {
                //     break;
                // }
                exist.push(index);
                var temp_block = repeatCountList[index];
                //console.log('temp_block.color',temp_block.color);
                var tempColors = colors;
                //var tempColors =temp_block.color;
                var nextColor;
                if (temp_block.repeatTime > 0) {
                    temp_block.repeatTime -= 1;
                }
                if (temp_block.repeatTime == 0) {
                    if (temp_block.nowStep + 1 < totalStep) {
                        temp_block.nowStep += 1;
                    }
                    else {
                        temp_block.nowStep = 0;
                        var newRand = _this.getRandom(RanRange[0], RanRange[1]);
                        temp_block.repeatTime = newRand;
                        if (temp_block.nowPos + 1 < tempColors.length) {
                            temp_block.nowPos += 1;
                        }
                        else {
                            temp_block.nowPos = 0;
                        }
                    }
                    var temp_C = tempColors[temp_block.nowPos];
                    if (temp_block.nowPos + 1 < tempColors.length) {
                        nextColor = tempColors[temp_block.nowPos + 1];
                    }
                    else {
                        nextColor = tempColors[0];
                    }
                    var temp_colorData = [0, 0, 0, 1];
                    for (var index_21 = 0; index_21 < 3; index_21++) {
                        temp_colorData[index_21] = (temp_C[index_21] * (totalStep - temp_block.nowStep) + nextColor[index_21] * temp_block.nowStep) / totalStep;
                        temp_colorData[index_21] = temp_colorData[index_21] * _this.lightData.brightness / 100;
                    }
                    element.color = temp_colorData;
                }
                //continue;
                //break;
            }
            if (intervalCount * StartPoint.clientWidth < _this.imageMaxWidth) {
                intervalCount += 1;
            }
            else {
                intervalCount = 0;
                exist = [];
                repeatCount += 1;
            }
            // if(repeatCount>2){
            //     clearInterval(this.repeater);
            // }
        }, 100 * speed);
    };
    M_Light_CS.prototype.mode_Matrix2 = function (colors, isRainbow, speed) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 255, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = false; }
        if (speed === void 0) { speed = 1; }
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var RGBcolors = [];
        RGBcolors = [[255, 0, 0, 1], [0, 255, 0, 1], [0, 0, 255, 1]];
        if (isRainbow) {
            //colors=this.rainbow7Color();
            colors = RGBcolors;
        }
        else {
            colors = [colors[0], [0, 0, 0, 1]];
        }
        var totalStep = 30;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        var target = this.AllBlockColor;
        this.setAllBlockColor([0, 0, 0, 1]);
        var repeatCountList = [];
        var RanRange = [10, 100];
        //var temp_target=JSON.parse(JSON.stringify(this.AllBlockColor));
        for (var index = 0; index < target.length; index++) {
            //console.log(' target[index].center_Point[0]', target[index].coordinateData.center_Point[0]);
            // var alpha=(target[index].coordinateData.center_Point[0]%this.imageMaxWidth)/this.imageMaxWidth;
            var modStep = (target[index].coordinateData.center_Point[0] % this.imageMaxWidth) / this.imageMaxWidth;
            //var ran=this.getRandom(0, colors.length - 1);
            var ran = (colors.length - 1) - Math.round(modStep * (colors.length - 1));
            repeatCountList.push({
                color: 0,
                nowPos: 0,
                nowstep: 0,
                repeatCount: 1,
                repeatTime: this.getRandom(RanRange[0], RanRange[1]),
            });
            var temp_block = repeatCountList[index];
            var temp_C = colors[0];
            var nextColor = colors[1];
            if (isRainbow) {
                repeatCountList[index].nowPos = ran;
                if (ran < colors.length - 1) {
                    temp_C = colors[ran];
                    nextColor = colors[ran + 1];
                }
                else {
                    temp_C = colors[0];
                    nextColor = colors[0];
                }
            }
            // var temp_colorData = [0, 0, 0, 1];
            // for (let index = 0; index < 3; index++) {
            //     temp_colorData[index] = (temp_C[index] * (totalStep - temp_block.nowStep) + nextColor[index] * temp_block.nowStep) / totalStep;
            //     temp_colorData[index]=temp_colorData[index]*this.lightData.brightness/100;
            // }
        }
        //var SlopeEquation=this.SlopeEquation([0,0],[834,372]);//StartPoint.clientWidth
        var repeatCount = 0;
        var exist = [];
        this.repeater = setInterval(function () {
            //this.setAllBlockColor([0, 0, 0, 1]);
            var horizontalList = [];
            //console.log('horizontalList;',horizontalList);
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                // var resultL = exist.find((x) => x == index)
                // if (resultL != undefined) {
                //     break;
                // }
                exist.push(index);
                var temp_block = repeatCountList[index];
                var tempColors = colors;
                var nextColor;
                //var tempColors =temp_block.color;
                if (temp_block.repeatTime > 0) {
                    temp_block.repeatTime -= 1;
                }
                if (temp_block.repeatTime == 0) {
                    if (temp_block.nowStep + 1 < totalStep) {
                        temp_block.nowStep += 1;
                    }
                    else {
                        temp_block.nowStep = 0;
                        var newRand = _this.getRandom(RanRange[0], RanRange[1]);
                        temp_block.repeatTime = newRand;
                        if (temp_block.nowPos + 1 < tempColors.length) {
                            temp_block.nowPos += 1;
                        }
                        else {
                            temp_block.nowPos = 0;
                        }
                    }
                    var temp_C = tempColors[temp_block.nowPos];
                    if (temp_block.nowPos + 1 < tempColors.length) {
                        nextColor = tempColors[temp_block.nowPos + 1];
                    }
                    else {
                        nextColor = tempColors[0];
                    }
                    var temp_colorData = [0, 0, 0, 1];
                    for (var index_22 = 0; index_22 < 3; index_22++) {
                        temp_colorData[index_22] = (temp_C[index_22] * (totalStep - temp_block.nowStep) + nextColor[index_22] * temp_block.nowStep) / totalStep;
                        temp_colorData[index_22] = temp_colorData[index_22] * _this.lightData.brightness / 100;
                    }
                    element.color = temp_colorData;
                }
                //continue;
                //break;
            }
            if (intervalCount * StartPoint.clientWidth < _this.imageMaxWidth) {
                intervalCount += 1;
            }
            else {
                intervalCount = 0;
                exist = [];
                repeatCount += 1;
            }
        }, 100 * speed);
    };
    M_Light_CS.prototype.mode_Starlight = function (colors, isRainbow, speed) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 255, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = false; }
        if (speed === void 0) { speed = 1; }
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        console.log('%c mode_Starlight', 'color:rgb(255,75,255,1)', colors);
        //colors=[[255,0,0,1]];
        var translatecolors = [];
        if (isRainbow) {
            translatecolors = this.rainbow7Color();
        }
        else {
            translatecolors = colors;
        }
        var totalStep = 5;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        var target = this.AllBlockColor;
        this.setAllBlockColor([0, 0, 0, 1]);
        var repeatCountList = [];
        var RanRange = [1, 200];
        //var temp_target=JSON.parse(JSON.stringify(this.AllBlockColor));
        for (var index = 0; index < target.length; index++) {
            var modStep = (target[index].coordinateData.center_Point[0] % this.imageMaxWidth) / this.imageMaxWidth;
            var ran = this.getRandom(0, translatecolors.length - 1);
            //var ran=(colors.length - 1)-Math.round(modStep* (colors.length - 1));
            //console.log('modStep',modStep);
            console.log('ran', ran);
            repeatCountList.push({
                nowColor: [0, 0, 0, 1],
                nextColor: translatecolors[ran],
                nowStep: 0,
                repeatCount: 0,
                repeatTime: this.getRandom(RanRange[0], RanRange[1]),
            });
            //target[index].color=repeatCountList[index].color;
        }
        //var SlopeEquation=this.SlopeEquation([0,0],[834,372]);//StartPoint.clientWidth
        this.repeater = setInterval(function () {
            //this.setAllBlockColor([0, 0, 0, 1]);
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var temp_block = repeatCountList[index];
                var tempColors = translatecolors;
                //var tempColors =temp_block.color;
                if (temp_block.repeatTime > 0) {
                    temp_block.repeatTime -= 1;
                }
                else if (temp_block.repeatTime == 0) {
                    if (temp_block.nowStep + 1 < totalStep) {
                        temp_block.nowStep += 1;
                    }
                    else {
                        var newRand = _this.getRandom(RanRange[0], RanRange[1]);
                        temp_block.nowStep = 0;
                        temp_block.repeatCount += 1;
                        temp_block.nowColor = JSON.parse(JSON.stringify(temp_block.nextColor));
                        if (temp_block.repeatCount % 2) {
                            temp_block.nextColor = [0, 0, 0, 1];
                            temp_block.repeatTime = 40;
                        }
                        else {
                            temp_block.nextColor = JSON.parse(JSON.stringify(translatecolors[_this.getRandom(0, translatecolors.length - 1)]));
                            temp_block.repeatTime = _this.getRandom(RanRange[0], RanRange[1]);
                        }
                    }
                    //console.log('temp_block',temp_block);
                    var temp_colorData = [0, 0, 0, 1];
                    for (var index2 = 0; index2 < 3; index2++) {
                        temp_colorData[index2] = (temp_block.nowColor[index2] * (totalStep - temp_block.nowStep) + temp_block.nextColor[index2] * temp_block.nowStep) / totalStep;
                        temp_colorData[index2] = temp_colorData[index2] * _this.lightData.brightness / 100;
                    }
                    element.color = temp_colorData;
                }
                //continue;
                //break;
            }
        }, 100 * this.animationSpeed * speed);
    };
    M_Light_CS.prototype.mode_gloriousMode = function () {
        var _this = this;
        //this.addBlockIndex();
        clearInterval(this.repeater);
        this.currentBlockIndex = 36;
        var rgbRepeat = 0;
        var repeatCount = 0;
        //this.mode_AllBlockColor([255,0,0,1]);
        var StartPoint = this.getNowBlock().coordinateData;
        var setRGB = [255, 0, 0, 1];
        var tempRGB = [255, 0, 0, 1];
        var repeatCountArr = [0, 0, 0];
        this.repeater = setInterval(function () {
            //this.mode_AllBlockColor([0,255,0,1]);
            //this.mode_reset();
            var target = _this.AllBlockColor;
            // sub_disL-=50;
            // sub_disR+=50;
            _this.getNowBlock().color = setRGB;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                console.log('this.M_Light_PRESETS.addBlockIndex();', element);
                var dis = _this.distanceCalculation(StartPoint.center_Point[0], StartPoint.center_Point[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                //+(repeatCount*50)
                //console.log('setCoordinate', StartPoint.center_Point[0],element.coordinateData.center_Point[0])
                var compareResult = _this.minKeyWidth * repeatCount;
                var compareResultMax = _this.minKeyWidth * repeatCount - _this.minKeyWidth;
                //repeatMax=compareResult+200;
                //var Ysdis=Math.abs(StartPoint.top_Left[1]-element.coordinateData.top_Left[1]);
                //if (Ysdis < 5) {
                if (dis < compareResult && dis > compareResultMax) {
                    element.color = setRGB;
                }
            }
            if (compareResult < _this.imageMaxWidth) {
                repeatCount += 1;
            }
            else {
                repeatCount = 0;
            }
        }, 500 * this.animationSpeed);
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.setAllBlockColor = function (rgba) {
        if (rgba === void 0) { rgba = [0, 0, 0, 1]; }
        var target = this.AllBlockColor;
        for (var index = 0; index < target.length; index++) {
            var element = target[index];
            element.color = JSON.parse(JSON.stringify(rgba));
        }
    };
    M_Light_CS.prototype.replaceAllBlockColor = function (AllBlock) {
        for (var index = 0; index < AllBlock.length; index++) {
            this.AllBlockColor[index].color = AllBlock[index].color;
            this.AllBlockColor[index].breathing = AllBlock[index].breathing;
            this.AllBlockColor[index].clearStatus = AllBlock[index].clearStatus;
        }
    };
    M_Light_CS.prototype.setAllBlockAlpha = function (alpha) {
        if (alpha === void 0) { alpha = 0; }
        var target = this.AllBlockColor;
        for (var index = 0; index < target.length; index++) {
            var color = target[index].color;
            if ((color[3] - 0.1) >= 0) {
                color[3] -= 0.1;
            }
            else {
                color[3] = 0;
            }
        }
    };
    M_Light_CS.prototype.mode_reset = function () {
        var target = this.AllBlockColor;
        for (var index = 0; index < target.length; index++) {
            var element = target[index];
            element.color = [0, 0, 0, 0];
        }
    };
    M_Light_CS.prototype.mode_FastRunWithoutTrace = function (colors, isRainbow, blockIndex) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = false; }
        if (blockIndex === void 0) { blockIndex = 37; }
        //colors =[[255,0,0,1],[0,255,0,1],[0,0,255,1]];
        console.log('%c mode_FastRunWithoutTrace', 'color:rgb(255,77,255)', colors, isRainbow);
        if (isRainbow) {
            colors = this.rainbow7Color();
        }
        clearInterval(this.repeater);
        this.currentBlockIndex = blockIndex;
        var repeatCount = 0;
        var StartPoint = this.getNowBlock().coordinateData;
        this.setAllBlockColor([0, 0, 0, 1]);
        var totalStep = 10;
        var horizontalList = {};
        var target = this.AllBlockColor;
        var randomValue = this.getRandom(0, colors.length - 1);
        var step_End = false;
        //this.mode_reset();
        //var c_temp=colors[this.getRandom(0,colors.length-1)];
        horizontalList[this.currentBlockIndex] = {
            color: colors[this.getRandom(0, colors.length - 1)]
        };
        for (var index = 0; index < target.length; index++) {
            var element = target[index];
            var Ysdis = Math.abs(StartPoint.top_Left[1] - element.coordinateData.top_Left[1]);
            if (Ysdis <= 10) {
                horizontalList[index] = {
                    color: colors[this.getRandom(0, colors.length - 1)],
                    nowPos: 0,
                    nowstep: 0,
                    repeatCount: 0,
                    repeatTime: this.getRandom(15, 20),
                };
            }
        }
        console.log('horizontalList', Object.keys(horizontalList));
        this.repeater = setInterval(function () {
            var LIndex = _this.currentBlockIndex - repeatCount;
            var RIndex = _this.currentBlockIndex + repeatCount;
            var resultL = horizontalList[LIndex];
            //horizontalList.find((x) => x == this.currentBlockIndex-repeatCount);
            var resultR = horizontalList[RIndex];
            //horizontalList.find((x) => x == this.currentBlockIndex+repeatCount);
            if (step_End) {
                var tempColors = colors;
                var nextColor = [0, 0, 0, 1];
                var arr = Object.keys(horizontalList);
                for (var index = 0; index < arr.length; index++) {
                    var index_num = parseInt(arr[index]);
                    var temp_block = horizontalList[index_num];
                    if (temp_block.nowStep + 1 <= totalStep) {
                        temp_block.nowStep += 1;
                    }
                    else {
                        temp_block.nowStep = 0;
                        temp_block.repeatCount += 1;
                    }
                    var temp_C = temp_block.color;
                    var temp_colorData = [0, 0, 0, 1];
                    for (var index_23 = 0; index_23 < 3; index_23++) {
                        temp_colorData[index_23] = (temp_C[index_23] * (totalStep - temp_block.nowStep) + nextColor[index_23] * temp_block.nowStep) / totalStep;
                        temp_colorData[index_23] = temp_colorData[index_23] * _this.lightData.brightness / 100;
                    }
                    if (temp_block.repeatCount != 2) {
                        target[index_num].color = temp_colorData;
                    }
                }
                //totalRepeatCount+=1
                if (horizontalList[arr[0]].repeatCount == 2) {
                    step_End = false;
                    clearInterval(_this.repeater);
                }
                return;
            }
            if (resultL == undefined && resultR == undefined) {
                repeatCount = 0;
                step_End = true;
            }
            else {
                console.log('%c mode_FastRunWithoutTrace', 'color:rgb(255,77,255)', _this.lightData.brightness);
                if (resultL != undefined) {
                    var temp_color = JSON.parse(JSON.stringify(horizontalList[LIndex].color));
                    for (var index = 0; index < 3; index++) {
                        temp_color[index] = temp_color[index] * _this.lightData.brightness / 100;
                    }
                    target[LIndex].color = temp_color;
                }
                if (resultR != undefined) {
                    var temp_color = JSON.parse(JSON.stringify(horizontalList[RIndex].color));
                    for (var index = 0; index < 3; index++) {
                        temp_color[index] = temp_color[index] * _this.lightData.brightness / 100;
                    }
                    target[RIndex].color = temp_color;
                }
                ;
                repeatCount += 1;
            }
        }, 35 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_PassWithoutTrace = function (colors, index) {
        var _this = this;
        if (colors === void 0) { colors = [[0, 0, 255, 1]]; }
        if (index === void 0) { index = 20; }
        clearInterval(this.repeater);
        //this.setAllBlockColor([0,0,0,1]);
        var nowStep = 0;
        var totalStep = 30;
        var nextColor = [0, 0, 0, 1];
        var randomColor = colors[this.getRandom(0, colors.length - 1)];
        this.repeater = setInterval(function () {
            _this.setAllBlockColor([0, 0, 0, 1]);
            if (nowStep < totalStep) {
                nowStep += 1;
            }
            else {
                clearInterval(_this.repeater);
            }
            var temp_colorData = [0, 0, 0, 1];
            for (var index_24 = 0; index_24 < 3; index_24++) {
                temp_colorData[index_24] = (randomColor[index_24] * (totalStep - nowStep) + nextColor[index_24] * nowStep) / totalStep;
                temp_colorData[index_24] = temp_colorData[index_24] * _this.lightData.brightness / 100;
            }
            var target = _this.AllBlockColor;
            target[index].color = temp_colorData;
        }, 50 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_Shadow_disappear = function (colors, index) {
        var _this = this;
        if (colors === void 0) { colors = [[0, 0, 255, 1]]; }
        if (index === void 0) { index = 20; }
        clearInterval(this.repeater);
        var randomColor = colors[this.getRandom(0, colors.length - 1)];
        var originalColorValue = [0, 0, 0, 1];
        console.log('%c mode_Shadow_disappear randomColor', 'color:rgb(255,77,255)', originalColorValue);
        var nowStep = 0;
        var totalStep = 30;
        var nextColor = JSON.parse(JSON.stringify(this.AllBlockColor[index].color));
        this.repeater = setInterval(function () {
            //this.setAllBlockColor([0,0,0,1]);
            if (nowStep < totalStep) {
                nowStep += 1;
            }
            else {
                clearInterval(_this.repeater);
            }
            var temp_colorData = [0, 0, 0, 1];
            for (var index_25 = 0; index_25 < 3; index_25++) {
                temp_colorData[index_25] = (originalColorValue[index_25] * (totalStep - nowStep) + nextColor[index_25] * nowStep) / totalStep;
                temp_colorData[index_25] = temp_colorData[index_25] * _this.lightData.brightness / 100;
            }
            var target = _this.AllBlockColor;
            target[index].color = temp_colorData;
        }, 50 * this.animationSpeed);
    };
    M_Light_CS.prototype.rainbow7Color = function () {
        return [[255, 0, 0, 1], [255, 165, 0, 1], [255, 255, 0, 1], [0, 255, 0, 1], [0, 127, 255, 1], [0, 0, 255, 1], [139, 0, 255, 1]];
    };
    M_Light_CS.prototype.PointRotation = function (PointA, PointB) {
        // var Dx = Math.abs(PointB[0] - PointA[0]);
        // var Dy = Math.abs(PointB[1] - PointA[1]);
        var Dx = (PointB[0] - PointA[0]);
        var Dy = (PointB[1] - PointA[1]);
        var DRoation = Math.atan2(Dy, Dx);
        //console.log('PointRotation,Math.atan2', DRoation);
        var WRotation = DRoation / Math.PI * 180;
        //弧度=角度/180*π(PI)
        //(角度=弧度*180/π(PI))
        return WRotation;
    };
    M_Light_CS.prototype.slopeEquation = function (point1, point2) {
        if (point1 === void 0) { point1 = [25, 0]; }
        if (point2 === void 0) { point2 = [320, 400]; }
        //斜率y2-y1/x2-x1;
        var Slope = (point2[1] - point1[1]) / (point2[0] - point1[0]); //x*1 y*1*Slope
        var LinearList = [];
        var temp_x = [point1[0], point1[1]];
        while (temp_x[0] < point2[0] && temp_x[1] < point2[1]) {
            temp_x[0] += 1;
            temp_x[1] += 1 * Slope;
            //console.log('temp_x=',temp_x);
            LinearList.push([temp_x[0], temp_x[1]]);
        }
        return LinearList;
    };
    M_Light_CS.prototype.mode_Diffusion = function (colors) {
        var _this = this;
        if (colors === void 0) { colors = []; }
        colors = [[255, 0, 0, 1]];
        colors = this.rainbow7Color();
        var Brightness = 1;
        // var mode=0;
        // if(colors.length>1){
        //     mode=1;
        // }
        clearInterval(this.repeater);
        this.currentBlockIndex = 32;
        var repeatMin = 5;
        var repeatMax = 200;
        var repeatCount = 0;
        var StartPoint = this.getNowBlock().coordinateData;
        var horizontalList = {};
        var target = this.AllBlockColor;
        var randomValue = this.getRandom(0, colors.length - 1);
        //console.log('setColor', setColor)
        this.mode_reset();
        // horizontalList[this.currentBlockIndex]={
        //        color:this.toCssRGB(colors[this.getRandom(0,colors.length-1)])
        // }
        // console.log('horizontalList', horizontalList)
        var T2 = colors[this.getRandom(0, colors.length - 1)];
        console.log('horizontalList', Object.keys(horizontalList));
        this.repeater = setInterval(function () {
            T2 = colors[_this.getRandom(0, colors.length - 1)];
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var dis = _this.distanceCalculation(StartPoint.center_Point[0], StartPoint.center_Point[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                if (dis < repeatCount * StartPoint.clientWidth) {
                    element.color = T2;
                }
                else {
                    //element.color=this.toCssRGB([0,0,255,0.4]);
                }
            }
            if (repeatCount * StartPoint.clientWidth < _this.imageMaxWidth - StartPoint.clientWidth) {
                repeatCount += 1;
            }
            else {
                repeatCount = 0;
                _this.mode_reset();
            }
        }, 250 * this.animationSpeed);
        // this.repeaterTimeout=if(Brightness>0){
        //     Brightness-=0.01;
        // }
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.getIndexRGBCss = function (i) {
        //console.log('getIndexRGBCss', i)
        var target = this.AllBlockColor;
        if (target[i].color != undefined) {
            return this.toCssRGB(target[i].color);
        }
    };
    M_Light_CS.prototype.getIndexRGBPerkeyCss = function (i) {
        //console.log('getIndexRGBCss', i)
        var target = this.BreathTempArray;
        if (target[i].color != undefined) {
            return this.toCssRGB(target[i].color);
        }
    };
    M_Light_CS.prototype.getRandom = function (min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    };
    ;
    M_Light_CS.prototype.getRgbRandom = function () {
        var RGBcolors = [[255, 0, 0, 0.9], [0, 255, 0, 0.9], [0, 0, 255, 0.9]];
        return RGBcolors[this.getRandom(0, 2)];
    };
    ;
    M_Light_CS.prototype.toCssRGB = function (RGBA) {
        if (RGBA === void 0) { RGBA = [0, 0, 0, 0]; }
        return 'rgb(' + RGBA[0] + ',' + RGBA[1] + ',' + RGBA[2] + ',' + RGBA[3] + ')';
    };
    M_Light_CS.prototype.setDefault = function () { };
    return M_Light_CS;
}());



/***/ }),

/***/ "./src/Module/MacroModule.ts":
/*!***********************************!*\
  !*** ./src/Module/MacroModule.ts ***!
  \***********************************/
/*! exports provided: MacroManager, MacroClass, MacroScriptContent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MacroManager", function() { return MacroManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MacroClass", function() { return MacroClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MacroScriptContent", function() { return MacroScriptContent; });
var SupportData = { KeyMapping: [],
    MouseMapping: []
};
var MacroManager = /** @class */ (function () {
    function MacroManager() {
        var _this = this;
        this.radioOptions = 0;
        this.SupportData_KeyMapping = new Array();
        this.SupportData_MouseMapping = new Array();
        this.nowEditName = "";
        this.tempMacroContent = new MacroScriptContent();
        this.currentMacroClass = 0;
        this.onEditCSName = "";
        this.macroClassItem = [];
        this.onRecord = false;
        this.RSEventArr = [];
        this.startTime = new Date().getTime();
        this.allRecordKeys = {};
        this.SupportData_KeyMapping = SupportData.KeyMapping;
        this.SupportData_MouseMapping = SupportData.MouseMapping;
        // console.log('SupportData_KeyMapping',  this.SupportData_KeyMapping);
        // console.log('SupportData_MouseMapping',  this.SupportData_MouseMapping);
        this.RSEventArr[0] = function (event) {
            console.log('keydown_event', event);
            _this.recordSimulationPressdown(event);
        };
        this.RSEventArr[1] = function (event) {
            console.log('keyup_event', event);
            _this.recordSimulationPressUp(event);
        };
        this.RSEventArr[2] = function (event) {
            //console.log('mousedown_event',event);
            if (event.which == 2) {
                event.preventDefault();
            }
            if (event.target.id != 'IconRecord') {
                _this.recordSimulationPressdown(event);
            }
        };
        this.RSEventArr[3] = function (event) {
            //console.log('mouseup_event',event);
            if (event.target.id != "IconRecord") {
                _this.recordSimulationPressUp(event);
            }
        };
    }
    MacroManager.prototype.recordSimulationPressdown = function (event) {
        if (this.onRecord != true) {
            return;
        }
        //console.log('recordSimulationPressdown', event.type);
        var recordValue = '0';
        if (event.type == 'keydown') {
            recordValue = this.SupportData_KeyMapping.find(function (x) { return x.keyCode == event.keyCode; }).keyCode;
        }
        else if (event.type == 'mousedown') {
            recordValue = this.SupportData_MouseMapping.find(function (x) { return x.keyCode == event.button; }).keyCode; // 0 為 左鍵點擊,1 為 中鍵點擊,2 為 右鍵點擊,
        }
        console.log('recordSimulationPressdown', recordValue, event.type);
        //console.log("是否存在",this.getTarget(recordValue));
        if (this.checkTargetExist(recordValue)) {
            if (this.allRecordKeys[recordValue].isDown == false) {
                this.allRecordKeys[recordValue].isDown = true;
                this.addMacroRadioOptions(recordValue, 1);
            }
        }
        else {
            this.addMacroRadioOptions(recordValue, 1);
            console.log('addKeysEnter', this.allRecordKeys);
            this.allRecordKeys[recordValue] = {
                isDown: true,
            };
        }
    };
    MacroManager.prototype.recordSimulationPressUp = function (event) {
        if (this.onRecord != true) {
            return;
        }
        var recordValue = '0';
        if (event.type == 'keyup') {
            recordValue = this.SupportData_KeyMapping.find(function (x) { return x.keyCode == event.keyCode; }).keyCode;
        }
        else if (event.type == 'mouseup') {
            recordValue = this.SupportData_MouseMapping.find(function (x) { return x.keyCode == event.button; }).keyCode; // 0 為 左鍵點擊,1 為 中鍵點擊,2 為 右鍵點擊,
        }
        console.log('recordSimulationPressUp', recordValue, event.type);
        this.allRecordKeys[recordValue].isDown = false;
        this.addMacroRadioOptions(recordValue, 0);
    };
    MacroManager.prototype.checkTargetExist = function (FindkeyCode) {
        if (this.allRecordKeys[FindkeyCode] != undefined) {
            return true;
        }
        else {
            return false;
        }
    };
    MacroManager.prototype.importMacroClass = function (MacroObj) {
        for (var MClass2 = 0; MClass2 < MacroObj.macroClassItem.length; MClass2++) {
            console.log('MacroObj:', MacroObj.macroClassItem, MClass2);
            var targetClass = MacroObj.macroClassItem[MClass2];
            this.createMacroClass(targetClass.className);
            for (var Mindex = 0; Mindex < targetClass.MacroFiletItem.length; Mindex++) {
                //console.log('MacroFiletItem:', MacroObj[MClass2].MacroFiletItem[Mindex]);                            
                this.macroClassItem[MClass2].ReadFileCreateData(targetClass.MacroFiletItem[Mindex]);
            }
        }
        // console.log("ImportMacroData", InputData);
        // var arr = Object.keys(this);
        // for (let index = 0; index < arr.length; index++) {
        //     //const element = InputData[index];
        //     for (let index = 0; index < arr.length; index++) {
        //         this[arr[index]] = InputData[arr[index]];
        //     }
        // }
    };
    /**
       * 0:Down
       * 1:Time
       * 2:Up
       * //keydownStatus:0 up, 1 down
    */
    MacroManager.prototype.addMacroRadioOptions = function (keyCode, keydownStatus) {
        if (this.tempMacroContent.Data.length >= 80) {
            this.onRecord = false;
            return;
        }
        switch (this.radioOptions) {
            case 0:
                var diffTime = new Date().getTime() - this.startTime;
                this.startTime = new Date().getTime();
                if (this.tempMacroContent.Data.length < 1) {
                    diffTime = 0;
                }
                console.log('%c addMacroRadioOptions', 'background: black; color: white', this.tempMacroContent.Data);
                this.tempMacroContent.createRow(diffTime, keydownStatus, keyCode);
                break;
            case 1:
                this.tempMacroContent.createRow(5, keydownStatus, keyCode);
                break;
            case 2:
                var customMs = document.getElementById("customMs");
                this.tempMacroContent.createRow(parseInt(customMs.value), keydownStatus, keyCode);
                break;
        }
    };
    MacroManager.prototype.addMacroEvent = function () {
        document.addEventListener('keydown', this.RSEventArr[0]);
        document.addEventListener('keyup', this.RSEventArr[1]);
        document.addEventListener('mousedown', this.RSEventArr[2]);
        document.addEventListener('mouseup', this.RSEventArr[3]);
    };
    MacroManager.prototype.removeMacroEvent = function () {
        document.removeEventListener('keydown', this.RSEventArr[0]);
        document.removeEventListener('keyup', this.RSEventArr[1]);
        document.removeEventListener('mousedown', this.RSEventArr[2]);
        document.removeEventListener('mouseup', this.RSEventArr[3]);
    };
    MacroManager.prototype.hasClass = function () {
        if (this.macroClassItem.length > 0) {
            return true;
        }
        else {
            return false;
        }
    };
    MacroManager.prototype.getAllMacroFileData = function () {
        var Tdata = [];
        for (var index = 0; index < this.macroClassItem.length; index++) {
            var reformattedArray = this.macroClassItem[index].MacroFiletItem.map(function (obj) {
                console.log("getAllMacroFileData", obj);
                // var rObj = {
                //     IndexCode:obj.IndexCode,
                //     name:obj.name,
                // }
                // return rObj;
                Tdata.push({
                    IndexCode: obj.IndexCode,
                    name: obj.name,
                });
            });
            console.log("getAllMacroFileData_reformattedArray", reformattedArray);
        }
        console.log("getAllMacroFileData_Tdata", Tdata);
        return Tdata;
    };
    MacroManager.prototype.getClass = function () {
        // console.log("this.currentMacroClass",this.currentMacroClass,this.macroClassItem.length);
        return this.macroClassItem[this.currentMacroClass];
    };
    MacroManager.prototype.createClassMacroFile = function (name) {
        if (name === void 0) { name = "宏類別"; }
        if (this.getClass().MacroFiletItem.length > 50) {
            return;
        }
        console.log("createClassMacroFile_log", name);
        var pass = true;
        var Num = 0;
        var Tname = name;
        while (pass) {
            if (Num > 0) {
                Tname = name + Num;
            }
            if (this.checkNameIsRepeat(Tname)) {
                Num += 1;
            }
            else {
                pass = false;
            }
        }
        this.getClass().MacroFiletItem.push(new MacroScriptContent(Tname));
        this.updeteEditName();
        this.tempMacroContent = this.getClass().getTarget();
    };
    MacroManager.prototype.createMacroClass = function (name) {
        if (name === void 0) { name = "宏類別"; }
        if (this.macroClassItem.length > 19) {
            return;
        }
        console.log("createMacroClass_log=", name);
        this.macroClassItem.push(new MacroClass(this.createNotRepeatClassName(name)));
    };
    MacroManager.prototype.deleteMacroClass = function () {
        //if (this.macroClassItem.length - 1 > 0) {
        var Dindex = this.currentMacroClass;
        if (this.currentMacroClass - 1 >= 0) {
            this.currentMacroClass -= 1;
        }
        this.macroClassItem.splice(Dindex, 1);
        //}
    };
    MacroManager.prototype.createNotRepeatClassName = function (name) {
        var pass = true;
        var Num = 0;
        var Tname = name;
        while (pass) {
            if (Num > 0) {
                Tname = name + Num;
            }
            if (this.checkClassNameIsRepeat(Tname)) {
                Num += 1;
            }
            else {
                pass = false;
            }
        }
        return Tname;
    };
    MacroManager.prototype.createNotRepeatName = function (name) {
        var pass = true;
        var Num = 0;
        var Tname = name;
        while (pass) {
            if (Num > 0) {
                Tname = name + Num;
            }
            if (this.checkNameIsRepeat(Tname)) {
                Num += 1;
            }
            else {
                pass = false;
            }
        }
        return Tname;
    };
    MacroManager.prototype.checkClassNameIsRepeat = function (targetName) {
        for (var index = 0; index < this.macroClassItem.length; index++) {
            var element = this.macroClassItem[index];
            if (element.className == targetName) {
                return true;
            }
        }
        return false;
    };
    MacroManager.prototype.checkNameIsRepeat = function (targetName) {
        for (var index = 0; index < this.macroClassItem.length; index++) {
            var element = this.macroClassItem[index];
            for (var index2 = 0; index2 < element.MacroFiletItem.length; index2++) {
                if (targetName == element.MacroFiletItem[index2].name) {
                    return true;
                }
            }
        }
        return false;
    };
    MacroManager.prototype.cloneClassMacro = function () {
        if (this.getClass().MacroFiletItem.length > 50) {
            return;
        }
        if (this.macroClassItem.length > 0) {
            if (this.getClass().hasFile()) {
                var clone = JSON.parse(JSON.stringify(this.getClass().getTarget()));
                var Tname = clone.name;
                var pass = true;
                var Num = 0;
                while (pass) {
                    if (this.checkNameIsRepeat(Tname + Num)) {
                        Num += 1;
                        //console.log("createMacroTname=");
                    }
                    else {
                        pass = false;
                        Tname = Tname + Num;
                    }
                }
                clone.name = Tname;
                this.getClass().MacroFiletItem.push(clone);
            }
        }
    };
    MacroManager.prototype.updeteEditClassName = function (NewName) {
        var targetName = this.getClass().className;
        if (targetName != NewName) {
            var changeName = this.createNotRepeatClassName(NewName);
            console.log("MacroFileNameChange=" + changeName, targetName);
            this.getClass().className = changeName;
            this.onEditCSName = this.getClass().className;
        }
    };
    MacroManager.prototype.setOnEditCSName = function () {
        this.onEditCSName = this.getClass().className;
    };
    MacroManager.prototype.updeteEditName = function () {
        if (this.getClass().hasFile())
            this.nowEditName = this.getClass().getTarget().name;
    };
    MacroManager.prototype.setDefault = function () {
    };
    return MacroManager;
}());

var MacroClass = /** @class */ (function () {
    function MacroClass(InputclassName) {
        if (InputclassName === void 0) { InputclassName = "未命名"; }
        this.MacroFiletItem = [];
        this.currentChooseMacro = 0;
        this.className = "未命名";
        this.className = InputclassName;
    }
    MacroClass.prototype.intital = function (frequency) {
        this.currentChooseMacro = 0;
    };
    MacroClass.prototype.ImportFileCreateData = function (InputData) {
        console.log("ImportFileCreateData", InputData);
        InputData = JSON.parse(JSON.stringify(InputData));
        var TData = new MacroScriptContent("沒有");
        var arr = Object.keys(TData);
        for (var index = 0; index < arr.length; index++) {
            TData[arr[index]] = InputData[arr[index]];
        }
        TData.IndexCode = new Date().getTime();
        this.MacroFiletItem.push(TData);
        console.log("ImportFileCreateData_PushData", TData, typeof InputData);
    };
    MacroClass.prototype.ReadFileCreateData = function (InputData) {
        console.log("ImportFileCreateData", InputData);
        InputData = JSON.parse(JSON.stringify(InputData));
        var TData = new MacroScriptContent("沒有");
        var arr = Object.keys(TData);
        for (var index = 0; index < arr.length; index++) {
            TData[arr[index]] = InputData[arr[index]];
        }
        this.MacroFiletItem.push(TData);
        console.log("ImportFileCreateData_PushData", TData, typeof InputData);
    };
    MacroClass.prototype.getTarget = function () {
        // console.log("this.currentMacroClass",this.currentMacroClass,this.macroClassItem.length);
        return this.MacroFiletItem[this.currentChooseMacro];
    };
    MacroClass.prototype.hasFile = function () {
        if (this.MacroFiletItem.length > 0) {
            return true;
        }
        else {
            return false;
        }
    };
    MacroClass.prototype.createMacro = function (name) {
        if (name === void 0) { name = "宏檔案"; }
        var pass = true;
        var Tname = name;
        while (pass) {
            if (this.checkNameIsRepeat(Tname)) {
                Tname = Tname + "_";
                console.log("createMacroTname=");
            }
            else {
                pass = false;
            }
        }
        console.log("createMacro創造檔案checkNamePass");
        this.MacroFiletItem.push(new MacroScriptContent(Tname));
    };
    MacroClass.prototype.checkNameIsRepeat = function (targetName) {
        for (var index2 = 0; index2 < this.MacroFiletItem.length; index2++) {
            if (this.MacroFiletItem[index2].name == targetName) {
                return true;
            }
        }
        return false;
    };
    MacroClass.prototype.deleteMacro = function () {
        if (this.hasFile()) {
            if (this.currentChooseMacro > 0) {
                var T = this.currentChooseMacro;
                this.currentChooseMacro -= 1;
                this.MacroFiletItem.splice(T, 1);
            }
            else if (this.currentChooseMacro == 0) {
                this.MacroFiletItem.splice(this.currentChooseMacro, 1);
            }
        }
    };
    MacroClass.prototype.setDefault = function () {
    };
    return MacroClass;
}());

var MacroScriptContent = /** @class */ (function () {
    function MacroScriptContent(InputclassName) {
        if (InputclassName === void 0) { InputclassName = "未命名"; }
        this.currentlySelectiedPosition = 0;
        this.name = "新檔案";
        this.IndexCode = new Date().getTime();
        this.Data = [];
        this.name = InputclassName;
    }
    MacroScriptContent.prototype.ImportMacroData = function (InputData) {
        console.log("ImportMacroData", InputData);
        var arr = Object.keys(this);
        for (var index = 0; index < arr.length; index++) {
            //const element = InputData[index];
            for (var index_1 = 0; index_1 < arr.length; index_1++) {
                this[arr[index_1]] = InputData[arr[index_1]];
            }
        }
    };
    MacroScriptContent.prototype.SaveMacroData = function (InputData) {
        var Input = JSON.parse(JSON.stringify(this.getTarget()));
        console.log("SaveMacroData", Input);
        this.Data = Input;
    };
    MacroScriptContent.prototype.setDataMs = function (ms) {
        if (this.Data[this.currentlySelectiedPosition]) {
            this.Data[this.currentlySelectiedPosition].byDelay = ms;
        }
    };
    MacroScriptContent.prototype.getTarget = function () {
        if (this.Data[this.currentlySelectiedPosition]) {
            return this.Data[this.currentlySelectiedPosition];
        }
    };
    MacroScriptContent.prototype.move_up_row = function () {
        if (this.Data.length == 0) {
            return;
        }
        if (this.currentlySelectiedPosition > 0) {
            var tempVar = JSON.parse(JSON.stringify(this.getTarget()));
            this.Data[this.currentlySelectiedPosition] = this.Data[this.currentlySelectiedPosition - 1];
            this.Data[this.currentlySelectiedPosition - 1] = tempVar;
            this.currentlySelectiedPosition -= 1;
        }
    };
    MacroScriptContent.prototype.move_down_row = function () {
        if (this.Data.length == 0) {
            return;
        }
        if (this.currentlySelectiedPosition != this.Data.length - 1) {
            var tempVar = JSON.parse(JSON.stringify(this.getTarget()));
            this.Data[this.currentlySelectiedPosition] = this.Data[this.currentlySelectiedPosition + 1];
            this.Data[this.currentlySelectiedPosition + 1] = tempVar;
            this.currentlySelectiedPosition += 1;
        }
    };
    MacroScriptContent.prototype.createInsert = function () {
        //const T1 = this.Data.splice(this.currentlySelectiedPosition,1)
        //array1.concat(array2);
        var c1 = {
            byDelay: 5,
            bKeyDown: 1,
            byKeyCode: 65,
        };
        var c2 = {
            byDelay: 5,
            bKeyDown: 0,
            byKeyCode: 65,
        };
        // this.createRow(5,1,65);
        // this.createRow(5,0,65);
        this.Data.splice(this.currentlySelectiedPosition + 1, 0, c1, c2);
    };
    //MacroIcon 012=Down=>Time=>Up
    MacroScriptContent.prototype.createRow = function (byDelay, type, keyCodeInt) {
        if (byDelay === void 0) { byDelay = 0; }
        if (type === void 0) { type = 0; }
        if (keyCodeInt === void 0) { keyCodeInt = 0; }
        this.Data.push({
            byDelay: byDelay,
            bKeyDown: type,
            byKeyCode: keyCodeInt,
        });
        setTimeout(function () {
            var element = document.getElementById("MacroContentArea");
            var _1vw = Math.round(window.innerWidth / 100);
            var _1vh = Math.round(window.innerHeight / 100);
            if (element) {
                element.scrollBy(0, element.clientHeight);
            }
        }, 50);
    };
    MacroScriptContent.prototype.deleteRow = function () {
        var Dindex = this.currentlySelectiedPosition;
        this.Data.splice(Dindex, 1);
    };
    MacroScriptContent.prototype.clear = function () {
        this.Data = new Array;
    };
    MacroScriptContent.prototype.setDefault = function () {
    };
    return MacroScriptContent;
}());



/***/ }),

/***/ "./src/Module/ProgressBar_Module.ts":
/*!******************************************!*\
  !*** ./src/Module/ProgressBar_Module.ts ***!
  \******************************************/
/*! exports provided: ProgressBar */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProgressBar", function() { return ProgressBar; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var ProgressBar = /** @class */ (function () {
    function ProgressBar() {
        this.percent_TSVar = 0;
    }
    ProgressBar.prototype.addProgressBarEvent = function () {
        var _this = this;
        document.addEventListener('keydown', function (event) {
            console.log(event);
            // if(this.percent_TSVar+1>100){
            //     this.percent_TSVar=0;
            // }
            if (event.key == "ArrowUp") {
                if (_this.percent_TSVar + 1 > 100) {
                    _this.percent_TSVar = 0;
                }
                else {
                    _this.percent_TSVar += 1;
                }
                _this.setRoundProgress_js(_this.percent_TSVar);
            }
            if (event.key == "ArrowDown") {
                _this.percent_TSVar -= 1;
                _this.setRoundProgress_js(_this.percent_TSVar);
            }
        });
    };
    ProgressBar.prototype.setRoundProgress_js = function (percent) {
        var TargetTs = this;
        //var percent = 0;
        //反正CSS3中的border-radius属性IE8是不支持了，所以这里就用新方法吧getElementsByClassName()走起
        //percent=TargetTs.percent_TSVar;
        console.log('setRoundProgress_js', percent);
        // Element.prototype.css= function (property, value) {
        //     if (value) {
        //         var index = property.indexOf('-');
        //         if (index != -1) {
        //             var char = property.charAt(index + 1).toUpperCase();
        //             property.replace(/(-*){1}/, char);
        //         }
        //         this.style[property] = value;
        //     } else {
        //         return window.getComputedStyle(this).getPropertyValue(property);
        //     }
        // }
        // Element.prototype.css3 = function (property, value) {
        //     if (value) {
        //         property = capitalize(property.toLowerCase());
        //         this.style['webkit' + property] = value;
        //         this.style['Moz' + property] = value;
        //         this.style['ms' + property] = value;
        //         this.style['O' + property] = value;
        //         this.style[property.toLowerCase()] = value;
        //     } else {
        //         return window.getComputedStyle(this).getPropertyValue(
        //             ('webkit' + property) || ('Moz' + property) || ('ms' + property) || ('O' + property) || property);
        //     }
        //     //首字母大写
        //     function capitalize(word) {
        //         return word.charAt(0).toUpperCase() + word.slice(1);
        //     }
        // }
        setRoundProgress(percent);
        //window.onload = 
        function setRoundProgress(percent) {
            console.log('setRoundProgress', percent);
            var circleBar = document.getElementsByClassName('circle-bar')[0];
            //percent      = parseInt(circleBar.getElementsByClassName('percent')[0].firstChild.nodeValue);
            var color = circleBar.css('background-color', null);
            var left_circle = circleBar.getElementsByClassName('circle-bar-left')[0];
            var right_circle = circleBar.getElementsByClassName('circle-bar-right')[0];
            if (percent == 0) {
                //percent=percent>100?0:percent;
                //percent = 0;
                right_circle.css3('transform', 'rotate(0deg)'); //右侧不旋转
                left_circle.css3('transform', 'rotate(0deg)');
                right_circle.css('background-color', '#eee'); //背景色设置为进度条的颜色
                left_circle.css('background-color', '#eee'); //背景色设置为进度条的颜色
            }
            circleBar.getElementsByClassName('percent')[0].firstChild.nodeValue = percent + "%";
            if (percent <= 50) {
                var rotate = 'rotate(' + (percent * 3.6) + 'deg)';
                right_circle.css3('transform', rotate);
            }
            else {
                var rotate = 'rotate(' + ((percent - 50) * 3.6) + 'deg)';
                right_circle.css('background-color', color); //背景色设置为进度条的颜色
                right_circle.css3('transform', 'rotate(0deg)'); //右侧不旋转
                left_circle.css3('transform', rotate); //左侧旋转
            }
        }
    };
    ProgressBar = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [])
    ], ProgressBar);
    return ProgressBar;
}());



/***/ }),

/***/ "./src/Module/SharesFunction.ts":
/*!**************************************!*\
  !*** ./src/Module/SharesFunction.ts ***!
  \**************************************/
/*! exports provided: SharesFunction, count_boolean, CreateFakeArray, getMatchedCSS, getElementCSS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharesFunction", function() { return SharesFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "count_boolean", function() { return count_boolean; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateFakeArray", function() { return CreateFakeArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMatchedCSS", function() { return getMatchedCSS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getElementCSS", function() { return getElementCSS; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var SharesFunction = /** @class */ (function () {
    function SharesFunction() {
        this.recordClientX = 0;
        this.recordClientY = 0;
        SharesFunction_1.instance = this;
    }
    SharesFunction_1 = SharesFunction;
    SharesFunction.getInstance = function () {
        if (this.instance) {
            return this.instance;
        }
        else {
            this.instance = new SharesFunction_1();
            console.log('%c SharesFunction_getInstance_err', 'background: blue; color: red');
            return this.instance;
        }
    };
    SharesFunction.prototype.logCustom = function (Message, data) {
        console.log("SharesFunction_log", Message, data);
    };
    SharesFunction.prototype.get_Windows_Vw_Vh = function () {
        var _1vw = Math.round(window.innerWidth / 100);
        var _1vh = Math.round(window.innerHeight / 100);
        var arr = [_1vw, _1vh];
        return arr;
    };
    SharesFunction.prototype.TipUIMessage = function (setMessage, targetDOM) {
        var BtnTextTip = document.getElementById("BtnTextTip");
        //console.log("TipUIMessage,targetDOM",targetDOM);
        BtnTextTip.children[0].innerHTML = "&nbsp;" + setMessage + "&nbsp;";
        BtnTextTip.style.left =
            //this.recordClientX
            targetDOM.clientX + "px";
        BtnTextTip.style.top =
            //this.recordClientY
            targetDOM.clientY + "px";
        BtnTextTip.style.display = "block";
        targetDOM.srcElement.addEventListener('mouseleave', function (e) {
            //console.log("TipUIMessage,targetDOM_mouseleave",targetDOM);
            BtnTextTip.style.display = "none";
        });
    };
    SharesFunction.prototype.TipUIHide = function () {
        var BtnTextTip = document.getElementById("BtnTextTip");
        BtnTextTip.style.display = "none";
        //targetDOM.
    };
    SharesFunction.prototype.addMousePosition = function () {
        var _this = this;
        document.addEventListener('mousemove', function (e) {
            console.log("addMousePosition", e);
            _this.recordClientX = e.clientX;
            _this.recordClientY = e.clientY;
        });
    };
    SharesFunction.instance = undefined;
    SharesFunction = SharesFunction_1 = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [])
    ], SharesFunction);
    return SharesFunction;
    var SharesFunction_1;
}());

function count_boolean(inputArr, type) {
    if (inputArr === void 0) { inputArr = []; }
    if (type === void 0) { type = false; }
    var count = 0;
    inputArr.forEach(function (element) {
        if (element == type) {
            count += 1;
        }
    });
    return count;
}
function CreateFakeArray(length) {
    if (length === void 0) { length = 0; }
    return Array(length).fill(4);
}
function getMatchedCSS(targetDiv, name) {
    //var ax=new SharesFunction();
    //console.log("getMatchedCSS",targetDiv);
    var target = document.getElementById(targetDiv);
    return parseInt(getComputedStyle(target)[name]);
}
function getElementCSS(targetDiv, name) {
    //var ax=new SharesFunction();
    //console.log("getMatchedCSS",targetDiv);
    //var target=document.getElementById(targetDiv);
    return parseInt(getComputedStyle(targetDiv)[name]);
}
//檢查目標是否在陣列內
function checkExist(array, findTarget) {
    //console.log("checkExistArr",ary,findTarget);
    for (var index = 0; index < array.length; index++) {
        var element = array[index];
        if (element == findTarget) {
            console.log("存在值", element, findTarget);
            return true;
        }
    }
    return false;
}


/***/ }),

/***/ "./src/Module/TSImportManager.ts":
/*!***************************************!*\
  !*** ./src/Module/TSImportManager.ts ***!
  \***************************************/
/*! exports provided: ColorModule, Wave, APModeModule, MacroScriptContent, MacroManager, LedChainFramesManager, KeyBoardManager, KeyBoardStyle, M_Built_ineffect, KeyAssignManager, count_boolean, CreateFakeArray, SharesFunction, getMatchedCSS, AssociateManager, ProgressBar, EffectCenter, KeyShortcut, AlertDevice, EventManager, ImgPathList, i18nManager, M_Light_CS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _ColorVar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ColorVar */ "./src/Module/ColorVar.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ColorModule", function() { return _ColorVar__WEBPACK_IMPORTED_MODULE_0__["ColorModule"]; });

/* harmony import */ var _APModeModule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./APModeModule */ "./src/Module/APModeModule.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Wave", function() { return _APModeModule__WEBPACK_IMPORTED_MODULE_1__["Wave"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "APModeModule", function() { return _APModeModule__WEBPACK_IMPORTED_MODULE_1__["APModeModule"]; });

/* harmony import */ var _MacroModule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MacroModule */ "./src/Module/MacroModule.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MacroScriptContent", function() { return _MacroModule__WEBPACK_IMPORTED_MODULE_2__["MacroScriptContent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MacroManager", function() { return _MacroModule__WEBPACK_IMPORTED_MODULE_2__["MacroManager"]; });

/* harmony import */ var _CustomLedChainFrames__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CustomLedChainFrames */ "./src/Module/CustomLedChainFrames.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LedChainFramesManager", function() { return _CustomLedChainFrames__WEBPACK_IMPORTED_MODULE_3__["LedChainFramesManager"]; });

/* harmony import */ var _KeyBoardManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./KeyBoardManager */ "./src/Module/KeyBoardManager.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "KeyBoardManager", function() { return _KeyBoardManager__WEBPACK_IMPORTED_MODULE_4__["KeyBoardManager"]; });

/* harmony import */ var _KeyBoardStyle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./KeyBoardStyle */ "./src/Module/KeyBoardStyle.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "KeyBoardStyle", function() { return _KeyBoardStyle__WEBPACK_IMPORTED_MODULE_5__["KeyBoardStyle"]; });

/* harmony import */ var _M_Built_ineffect__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./M_Built_ineffect */ "./src/Module/M_Built_ineffect.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "M_Built_ineffect", function() { return _M_Built_ineffect__WEBPACK_IMPORTED_MODULE_6__["M_Built_ineffect"]; });

/* harmony import */ var _KeyAssignManager__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./KeyAssignManager */ "./src/Module/KeyAssignManager.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "KeyAssignManager", function() { return _KeyAssignManager__WEBPACK_IMPORTED_MODULE_7__["KeyAssignManager"]; });

/* harmony import */ var _SharesFunction__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./SharesFunction */ "./src/Module/SharesFunction.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "count_boolean", function() { return _SharesFunction__WEBPACK_IMPORTED_MODULE_8__["count_boolean"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CreateFakeArray", function() { return _SharesFunction__WEBPACK_IMPORTED_MODULE_8__["CreateFakeArray"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SharesFunction", function() { return _SharesFunction__WEBPACK_IMPORTED_MODULE_8__["SharesFunction"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getMatchedCSS", function() { return _SharesFunction__WEBPACK_IMPORTED_MODULE_8__["getMatchedCSS"]; });

/* harmony import */ var _AssociateData__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./AssociateData */ "./src/Module/AssociateData.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AssociateManager", function() { return _AssociateData__WEBPACK_IMPORTED_MODULE_9__["AssociateManager"]; });

/* harmony import */ var _ProgressBar_Module__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ProgressBar_Module */ "./src/Module/ProgressBar_Module.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ProgressBar", function() { return _ProgressBar_Module__WEBPACK_IMPORTED_MODULE_10__["ProgressBar"]; });

/* harmony import */ var _EffectCenter__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./EffectCenter */ "./src/Module/EffectCenter.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EffectCenter", function() { return _EffectCenter__WEBPACK_IMPORTED_MODULE_11__["EffectCenter"]; });

/* harmony import */ var _KeyShortcut__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./KeyShortcut */ "./src/Module/KeyShortcut.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "KeyShortcut", function() { return _KeyShortcut__WEBPACK_IMPORTED_MODULE_12__["KeyShortcut"]; });

/* harmony import */ var _AlertDevice__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./AlertDevice */ "./src/Module/AlertDevice.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AlertDevice", function() { return _AlertDevice__WEBPACK_IMPORTED_MODULE_13__["AlertDevice"]; });

/* harmony import */ var _EventManager__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./EventManager */ "./src/Module/EventManager.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EventManager", function() { return _EventManager__WEBPACK_IMPORTED_MODULE_14__["EventManager"]; });

/* harmony import */ var _ImgPath__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ImgPath */ "./src/Module/ImgPath.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ImgPathList", function() { return _ImgPath__WEBPACK_IMPORTED_MODULE_15__["ImgPathList"]; });

/* harmony import */ var _i18n__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./i18n */ "./src/Module/i18n.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "i18nManager", function() { return _i18n__WEBPACK_IMPORTED_MODULE_16__["i18nManager"]; });

/* harmony import */ var _M_Light_CS__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./M_Light_CS */ "./src/Module/M_Light_CS.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "M_Light_CS", function() { return _M_Light_CS__WEBPACK_IMPORTED_MODULE_17__["M_Light_CS"]; });
















//export { FormControl } from '@angular/forms';



//export { DeviceService } from '../services/device/DeviceService';


/***/ }),

/***/ "./src/Module/i18n.ts":
/*!****************************!*\
  !*** ./src/Module/i18n.ts ***!
  \****************************/
/*! exports provided: i18nManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i18nManager", function() { return i18nManager; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
//1暫定為真值

var i18n_File = __webpack_require__(/*! ../i18n/i18n_Localization */ "./src/i18n/i18n_Localization.js");
//let i18n_File ={i18n_Localization:[]}
// Simon:
// 英文版本不显示微信微博
// Simon:
// 中文版本不显示FB,IG,推特
//FB IG Mail 论坛 官网 推特 微信 微博
var lostList = [];
var i18nManager = /** @class */ (function () {
    function i18nManager() {
        this.previousLangindex = 0;
        this.onUsingLangindex = 0;
        this.SW_Version = '1.0.0.0';
        this.autoStart = [true, true]; //0為狀態假值 1為真值
        this.recovery = [false, false]; //0為狀態假值 1為真值
        //currentLanguagesTxt ='EN' //DE德國
        this.langList = ['EN', 'CH', 'CN'];
        i18nManager_1.instance = this;
    }
    i18nManager_1 = i18nManager;
    i18nManager.getInstance = function () {
        if (this.instance) {
            return this.instance;
        }
        else {
            this.instance = new i18nManager_1();
            console.log('%c i18nManager_getInstance_err', 'background: blue; color: red', i18n_File);
            return this.instance;
        }
    };
    i18nManager.prototype.ImportClassData = function (InputData) {
        console.log("Import_i18nManager_ClassData", InputData);
        var arr = Object.keys(this);
        console.log("Object.keys", arr);
        try {
            for (var index = 0; index < arr.length; index++) {
                if (arr[index] != "langList") {
                    this[arr[index]] = InputData[arr[index]];
                }
            }
        }
        catch (error) {
            alert('Import_i18nManager_ClassData_Error');
        }
    };
    i18nManager.prototype.setOnUsingLangindex = function (setIndex) {
        this.previousLangindex = this.onUsingLangindex;
        this.onUsingLangindex = setIndex;
    };
    i18nManager.prototype.setlangList = function (setLangList) {
        if (setLangList) {
            this.langList = [];
        }
    };
    i18nManager.prototype.geti18nType = function () {
        var target = this.langList[this.onUsingLangindex];
        if (target) {
            //console.log('geti18nType',target);
            return target;
        }
        else {
            console.log('geti18nType_null', this.langList, this.onUsingLangindex);
        }
    };
    i18nManager.prototype.getTarget = function (keyName) {
        if (i18n_File.i18n_Localization[keyName] != undefined) {
            var T = i18n_File.i18n_Localization[keyName][this.geti18nType()];
            //console.log('i18n_Localization[keyName]',keyName,this.onUsingLangindex,T,this.langList);
            return T;
        }
        if (lostList.find(function (e) { return e == keyName; })) {
        }
        else {
            console.log('Lost_i18n_Localization[keyName]', keyName);
        }
        lostList.push(keyName);
        return '';
    };
    i18nManager.prototype.updateSettingValue = function () {
        this.autoStart[1] = this.autoStart[0];
        this.recovery[1] = this.recovery[0];
    };
    i18nManager.prototype.back = function () {
        this.onUsingLangindex = this.previousLangindex;
        this.autoStart[0] = this.autoStart[1];
        this.recovery[0] = this.recovery[1];
    };
    i18nManager.prototype.onOpenSystemSetting = function () {
        this.previousLangindex = this.onUsingLangindex;
    };
    i18nManager.instance = undefined;
    i18nManager = i18nManager_1 = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [])
    ], i18nManager);
    return i18nManager;
    var i18nManager_1;
}());



/***/ }),

/***/ "./src/app/ColorPickerUI/ColorTest.css":
/*!*********************************************!*\
  !*** ./src/app/ColorPickerUI/ColorTest.css ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n#color_RGBADiv{\r\n    width: 40%;\r\n    height: auto;\r\n    position: absolute;\r\n    left: 62%;\r\n    top: 32%;\r\n    display: flex;\r\n    color: white;\r\n    flex-direction: column;\r\n}\r\n.RGBATextStyle{\r\n    margin-top: 10px;\r\n   \r\n   \r\n}\r\n:host{\r\n    width: 100%;height:100%;\r\n    background-color: #45c1a6;\r\n    opacity: 0.8;\r\n    background-image:  linear-gradient(#cd1ef9 1px, transparent 1px), linear-gradient(to right, #cd1ef9 1px, #45c1a6 1px);\r\n    background-size: 20px 20px;\r\n}\r\n/*#region ColorPicker*/\r\n#color-picker-container{\r\n    left: 54%;position: absolute;z-index: 2;top: 72%;height: 27.5%;width: 24.7%;display: block;\r\n}\r\n.PickingArea {\r\n\t/* background: url('https://mdn.mozillademos.org/files/5707/picker_mask_200.png') center center;\r\n\t background: -moz-linear-gradient(bottom, #000 0%, rgba(0, 0, 0, 0) 100%),\r\n\t \t\t\t-moz-linear-gradient(left, #FFF 0%, rgba(255, 255, 255, 0) 100%);\r\n     background:-webkit-linear-gradient(top, #000 0%, #fff0 100%),-webkit-linear-gradient(right, #fff0 0%, #fff 100%);\r\n    background:-webkit-linear-gradient(top, #fff 0%, #fff0 50%, #0000 50%, #000 100%), -webkit-linear-gradient(left, #808080 0%, #80808000 100%); */\r\n    background-color: #F00;\r\n    position: absolute;\r\n    height: 150px;\r\n    width: 150px;\r\n    background-size: 100% 100%;\r\n    border-radius: 3px;\r\n    background: linear-gradient(to bottom, hsl(0, 0%, 100%) 0%, hsla(0, 0%, 100%, 0) 50%, hsla(0, 0%, 0%, 0) 50%, hsl(0, 0%, 0%) 100%), linear-gradient(to right, hsl(0, 0%, 50%) 0%, hsla(0, 0%, 50%, 0) 100%);\r\n}\r\ninput[type=\"range\"]#ColorSliderH:focus {\r\n    outline: none;\r\n}\r\ninput[type=\"range\"]#ColorSliderH::-webkit-slider-thumb {\r\n    height: 1.6vw;\r\n    width: 4%;\r\n    background-repeat: no-repeat;\r\n    background-image: url(/image/skin/colorBarH_ico.png);\r\n    -webkit-appearance: none;\r\n    background-size: 100% 100%;\r\n}\r\ninput[type=\"range\"]#ColorSliderS::-webkit-slider-thumb {\r\n    height: 10px;\r\n    width: 5px;\r\n    background-repeat:no-repeat;\r\n    background-image:url('/image/skin/colorBarH_ico.png');\r\n}\r\ninput[type=\"range\"]#ColorSliderV::-webkit-slider-thumb {\r\n    height: 10px;\r\n    width: 5px;\r\n    background-repeat:no-repeat;\r\n    background-image:url('/image/skin/colorBarH_ico.png');\r\n\r\n}\r\ninput[type=radio] ,\r\ninput[type=checkbox]{\r\n    border-radius: 15px;\r\n    -webkit-appearance: none;\r\n    width: 13px;\r\n    height: 13px;\r\n    outline: none;\r\n}\r\ninput[type=radio]:checked {\r\n    background: rgb(255,87,0);\r\n\r\n}\r\ninput[type=radio] :before,\r\ninput[type=checkbox] :before{\r\n  border:1px solid #777;\r\n  background: rgb(255,87,0);\r\n}\r\n#ColorSliderH{\r\n\r\n    position: absolute;\r\n    top: 24%;\r\n    left: 29%;\r\n    width: 150px;\r\n    height: 1.1vw;\r\n    background-color: #0000;\r\n    -webkit-transform: rotate(-90deg);\r\n            transform: rotate(-90deg);\r\n    background-image: url(/image/skin/colorBarH.png);\r\n    -webkit-appearance: none;\r\n    background-size: 100% 100%;\r\n    background-repeat: no-repeat;\r\n}\r\n#ColorSliderH.CustomH2{\r\n    position: absolute;\r\n    top: 90%;\r\n    left: 0%;\r\n    width: 14.9VW;\r\n    height: 1.2vw;\r\n    background-color: #0000;\r\n    -webkit-transform: rotate(0deg);\r\n            transform: rotate(0deg);\r\n    background-image: url(/image/skin/colorBarH.png);\r\n    -webkit-appearance: none;\r\n    background-size: 100% 100%;\r\n    background-repeat: no-repeat;\r\n}\r\n#ColorSliderS{\r\n    position:absolute ;\r\n    top: 14%;\r\n    left: 54%;\r\n    width: 41%;\r\n    height: 10%;\r\n    /* background: -webkit-linear-gradient(left,#ffffff,black); */\r\n}\r\n#ColorSliderV{\r\n    position: absolute;\r\n    top: 26%;\r\n    left: 54%;\r\n    width: 41%;\r\n    height: 10%;\r\n    /* background: -webkit-linear-gradient(left,#ffffff,black); */\r\n}\r\n.colorBase{\r\n    width: 1.2vw;\r\n    border-radius: 10px;\r\n    height: 1.2vw;\r\n    border: 1px #2e2f2e solid;\r\n}\r\n.colorBaseList{\r\n    left: 62%;\r\n    top: 6%;\r\n    width: 14vw;\r\n    height: 6vh;\r\n    position: absolute;\r\n    z-index: 9999;\r\n    display: flex;\r\n    bottom: 7%;\r\n    flex-direction: row;\r\n    /* background: #95fd6c; */\r\n    flex-wrap: wrap;\r\n}\r\n.AdvancedColorBase{\r\n    float: left;\r\n    background-color: #c7cc33;\r\n    width: 1.8vw;\r\n    height: 1.8vw;\r\n    border: 1px solid #2e2f2e;\r\n    margin-bottom: 3px;\r\n    margin-left: 3px;\r\n    border-radius: 13px;\r\n}\r\n.circle {\r\n    width: 1vh;\r\n    height: 1vh;\r\n    background: transparent;\r\n    position: absolute;\r\n    pointer-events: none;\r\n    border: 1px solid blue;\r\n    border-radius: 50%;\r\n\r\n}\r\n/*#endregion ColorPicker*/\r\n\r\n\r\n\r\n"

/***/ }),

/***/ "./src/app/ColorPickerUI/ColorTest.html":
/*!**********************************************!*\
  !*** ./src/app/ColorPickerUI/ColorTest.html ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "   <div *ngIf=\"this.CurrentPageName=='LIGHTINGSETTING'\"\r\n      [style.display]=\"this.M_Light_APMode.getTarget().name != 'Fire'?'block': 'none'\" id=\"color-picker-container\">\r\n      <div id=\"LedColorPickingArea\" class=\"PickingArea\" [style.background-color]=\"LedColor.gradientBGcolor\">\r\n         <div id=\"LedColorCircle\" class=\"circle\">\r\n         </div>\r\n\r\n      </div>\r\n      <input id=\"ColorSliderH\" type=\"range\" min=\"0\" max=\"359\" step=\"1\" [(ngModel)]=\"LedColor.Hue\"\r\n         (ngModelChange)='LedColorhueChange()'>\r\n      <div id=\"color_RGBADiv\">\r\n         <div id=\"RGBA_Red\" class=\"RGBATextStyle\">\r\n            R:\r\n            <input class=\"color_quantity\" type=\"number\" max=\"255\" min=\"0\"\r\n               [(ngModel)]=\"LedColor.RGBA_value[0]\" (blur)=\"updateLedColorRGB()\">\r\n         </div>\r\n         <div id=\"RGBA_Green\" class=\"RGBATextStyle\">\r\n            G:\r\n            <input class=\"color_quantity\" type=\"number\" max=\"255\" min=\"0\"\r\n               [(ngModel)]=\"LedColor.RGBA_value[1]\" (blur)=\"updateLedColorRGB()\"\r\n               onkeyup=\"value=value.replace(/[^\\d]/g,'');if(value>255){value=255};if(value<1){value=0}\">\r\n         </div>\r\n         <div id=\"RGBA_Blue\" class=\"RGBATextStyle\">\r\n            B:\r\n            <input class=\"color_quantity\" type=\"number\" max=\"255\" min=\"0\"\r\n               [(ngModel)]=\"LedColor.RGBA_value[2]\" (blur)=\"updateLedColorRGB()\"\r\n               onkeyup=\"value=value.replace(/[^\\d]/g,'');if(value>255){value=255};if(value<1){value=0}\">\r\n         </div>\r\n      </div>\r\n\r\n      <div class=\"colorBaseList\">\r\n         <div *ngFor=\"let item of M_Light_APMode.getTarget().colors ;let i = index\" class=\"colorBase\"\r\n            (click)=\"LedColor.onclickColorDefault($event.target,i)\" id=\"colorBase{{i}}\"\r\n            [style.background-color]=\"M_Light_APMode.getTarget().colors[i]\">\r\n         </div>\r\n      </div>\r\n\r\n\r\n   </div>\r\n\r\n"

/***/ }),

/***/ "./src/app/ColorPickerUI/ColorTest.ts":
/*!********************************************!*\
  !*** ./src/app/ColorPickerUI/ColorTest.ts ***!
  \********************************************/
/*! exports provided: ColorTestComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColorTestComponent", function() { return ColorTestComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _Module_TSImportManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Module/TSImportManager */ "./src/Module/TSImportManager.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var ColorTestComponent = /** @class */ (function () {
    function ColorTestComponent(router) {
        //this.router.navigate(['KeyBoard_RGB'], {});
        this.router = router;
        this.newcomponent = "Entered in new component created";
        this.CurrentPageName = "LIGHTINGSETTING";
        this.LedColor = new _Module_TSImportManager__WEBPACK_IMPORTED_MODULE_1__["ColorModule"]("LedColor");
        this.M_Light_APMode = new _Module_TSImportManager__WEBPACK_IMPORTED_MODULE_1__["APModeModule"](1);
        this.Built_inColor = new _Module_TSImportManager__WEBPACK_IMPORTED_MODULE_1__["ColorModule"]("Built_inColor");
        this.colorPickerFnArrP1 = [];
    }
    ColorTestComponent.prototype.ngOnInit = function () {
    };
    ColorTestComponent.prototype.ngAfterViewInit = function () {
        this.addColor_PickerEvent();
    };
    ColorTestComponent.prototype.LedColorhueChange = function () {
        this.updateColorBlock(); //by hueChange 
    };
    ColorTestComponent.prototype.addColor_PickerEvent = function () {
        var _this = this;
        console.log('%c addColor_PickerEvent', 'background: black; color: white', this.colorPickerFnArrP1);
        this.colorPickerFnArrP1[1] = function (oEvent) {
            switch (_this.CurrentPageName) {
                case "LIGHTINGSETTING":
                    _this.LedColor.mousemove(oEvent);
                    break;
                case "Built-ineffects":
                    _this.Built_inColor.mousemove(oEvent);
                    break;
            }
            _this.updateColorBlock(); //by colorPicker          
        };
        this.colorPickerFnArrP1[0] = function (oEvent) {
            switch (_this.CurrentPageName) {
                case "LIGHTINGSETTING":
                    _this.LedColor.mousedown(oEvent);
                    break;
                case "Built-ineffects":
                    _this.Built_inColor.mousedown(oEvent);
                    break;
            }
            _this.updateColorBlock(); //by colorPicker 
            document.addEventListener("mousemove", _this.colorPickerFnArrP1[1]);
        };
        document.addEventListener("mouseup", function () {
            document.removeEventListener("mousemove", _this.colorPickerFnArrP1[1]);
        });
        var parentDiv;
        switch (this.CurrentPageName) {
            case "LIGHTINGSETTING":
                parentDiv = this.LedColor.getParentDiv();
                break;
            case "Built-ineffects":
                parentDiv = this.Built_inColor.getParentDiv();
                break;
        }
        parentDiv.removeEventListener("mousedown", this.colorPickerFnArrP1[0]);
        parentDiv.addEventListener("mousedown", this.colorPickerFnArrP1[0]);
    };
    ColorTestComponent.prototype.updateLedColorRGB = function () {
        this.LedColor.update_RGBA_value();
        this.M_Light_APMode.getTarget().colors[this.LedColor.currentRecordIndex] = this.LedColor.Hex;
        console.log('%c updateLedColorRGB', 'background: red; color: white', this.LedColor);
    };
    ColorTestComponent.prototype.updateColorBlock = function () {
        //var target=LedColor;updateLedColorRGBupdateLedColorRGB
        switch (this.CurrentPageName) {
            case "LIGHTINGSETTING":
                this.LedColor.HSL_RGB_HexSet();
                this.LedColor.setGradientBGcolor();
                this.M_Light_APMode.getTarget().colors[this.LedColor.currentRecordIndex] = this.LedColor.Hex;
                //this.setAppModeToServer('byP1');//by updateColorBlock
                break;
            case "Built-ineffects":
                //   this.Built_inColor.HSL_RGB_HexSet();
                //   this.Built_inColor.setGradientBGcolor(); 
                //   // this.Built_ineffect.getTarget().colors[this.Built_inColor.currentRecordIndex]=this.Built_inColor.getRGBA();
                //   this.Built_ineffect.getTarget().currentColorsIndex=this.Built_inColor.currentRecordIndex;
                //   this.refreshM_Light_BuiltIn();
                break;
        }
    };
    ColorTestComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-ColorTest',
            template: __webpack_require__(/*! ./ColorTest.html */ "./src/app/ColorPickerUI/ColorTest.html"),
            styles: [__webpack_require__(/*! ./ColorTest.css */ "./src/app/ColorPickerUI/ColorTest.css")],
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"]])
    ], ColorTestComponent);
    return ColorTestComponent;
}());



/***/ }),

/***/ "./src/app/DemoListUI/DemoListUI.component.css":
/*!*****************************************************!*\
  !*** ./src/app/DemoListUI/DemoListUI.component.css ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "li:active {\r\n    color: red;\r\n}\r\n\r\nli{\r\n    color: blue;\r\n    margin: 10px 0;\r\n}"

/***/ }),

/***/ "./src/app/DemoListUI/DemoListUI.component.html":
/*!******************************************************!*\
  !*** ./src/app/DemoListUI/DemoListUI.component.html ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\n  <!-- <div *ngFor=\"let item of this.router.config; let i = index\" class=\"NumKeyBindSourceItem\">\n    <div style=\"position: absolute;left: 15%;user-select: none;\" data-keyTitle=\"Key\">{{item}}</div>\n  </div> -->\n\n  <ul  class=\"list-group\">\n    <li *ngFor=\"let item of customRouteList ;let i = index\" [style.background-color]=\"selectPageIndex==i?'rgb(153,255,255)':'rgb(255,255,255)'\"\n    (click)=\"this.router.navigate(['/'+item.path])\">\n    {{item.path}} \n    </li>\n    <!-- <li routerLink=\"/ColorTest\" routerLinkActive=\"active\">ColorTest</li>\n    <li routerLink=\"/KeyBoard_RGB\" routerLinkActive=\"active\" >KeyBoard_RGB</li>\n    <li routerLink=\"/ScrollDemo1\" routerLinkActive=\"active\">ScrollDemo1</li>\n    <li routerLink=\"/TableDemo1\" routerLinkActive=\"active\">TableDemo1</li> -->\n  </ul>"

/***/ }),

/***/ "./src/app/DemoListUI/DemoListUI.component.ts":
/*!****************************************************!*\
  !*** ./src/app/DemoListUI/DemoListUI.component.ts ***!
  \****************************************************/
/*! exports provided: DemoListUIComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DemoListUIComponent", function() { return DemoListUIComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var DemoListUIComponent = /** @class */ (function () {
    function DemoListUIComponent(router) {
        this.router = router;
        this.selectPageIndex = 0;
        this.customRouteList = [];
        this.colorPickerFnArrP1 = [];
        for (var index = 0; index < router.config.length; index++) {
            if (router.config[index].path != 'DemoListUI') {
                this.customRouteList.push(router.config[index]);
                //this.customRouteList['colorValue'] = 'rgb(255,255,255)';
            }
        }
        //this.router.config
        //varthis.router.config[0].path
        //this.router.navigate([this.router.config[this.selectPageIndex].path]);
        console.log('%c this.router', 'color:rgb(255,75,255,1)', this.router, this.router.config[0].path);
        //console.log('%c this.router', 'color:rgb(255,75,255,1)', this.router, this.router.config[0].path);
    }
    DemoListUIComponent.prototype.ngOnInit = function () {
    };
    DemoListUIComponent.prototype.ngAfterViewInit = function () {
        //document.removeEventListener('keyup', this.colorPickerFnArrP1[1]);
        var _this = this;
        this.colorPickerFnArrP1[1] = (function (event) {
            console.log("KeyShortcut_event.keyCode", event.keyCode);
            if (event.keyCode == 13) {
                //document.removeEventListener('keyup', this.colorPickerFnArrP1[1]);
                //document.onkeyup = null;
                _this.router.navigate([_this.customRouteList[_this.selectPageIndex].path]);
            }
            if (event.keyCode == 38) {
                if (_this.selectPageIndex > 0) {
                    _this.selectPageIndex -= 1;
                }
                else {
                    _this.selectPageIndex = _this.customRouteList.length - 1;
                }
            }
            if (event.keyCode == 40) {
                if (_this.selectPageIndex < _this.customRouteList.length - 1) {
                    _this.selectPageIndex += 1;
                }
                else {
                    _this.selectPageIndex = 0;
                }
            }
            if (event.keyCode == 8 && _this.router.url != "/DemoListUI") {
                document.removeEventListener('keyup', _this.colorPickerFnArrP1[1]);
                _this.router.navigate(['DemoListUI'], {});
            }
        });
        //document.onkeyup = null;
        //document.removeEventListener('keyup', undefined);
        console.log('%c DemoListUI.addEventListener', 'color:rgb(255,75,255,1)');
        document.addEventListener('keyup', this.colorPickerFnArrP1[1]);
        // document.onkeyup = null;
        // document.removeEventListener("mousemove", myFunction);
    };
    DemoListUIComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-DemoListUI',
            template: __webpack_require__(/*! ./DemoListUI.component.html */ "./src/app/DemoListUI/DemoListUI.component.html"),
            styles: [__webpack_require__(/*! ./DemoListUI.component.css */ "./src/app/DemoListUI/DemoListUI.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"]])
    ], DemoListUIComponent);
    return DemoListUIComponent;
}());



/***/ }),

/***/ "./src/app/EntryPage.css":
/*!*******************************!*\
  !*** ./src/app/EntryPage.css ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".IsometricCssBG{\r\n   background-color: #8d8ae5;\r\n   opacity: 0.8;\r\n   background-image:  linear-gradient(30deg, #ff0000 12%, transparent 12.5%, transparent 87%, #ff0000 87.5%, #ff0000), linear-gradient(150deg, #ff0000 12%, transparent 12.5%, transparent 87%, #ff0000 87.5%, #ff0000), linear-gradient(30deg, #ff0000 12%, transparent 12.5%, transparent 87%, #ff0000 87.5%, #ff0000), linear-gradient(150deg, #ff0000 12%, transparent 12.5%, transparent 87%, #ff0000 87.5%, #ff0000), linear-gradient(60deg, #ff000077 25%, transparent 25.5%, transparent 75%, #ff000077 75%, #ff000077), linear-gradient(60deg, #ff000077 25%, transparent 25.5%, transparent 75%, #ff000077 75%, #ff000077);\r\n   background-size: 20px 35px;\r\n   background-position: 0 0, 0 0, 10px 18px, 10px 18px, 0 0, 10px 18px;\r\n}\r\n\r\n.BoxesCssBG{\r\n   background-color: #8d8ae5;\r\n   opacity: 0.8;\r\n   background-image:  linear-gradient(#ff0000 1px, transparent 1px), linear-gradient(to right, #ff0000 1px, #8d8ae5 1px);\r\n   background-size: 20px 20px;\r\n}\r\n\r\n:host{\r\n   display: flex;\r\n   height: 100%;\r\n}\r\n"

/***/ }),

/***/ "./src/app/EntryPage.html":
/*!********************************!*\
  !*** ./src/app/EntryPage.html ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n\r\n<!-- <div style=\"width:80%;float:right;\"> -->\r\n<router-outlet>\r\n\r\n</router-outlet>\r\n<!-- </div> -->\r\n\r\n\r\n"

/***/ }),

/***/ "./src/app/EntryPage.ts":
/*!******************************!*\
  !*** ./src/app/EntryPage.ts ***!
  \******************************/
/*! exports provided: EntryPageComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntryPageComponent", function() { return EntryPageComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _Module_TSImportManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Module/TSImportManager */ "./src/Module/TSImportManager.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var i18n_File = __webpack_require__(/*! ../i18n/i18n_Localization */ "./src/i18n/i18n_Localization.js");

var EntryPageComponent = /** @class */ (function () {
    function EntryPageComponent(router) {
        this.router = router;
        this.i18nManager = _Module_TSImportManager__WEBPACK_IMPORTED_MODULE_2__["i18nManager"].getInstance();
        //this.router.config
        console.log('%c this.router', 'color:rgb(255,75,255,1)', this.router);
        console.log('%c this.i18nManager', 'color:rgb(255,75,255,1)', this.i18nManager, i18n_File);
    }
    EntryPageComponent.prototype.ngOnInit = function () {
        //this.router.navigate(['keyboardNumPad'], {queryParams: {Device: JSON.stringify(obj)}});
        //this.router.navigate(['ColorTest'], {queryParams: {Device: {}}});
        //this.router.navigate(['ColorTest'], {});
        //this.router.navigate(['ScrollDemo1'], {});
        //this.router.navigate(['KeyBoard_RGB'], {});
        //this.router.navigate(['DemoListUI'], {});
        // window.onresize = resize;
        // function resize()
        // {
        //  alert("检测到resize事件!");
        // }
    };
    EntryPageComponent.prototype.ngAfterViewInit = function () {
        // setTimeout(() => {
        // }, 3000);
        // document.onkeyup = null;
        // document.addEventListener('keyup', (event) => {
        //   console.log("KeyShortcut_event.keyCode", event.keyCode);
        //   if (event.keyCode == 8 && this.router.url != "/DemoListUI") {//Backspace
        //     this.router.navigate(['DemoListUI'], {});
        //   }
        // });
        //   document.addEventListener('keydown', (event) => {
        //  }
    };
    EntryPageComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-entry-page',
            template: __webpack_require__(/*! ./EntryPage.html */ "./src/app/EntryPage.html"),
            styles: [__webpack_require__(/*! ./EntryPage.css */ "./src/app/EntryPage.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"]])
    ], EntryPageComponent);
    return EntryPageComponent;
}());



/***/ }),

/***/ "./src/app/KeyBoard_RGBFolder/Built_ineffect.scss":
/*!********************************************************!*\
  !*** ./src/app/KeyBoard_RGBFolder/Built_ineffect.scss ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".Keyboard-content {\n  WIDTH: 800px;\n  HEIGHT: 400px; }\n\n.ButtonStyle {\n  width: 100%;\n  cursor: pointer;\n  text-align: center;\n  color: #fff;\n  font-size: 0.8vw;\n  font-weight: bold;\n  text-shadow: 2px 1px 1px #386379;\n  border: 1px solid #3180a7;\n  background: linear-gradient(to bottom, #6dbfe8 0%, #28a1de 50%, #28a1de 50%, #1f8cc2 51%, #1f8cc2 51%, #33a0d6 100%);\n  border-radius: 3px;\n  outline: none;\n  box-shadow: inset 0 1px 1px rgba(255, 255, 255, 0.7); }\n\n.InputObjectBlock {\n  height: 21px;\n  width: 261px;\n  margin-bottom: 6px;\n  margin-top: 6px;\n  display: inline-flex;\n  align-items: center;\n  color: red;\n  font-size: larger;\n  font-weight: bold; }\n\n#TopFunction {\n  position: absolute;\n  display: flex;\n  width: auto;\n  height: 4vh;\n  /* justify-content: center; */\n  align-items: center;\n  margin-left: 23vw; }\n"

/***/ }),

/***/ "./src/app/KeyBoard_RGBFolder/Built_ineffect.ts":
/*!******************************************************!*\
  !*** ./src/app/KeyBoard_RGBFolder/Built_ineffect.ts ***!
  \******************************************************/
/*! exports provided: ModeParameter, GloriousMode, Built_ineffect */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModeParameter", function() { return ModeParameter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GloriousMode", function() { return GloriousMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Built_ineffect", function() { return Built_ineffect; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var ModeParameter = /** @class */ (function () {
    function ModeParameter() {
        this.color_quantity = 1;
        this.translate = "";
        this.Multicolor = false;
        this.Multicolor_Enable = true;
        this.colorPickerValue = [255, 0, 0, 1];
        this.brightness = 100;
        this.speed = 50;
        this.brightness_Enable = true;
        this.color_Enable = true;
        this.rate_Enable = true;
        this.value = 0;
        this.colors = ["#ff0000", "#ff8000", "#80ff00", "#00ff00", "#00ffff", "#0000ff", "#8000ff", "#ff00ff", "#ff0080", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff", "#ffffff"];
        this.ParameterNumberList = [
            {
                visible: false,
                translate: 'SPEED',
                maxValue: 10,
                minValue: 1,
                setValue: 1,
                field: 'speed',
            },
        ];
        this.ParameterBoolList = [
            {
                visible: false,
                translate: 'SEPARATE',
                setValue: false,
                field: 'separate',
            },
        ];
        //this.translate=theArgs.translate;
    }
    ModeParameter = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [])
    ], ModeParameter);
    return ModeParameter;
}());

var GloriousMode = /** @class */ (function (_super) {
    __extends(GloriousMode, _super);
    function GloriousMode() {
        var _this = _super.call(this) || this;
        _this.translate = 'GloriousMode';
        _this.PointEffectName = 'GloriousMode';
        _this.value = 0;
        _this.color_Enable = false;
        _this.rate_Enable = false;
        _this.Multicolor_Enable = false;
        return _this;
    }
    return GloriousMode;
}(ModeParameter));

;
var Wave1 = /** @class */ (function (_super) {
    __extends(Wave1, _super);
    function Wave1() {
        var _this = _super.call(this) || this;
        _this.translate = 'Wave#1';
        _this.PointEffectName = 'Wave1';
        _this.value = 1;
        return _this;
    }
    return Wave1;
}(ModeParameter));
;
var Breathing = /** @class */ (function (_super) {
    __extends(Breathing, _super);
    function Breathing() {
        var _this = _super.call(this) || this;
        _this.translate = 'Breathing';
        _this.PointEffectName = 'Breathing';
        _this.value = 2;
        return _this;
    }
    return Breathing;
}(ModeParameter));
;
var Wave2 = /** @class */ (function (_super) {
    __extends(Wave2, _super);
    function Wave2() {
        var _this = _super.call(this) || this;
        _this.translate = 'Wave#2';
        _this.PointEffectName = 'Wave2';
        _this.value = 3;
        return _this;
    }
    return Wave2;
}(ModeParameter));
;
var SpiralingWave = /** @class */ (function (_super) {
    __extends(SpiralingWave, _super);
    function SpiralingWave() {
        var _this = _super.call(this) || this;
        _this.translate = 'SpiralingWave';
        _this.PointEffectName = 'SpiralingWave';
        _this.value = 4;
        return _this;
    }
    return SpiralingWave;
}(ModeParameter));
;
var AcidMode = /** @class */ (function (_super) {
    __extends(AcidMode, _super);
    function AcidMode() {
        var _this = _super.call(this) || this;
        _this.translate = 'AcidMode';
        _this.PointEffectName = 'AcidMode';
        _this.value = 5;
        _this.color_Enable = false;
        _this.Multicolor_Enable = false;
        return _this;
    }
    return AcidMode;
}(ModeParameter));
;
var NormallyOn = /** @class */ (function (_super) {
    __extends(NormallyOn, _super);
    function NormallyOn() {
        var _this = _super.call(this) || this;
        _this.translate = 'NormallyOn';
        _this.PointEffectName = 'NormallyOn';
        _this.value = 6;
        _this.rate_Enable = false;
        return _this;
    }
    return NormallyOn;
}(ModeParameter));
;
var RippleGraff = /** @class */ (function (_super) {
    __extends(RippleGraff, _super);
    function RippleGraff() {
        var _this = _super.call(this) || this;
        _this.translate = 'RippleGraff';
        _this.PointEffectName = 'RippleGraff';
        _this.value = 7;
        return _this;
    }
    return RippleGraff;
}(ModeParameter));
;
var LEDOFF = /** @class */ (function (_super) {
    __extends(LEDOFF, _super);
    function LEDOFF() {
        var _this = _super.call(this) || this;
        _this.translate = 'LEDOFF';
        _this.PointEffectName = 'LEDOFF';
        _this.value = 8;
        _this.brightness_Enable = false;
        _this.rate_Enable = false;
        _this.color_Enable = false;
        return _this;
    }
    return LEDOFF;
}(ModeParameter));
;
var PassWithoutTrace = /** @class */ (function (_super) {
    __extends(PassWithoutTrace, _super);
    function PassWithoutTrace() {
        var _this = _super.call(this) || this;
        _this.translate = 'PassWithoutTrace';
        _this.PointEffectName = 'PassWithoutTrace';
        _this.value = 9;
        return _this;
    }
    return PassWithoutTrace;
}(ModeParameter));
;
var FastRunWithoutTrace = /** @class */ (function (_super) {
    __extends(FastRunWithoutTrace, _super);
    function FastRunWithoutTrace() {
        var _this = _super.call(this) || this;
        _this.translate = 'FastRunWithoutTrace';
        _this.PointEffectName = 'FastRunWithoutTrace';
        _this.value = 10;
        return _this;
    }
    return FastRunWithoutTrace;
}(ModeParameter));
;
var Matrix2 = /** @class */ (function (_super) {
    __extends(Matrix2, _super);
    function Matrix2() {
        var _this = _super.call(this) || this;
        _this.translate = 'Matrix2';
        _this.PointEffectName = 'Matrix2';
        _this.value = 11;
        return _this;
    }
    return Matrix2;
}(ModeParameter));
;
var Matrix3 = /** @class */ (function (_super) {
    __extends(Matrix3, _super);
    function Matrix3() {
        var _this = _super.call(this) || this;
        _this.translate = 'Matrix3';
        _this.PointEffectName = 'Matrix3';
        _this.value = 12;
        return _this;
    }
    return Matrix3;
}(ModeParameter));
;
var Rainbow = /** @class */ (function (_super) {
    __extends(Rainbow, _super);
    function Rainbow() {
        var _this = _super.call(this) || this;
        _this.translate = 'Rainbow';
        _this.PointEffectName = 'Rainbow';
        _this.value = 13;
        _this.color_Enable = false;
        _this.Multicolor_Enable = false;
        return _this;
    }
    return Rainbow;
}(ModeParameter));
;
var HeartbeatSensor = /** @class */ (function (_super) {
    __extends(HeartbeatSensor, _super);
    function HeartbeatSensor() {
        var _this = _super.call(this) || this;
        _this.translate = 'HeartbeatSensor';
        _this.PointEffectName = 'HeartbeatSensor';
        _this.value = 14;
        return _this;
    }
    return HeartbeatSensor;
}(ModeParameter));
;
var DigitTimes = /** @class */ (function (_super) {
    __extends(DigitTimes, _super);
    function DigitTimes() {
        var _this = _super.call(this) || this;
        _this.translate = 'DigitTimes';
        _this.PointEffectName = 'DigitTimes';
        _this.value = 15;
        return _this;
    }
    return DigitTimes;
}(ModeParameter));
;
var Kamehemeha = /** @class */ (function (_super) {
    __extends(Kamehemeha, _super);
    function Kamehemeha() {
        var _this = _super.call(this) || this;
        _this.translate = 'Kamehemeha';
        _this.PointEffectName = 'Kamehemeha';
        _this.value = 16;
        return _this;
    }
    return Kamehemeha;
}(ModeParameter));
;
var Pingpong = /** @class */ (function (_super) {
    __extends(Pingpong, _super);
    function Pingpong() {
        var _this = _super.call(this) || this;
        _this.translate = 'Pingpong';
        _this.PointEffectName = 'Pingpong';
        _this.value = 17;
        _this.rate_Enable = false;
        return _this;
    }
    return Pingpong;
}(ModeParameter));
;
var Surmount = /** @class */ (function (_super) {
    __extends(Surmount, _super);
    function Surmount() {
        var _this = _super.call(this) || this;
        _this.translate = 'Surmount';
        _this.PointEffectName = 'Surmount';
        _this.value = 18;
        _this.rate_Enable = false;
        _this.Multicolor_Enable = false;
        return _this;
    }
    return Surmount;
}(ModeParameter));
;
var Built_ineffect = /** @class */ (function () {
    function Built_ineffect() {
        this.ListData = [
            new GloriousMode(),
            new Wave1(),
            new Wave2(),
            new SpiralingWave(),
            new AcidMode(),
            new Breathing(),
            new NormallyOn(),
            new RippleGraff(),
            new PassWithoutTrace(),
            new FastRunWithoutTrace(),
            new Matrix2(),
            new Matrix3(),
            new Rainbow(),
            new HeartbeatSensor(),
            new DigitTimes(),
            new Kamehemeha(),
            new Pingpong(),
            new Surmount(),
            new LEDOFF(),
        ];
        this.Built_inSelected = new GloriousMode();
        this.currentModeIndex = 0;
        console.log("Built_ineffect", "color:red", this.ListData);
    }
    Built_ineffect.prototype.getTarget = function () {
        if (this.ListData[this.currentModeIndex] === undefined) {
            console.log("getTarget fail", this.currentModeIndex);
            return;
        }
        return this.ListData[this.currentModeIndex];
        //return this.ListData[0];
    };
    Built_ineffect.prototype.resetAllData = function () {
        this.ListData = [
            new GloriousMode(),
            new Wave1(),
            new Wave2(),
            new SpiralingWave(),
            new AcidMode(),
            new Breathing(),
            new NormallyOn(),
            new RippleGraff(),
            new PassWithoutTrace(),
            new FastRunWithoutTrace(),
            new Matrix2(),
            new Matrix3(),
            new Rainbow(),
            new HeartbeatSensor(),
            new DigitTimes(),
            new Kamehemeha(),
            new Pingpong(),
            new Surmount(),
            new LEDOFF(),
        ];
        this.setModeIndex(null, 0);
    };
    Built_ineffect.prototype.setModeIndex = function ($event, index) {
        this.currentModeIndex = index;
    };
    Built_ineffect.prototype.checkNullThenUpdateValue = function () {
        // var target=this.getTarget();
        // for (let index = 0; index <target.ParameterNumberList.length; index++) {
        //     var element = target.ParameterNumberList[index]
        //     if(element.setValue===null || element.setValue<element.minValue){
        //         element.setValue=element.minValue;
        //     }
        //     if(element.setValue>element.maxValue){
        //         element.setValue=element.maxValue;
        //     }
        // }
        var target = this.getTarget();
        for (var index = 0; index < target.ParameterNumberList.length; index++) {
            var element = target.ParameterNumberList[index];
            if (target[element.field] === null || target[element.field] < element.minValue) {
                target[element.field] = element.minValue;
            }
            if (target[element.field] > element.maxValue) {
                target[element.field] = element.maxValue;
            }
        }
    };
    return Built_ineffect;
}());



/***/ }),

/***/ "./src/app/KeyBoard_RGBFolder/KeyAssignManager.ts":
/*!********************************************************!*\
  !*** ./src/app/KeyBoard_RGBFolder/KeyAssignManager.ts ***!
  \********************************************************/
/*! exports provided: KeyAssignManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyAssignManager", function() { return KeyAssignManager; });
var KeyAssignManager = /** @class */ (function () {
    function KeyAssignManager() {
        this.assignValue = '';
        this.macro_RepeatType = 0;
        this.combinationkey = 0;
        this.combinationkeyEnable = false;
        this.shortcutsWindowsEnable = false;
        this.recordBindCodeName = "";
        this.recordBindCodeType = "";
    }
    /**
       * CodeNameType list
       * @flag
       * KEYBOARD
       * MOUSE
       * Multimedia
       * SingleKey
       * MacroFunction
       * Shortcuts
       * DISABLE
       * LaunchProgram
       * LaunchWebsite
       */
    KeyAssignManager.prototype.setNowCodeName = function (CodeName, CodeNameType) {
        this.recordBindCodeName = CodeName;
        this.recordBindCodeType = CodeNameType;
        if (CodeNameType = "Shortcuts") {
            this.setShortCut(CodeNameType);
        }
    };
    KeyAssignManager.prototype.resetDefaultVariable = function () {
        this.recordBindCodeType = "";
        this.recordBindCodeName = "";
        this.WebsitePath = "";
        this.ApplicationPath = "";
        this.combinationkeyEnable = false;
        this.shortcutsWindowsEnable = false;
        this.Shift = false;
        this.Ctrl = false;
        this.Alt = false;
        this.Windows = false;
    };
    /**
     * click Shortcut type
     * @flag
     * 1. Launch Program
     * 2. Launch Website
     * 3. Windows
     */
    KeyAssignManager.prototype.setShortCut = function (nameType) {
        if (nameType == "LaunchProgram") {
            this.WebsitePath = undefined;
        }
        else if (nameType == "LaunchWebsite") {
            this.ApplicationPath = undefined;
        }
        else {
            this.ApplicationPath = undefined;
            this.WebsitePath = undefined;
        }
    };
    /**
     * set Modify key
     */
    KeyAssignManager.prototype.setCombinationKeyEnable = function () {
        if (!this.combinationkeyEnable) {
            this.Shift = false;
            this.Alt = false;
            this.Ctrl = false;
            this.Windows = false;
        }
    };
    KeyAssignManager.prototype.updateVariable = function (TData) {
        //var target=this.KeyBoardManager.getTarget().getNowModeTargetMatrixKey();
        var arr = Object.keys(TData);
        for (var index = 0; index < arr.length; index++) {
            if (this[arr[index]] != undefined) {
                this[arr[index]] = TData[arr[index]];
            }
        }
    };
    return KeyAssignManager;
}());



/***/ }),

/***/ "./src/app/KeyBoard_RGBFolder/KeyBoardData.ts":
/*!****************************************************!*\
  !*** ./src/app/KeyBoard_RGBFolder/KeyBoardData.ts ***!
  \****************************************************/
/*! exports provided: KB61Prohibit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KB61Prohibit", function() { return KB61Prohibit; });
var KB61Prohibit = /** @class */ (function () {
    function KB61Prohibit() {
    }
    KB61Prohibit.get_prohibit = function (Class) {
        if (Class === void 0) { Class = ''; }
        var target;
        switch (Class) {
            case 'All':
                target = this.prohibitAll;
                break;
            case 'Num':
                target = this.prohibitNum;
                break;
            case 'Symbol':
                target = this.prohibitSymbol;
                break;
            case 'ABC':
                target = this.prohibitABC;
                break;
            case 'Control':
                target = this.prohibitControl;
                break;
        }
        if (Class != '') {
            var resultIndexArr = [];
            for (var one = 0; one < this.KeyIndexMatrix1.length; one++) {
                var element = this.KeyIndexMatrix1[one];
                for (var index2 = 0; index2 < target.length; index2++) {
                    if (target[index2] == element) {
                        resultIndexArr.push(one);
                    }
                }
            }
            console.log('KB61Prohibit_constructor', resultIndexArr);
            return resultIndexArr;
        }
    };
    KB61Prohibit.prohibitNum = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];
    KB61Prohibit.prohibitAll = [
        '`',
        '1',
        '2',
        '3',
        '4',
        '5',
        '6',
        '7',
        '8',
        '9',
        '0',
        '-',
        '+',
        'Backspace',
        'Tab',
        'Q',
        'W',
        'E',
        'R',
        'T',
        'Y',
        'U',
        'I',
        'O',
        'P',
        '[',
        ']',
        '\\',
        'Caps',
        'A',
        'S',
        'D',
        'F',
        'G',
        'H',
        'J',
        'K',
        'L',
        ':',
        '"',
        'Enter',
        'LShift',
        'Z',
        'X',
        'C',
        'V',
        'B',
        'N',
        'M',
        ',',
        '.',
        '/',
        'RShift',
        'LCtrl',
        'LWin',
        'LAlt',
        'Space',
        'RAlt',
        'RWin',
        'Menu',
        'RCtrl',
    ];
    KB61Prohibit.prohibitABC = [
        'Q',
        'W',
        'E',
        'R',
        'T',
        'Y',
        'U',
        'I',
        'O',
        'P',
        'A',
        'S',
        'D',
        'F',
        'G',
        'H',
        'J',
        'K',
        'L',
        'Z',
        'X',
        'C',
        'V',
        'B',
        'N',
        'M',
    ];
    KB61Prohibit.prohibitControl = [
        '`',
        'Backspace',
        'Tab',
        'Caps',
        'Enter',
        'LShift',
        'RShift',
        'LCtrl',
        'LWin',
        'LAlt',
        'Space',
        'RAlt',
        'RWin',
        'Menu',
        'RCtrl',
    ];
    KB61Prohibit.prohibitSymbol = ['-', '+', '[', ']', '\\', ':', '"', ',', '.', '/'];
    KB61Prohibit.KeyIndexMatrix1 = [
        '`',
        '1',
        '2',
        '3',
        '4',
        '5',
        '6',
        '7',
        '8',
        '9',
        '0',
        '-',
        '+',
        'Backspace',
        'Tab',
        'Q',
        'W',
        'E',
        'R',
        'T',
        'Y',
        'U',
        'I',
        'O',
        'P',
        '[',
        ']',
        '\\',
        'Caps',
        'A',
        'S',
        'D',
        'F',
        'G',
        'H',
        'J',
        'K',
        'L',
        ':',
        '"',
        'Enter',
        'LShift',
        'Z',
        'X',
        'C',
        'V',
        'B',
        'N',
        'M',
        ',',
        '.',
        '/',
        'RShift',
        'LCtrl',
        'LWin',
        'LAlt',
        'Space',
        'RAlt',
        'RWin',
        'Menu',
        'RCtrl',
    ]; //8
    return KB61Prohibit;
}());



/***/ }),

/***/ "./src/app/KeyBoard_RGBFolder/KeyBoardManager.ts":
/*!*******************************************************!*\
  !*** ./src/app/KeyBoard_RGBFolder/KeyBoardManager.ts ***!
  \*******************************************************/
/*! exports provided: KeyBoardManager, KeyBoard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyBoardManager", function() { return KeyBoardManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyBoard", function() { return KeyBoard; });
/* harmony import */ var _KeyBoardData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./KeyBoardData */ "./src/app/KeyBoard_RGBFolder/KeyBoardData.ts");
/* harmony import */ var _module_SupportData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../module/SupportData */ "./src/module/SupportData.js");
/* harmony import */ var _module_SupportData__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_module_SupportData__WEBPACK_IMPORTED_MODULE_1__);


var KeyBoardManager = /** @class */ (function () {
    //AllFunctionMapping=new AllFunctionMapping();
    function KeyBoardManager(inputmax) {
        this.defaultName = '未配置';
        this.profileindex = 0;
        this.notClickedYet = true;
        this.profileLayers = [];
        this.profileLayerIndex = [0, 0, 0];
        this.layerMaxNumber = 3;
        this.maxKayCapNumber = inputmax;
        this.KeyBoardArray = [
            new KeyBoard('硬體配置1', inputmax, 0),
            new KeyBoard('硬體配置2', inputmax, 1),
            new KeyBoard('硬體配置3', inputmax, 2),
        ];
        var countIndex = 0;
        for (var index = 1; index <= this.KeyBoardArray.length; index++) {
            var tempArr = [];
            for (var index2 = 1; index2 <= this.layerMaxNumber; index2++) {
                tempArr.push(new KeyBoard('硬體配置' + index2 * index, inputmax, index2 * index));
            }
            this.profileLayers.push(tempArr);
        }
    }
    KeyBoardManager.prototype.setALLDefaultKeyArray = function (data) {
        console.log('setALLDefaultKeyArray', this.profileLayers);
        var KBMarr = this.KeyBoardArray;
        for (var index = 0; index < KBMarr.length; index++) {
            KBMarr[index].setTargetDefaultKeyArray(data);
            for (var index2 = 0; index2 < this.layerMaxNumber; index2++) {
                this.profileLayers[index][index2].setTargetDefaultKeyArray(data);
            }
        }
    };
    KeyBoardManager.prototype.getProfileLayerIndex = function () {
        return this.profileLayerIndex[this.profileindex];
    };
    KeyBoardManager.prototype.changeProfileLayer = function () {
        this.notClickedYet = true;
        var T = this.getProfileLayerIndex();
        if (T < this.layerMaxNumber - 1) {
            T = T + 1;
        }
        else {
            T = 0;
        }
        this.profileLayerIndex[this.profileindex] = T;
        console.log('changeProfileLayer', this.getProfileLayerIndex());
        console.log('changeProfileLayer_profile', this.getTarget());
    };
    ;
    KeyBoardManager.prototype.keyAssignPromPrompt = function (event) {
        var KeyAssignPrompt = document.getElementById('KeyAssignPrompt');
        //KeyAssignPrompt.style.display='block';
        var H = event.target.offsetHeight;
        var W = event.target.offsetWidth;
        console.log('keyAssignPrompt', H, W, event);
        KeyAssignPrompt.style.left = event.target.offsetLeft + event.target.offsetWidth + 'px';
        KeyAssignPrompt.style.top = event.target.offsetTop + 'px';
        console.log('keyAssignPrompt', event.offsetX, event.offsetY);
    };
    KeyBoardManager.prototype.clearAllKeyboardData = function (Name) {
        for (var index = 0; index < 4; index++) {
            this.KeyBoardArray[index] = new KeyBoard(Name + (index + 1), this.maxKayCapNumber, 0);
        }
    };
    KeyBoardManager.prototype.i18nChangeName = function (Name) {
        var KBMarr = this.KeyBoardArray;
        for (var index = 0; index < KBMarr.length; index++) {
            KBMarr[index].profileName = Name + ' ' + (index + 1);
        }
    };
    KeyBoardManager.prototype.clearAllAssignRecordLed = function (FindName) {
        if (FindName === void 0) { FindName = ''; }
        var KBMarr = this.KeyBoardArray;
        for (var index = 0; index < KBMarr.length; index++) {
            KBMarr[index].clearAssignRecordLed(FindName);
        }
    };
    KeyBoardManager.prototype.ChangeAllLookingforMacroName = function (changeName, targetName) {
        if (changeName === void 0) { changeName = ''; }
        if (targetName === void 0) { targetName = ''; }
        console.log('EnterKeyChangeMacroName', changeName, targetName);
        var KBMarr = this.KeyBoardArray;
        for (var index = 0; index < KBMarr.length; index++) {
            KBMarr[index].ChangeMacroName(changeName, targetName);
        }
    };
    KeyBoardManager.prototype.ChangeAllLookingforLCFMName = function (changeName, targetName) {
        if (changeName === void 0) { changeName = ''; }
        if (targetName === void 0) { targetName = ''; }
        console.log('EnterKeyChangeMacroName', changeName, targetName);
        var KBMarr = this.KeyBoardArray;
        for (var index = 0; index < KBMarr.length; index++) {
            KBMarr[index].ChangeLCFMName(changeName, targetName);
        }
    };
    KeyBoardManager.prototype.clearRecordMacroData = function (targetName) {
        if (targetName === void 0) { targetName = ''; }
        console.log('clearRecordMacroData', targetName);
        var KBMarr = this.KeyBoardArray;
        for (var index = 0; index < KBMarr.length; index++) {
            KBMarr[index].clearMacroName(targetName);
        }
    };
    KeyBoardManager.prototype.getTarget = function () {
        if (this.layerMaxNumber > 0) {
            return this.profileLayers[this.profileindex][this.getProfileLayerIndex()];
        }
        else {
            return this.KeyBoardArray[this.profileindex];
        }
    };
    KeyBoardManager.prototype.getAssignTarget = function (index) {
        return this.KeyBoardArray[index];
    };
    KeyBoardManager.prototype.changeAll_KBIndex = function (index) {
        var KBMarr = this.KeyBoardArray;
        for (var index_1 = 0; index_1 < KBMarr.length; index_1++) {
            KBMarr[index_1].recordAssignBtnIndex = index_1;
        }
    };
    KeyBoardManager.prototype.delete_KeyBoard = function () {
        if (this.profileindex > 0) {
            var T = this.profileindex;
            this.profileindex -= 1;
            this.KeyBoardArray.splice(T, 1);
        }
        else if (this.profileindex == 0) {
            this.KeyBoardArray.splice(this.profileindex, 1);
        }
    };
    KeyBoardManager.prototype.setDefault = function () { };
    return KeyBoardManager;
}());

var KeyBoard = /** @class */ (function () {
    function KeyBoard(name, inputMax, profileid) {
        if (name === void 0) { name = ''; }
        this.profileName = 'default';
        this.hibernate = true;
        this.winLock = false;
        this.hibernateTimeArr = [1, 3, 5, 10];
        this.hibernateTime = 3;
        this.defaultName = "Default";
        this.pollingrate = 125;
        this.recordAssignBtnIndex = 0;
        this.assignText = '設定按鍵:Y';
        this.assignedKeyboardKeys = [[]]; //61KEY
        this.assignedFnKeyboardKeys = []; //61KEY
        this.fnModeMartrix = [false, false, false];
        this.fnModeindex = 0;
        this.fiveDefaultLedCode = [];
        this.fiveRecordIndex = 0;
        this.keyHoverIndex = 0;
        this.profileLayerIndex = 0;
        this.maxKayCapNumber = inputMax;
        this.profileName = name;
        this.profileid = profileid;
        for (var index = 0; index < 1; index++) {
            for (var i2 = 0; i2 < this.maxKayCapNumber; i2++) {
                this.assignedKeyboardKeys[index].push(this.defaultModule());
            }
        }
        // for (let index = 0; index < 5; index++) {
        //     this.fiveDefaultLedCode.push({
        //         recordBindCodeName: 0,
        //         profileName: this.defaultName,
        //     })
        // }
    }
    KeyBoard.prototype.setTargetDefaultKeyArray = function (data) {
        var _loop_1 = function (index) {
            targetValue = _module_SupportData__WEBPACK_IMPORTED_MODULE_1__["AllFunctionMapping"].find(function (x) { return x.keyCode == data[index]; }).value;
            //console.log('setTargetDefaultKeyArray_index', index, targetValue);
            this_1.getNowModeKeyMatrix()[index].defaultValue = targetValue;
            this_1.getNowModeKeyMatrix()[index].recordBindCodeType = '';
        };
        var this_1 = this, targetValue;
        //console.log('setTargetDefaultKeyArray', data);
        for (var index = 0; index < data.length; index++) {
            _loop_1(index);
        }
    };
    KeyBoard.prototype.getHibernateStepTime = function () {
        //console.log("getHibernateStepTime",this.hibernateTimeArr,this.hibernateTime);
        return this.hibernateTimeArr[this.hibernateTime];
    };
    KeyBoard.prototype.clearAllKMacro = function () {
        for (var index = 0; index < this.assignedKeyboardKeys.length; index++) {
            for (var index2 = 0; index2 < this.maxKayCapNumber; index2++) {
                var target = this.assignedKeyboardKeys[index];
                if (target[index2].keyAssignType[0] == 'KMacro') {
                    target[index2].keyAssignType[0] = this.defaultName;
                    target[index2].value = this.defaultName;
                }
            }
        }
    };
    KeyBoard.prototype.ChangeMacroName = function (changeName, targetName) {
        if (changeName === void 0) { changeName = ''; }
        if (targetName === void 0) { targetName = ''; }
        console.log('KeyChangeMacroName', changeName, targetName);
        for (var index = 0; index < this.assignedKeyboardKeys.length; index++) {
            var target = this.assignedKeyboardKeys[index];
            for (var index2 = 0; index2 < this.maxKayCapNumber; index2++) {
                var T = target[index2];
                if (T.value == targetName && T.keyAssignType[0] == 'KMacro') {
                    console.log('KeyChangeMacroName_t', T);
                    T.value = changeName;
                }
            }
        }
    };
    KeyBoard.prototype.clearMacroName = function (targetName) {
        if (targetName === void 0) { targetName = ''; }
        for (var index = 0; index < this.assignedKeyboardKeys.length; index++) {
            var target = this.assignedKeyboardKeys[index];
            for (var index2 = 0; index2 < this.maxKayCapNumber; index2++) {
                var T = target[index2];
                if (T.value == targetName && T.keyAssignType[0] == 'KMacro') {
                    T.value = this.defaultName;
                }
            }
        }
    };
    KeyBoard.prototype.ImportClassData = function (InputData) {
        console.log('ImportClassData', InputData);
        var tempData = JSON.parse(JSON.stringify(InputData));
        var excludeVar = ['KB61Prohibit', 'profileLayerIndex', 'profileName'];
        var arr = Object.keys(this);
        var _loop_2 = function (index) {
            if (excludeVar.find(function (x) { return x == arr[index]; })) {
            }
            else {
                this_2[arr[index]] = tempData[arr[index]];
            }
        };
        var this_2 = this;
        for (var index = 0; index < arr.length; index++) {
            _loop_2(index);
        }
        // for (let index = 0; index < arr.length; index++) {
        // }
    };
    KeyBoard.prototype.HasSet = function (checkIndex) {
        if (checkIndex === void 0) { checkIndex = 0; }
        var target = this.getNowModeKeyMatrix();
        var N = target[checkIndex].value;
        var N2 = target[checkIndex].profileName;
        var N3 = target[checkIndex].LongTimePressValue;
        var N4 = target[checkIndex].InstantPressValue;
        return N != '' || N2 != '' || N3 != '' || N4 != '' ? true : false;
        // for (let index = 0; index <target.length; index++) {
        //     var element = target[index];
        // }
    };
    KeyBoard.prototype.checkKeyAssignHasData = function (from) {
        if (from === void 0) { from = ''; }
        var KeyAssignUIStyleList = document.querySelectorAll('.KeyAssignUIStyle');
        //var KeyAssignUIStyleList= this.elementRef.nativeElement.querySelectorAll(".KeyAssignUIStyle");
        for (var index = 0; index < KeyAssignUIStyleList.length; index++) {
            var Result = this.HasSet(index);
            var element = KeyAssignUIStyleList[index];
            //Result ? (element.style.border = '2px solid #ffc757') : (element.style.border = '');
        }
    };
    KeyBoard.prototype.getKeyTargetOptionFrequency = function () {
        var N = this.getNowModeTargetMatrixKey().macroOptionNumber;
        console.log('getKeyTargetOptionFrequency', N);
        switch (true) {
            case N < 65535:
                return N;
            case N == 65535:
                return 1;
            case N == 65536:
                return 1;
        }
    };
    KeyBoard.prototype.checkNowModeTargetMatrixAssignKey = function (index, compareKeyCode) {
        //console.log('getNowModeTargetMatrixKey', this.getNowModeKeyMatrix()[this.recordAssignBtnIndex])
        if (this.getNowModeKeyMatrix()[index].defaultValue == compareKeyCode) {
            return false;
        }
        return true;
    };
    KeyBoard.prototype.getNowModeKeyMatrix = function () {
        if (!this.assignedKeyboardKeys[this.fnModeindex]) {
            console.log(this);
        }
        else {
            return this.assignedKeyboardKeys[this.fnModeindex];
        }
    };
    KeyBoard.prototype.getNowModeTargetMatrixKey = function () {
        //console.log('getNowModeTargetMatrixKey', this.getNowModeKeyMatrix()[this.recordAssignBtnIndex])
        return this.getNowModeKeyMatrix()[this.recordAssignBtnIndex];
    };
    KeyBoard.prototype.switchLongTime_Instant_Status = function () {
        this.getNowModeTargetMatrixKey().LongTime_Instant_Status = !this.getNowModeTargetMatrixKey()
            .LongTime_Instant_Status;
    };
    KeyBoard.prototype.setFnModeMartrix = function (targetIndex) {
        this.fnModeMartrix[targetIndex] = !this.fnModeMartrix[targetIndex];
        for (var index = 0; index < this.fnModeMartrix.length; index++) {
            if (targetIndex != index) {
                this.fnModeMartrix[index] = false;
            }
        }
        if (!this.fnModeMartrix.some(function (element) { return element == true; })) {
            this.fnModeindex = 0;
        }
        else {
            this.fnModeindex = targetIndex + 1;
        }
        console.log('setFnModeMartrix_改後', this.fnModeMartrix[targetIndex], this.fnModeindex);
        this.checkKeyAssignHasData('setFnModeMartrix');
    };
    KeyBoard.prototype.set_prohibit = function (Class) {
        if (Class === void 0) { Class = ''; }
        var target = _KeyBoardData__WEBPACK_IMPORTED_MODULE_0__["KB61Prohibit"].get_prohibit(Class);
        console.log('get_prohibit', target);
        for (var index = 0; index < target.length; index++) {
            var T = this.getNowModeKeyMatrix()[target[index]];
            for (var KATindex = 0; KATindex < 3; KATindex++) {
                T.keyAssignType[KATindex] = 'K12';
            }
            T.value = '⊘';
            T.LongTimePressValue = '⊘';
            T.InstantPressValue = '⊘';
        }
    };
    KeyBoard.prototype.cancel_prohibit = function () {
        console.log('cancel_prohibit_FNMode');
        var T = this.getNowModeKeyMatrix();
        for (var index = 0; index < T.length; index++) {
            for (var KATindex = 0; KATindex < 3; KATindex++) {
                if (T[index].keyAssignType[KATindex] == 'K12') {
                    T[index].keyAssignType[KATindex] = this.defaultName;
                    T[index].LongTimePressValue = this.defaultName;
                    T[index].InstantPressValue = this.defaultName;
                    T[index].value = this.defaultName;
                    T[index].m_Identifier = 0;
                }
            }
        }
    };
    //"設定按鍵:"
    KeyBoard.prototype.get_assign_promptText = function (Type) {
        switch (Type) {
            case 'LongTimePressValue':
                return this.getNowModeTargetMatrixKey().LongTimePressValue;
            case 'InstantPressValue':
                return this.getNowModeTargetMatrixKey().InstantPressValue;
            case 'NormalKeyPress':
                return this.getNowModeTargetMatrixKey().value;
        }
    };
    //"燈光設置:"
    KeyBoard.prototype.get_Led_promptText = function () {
        //console.log("FNMode_get_Led_promptText");
        return this.getNowModeTargetMatrixKey().profileName;
    };
    KeyBoard.prototype.checkFnSetOnlyData = function (inputValue) {
        console.log('clearLostMacro_MCIarr');
        var V1 = this.getNowModeKeyMatrix();
        for (var index = 0; index < this.maxKayCapNumber; index++) {
            for (var KATindex = 0; KATindex < 3; KATindex++) {
                if (V1[index].keyAssignType[KATindex] == inputValue) {
                    V1[index] = this.defaultModule();
                }
            }
        }
    };
    KeyBoard.prototype.setAssignTargetData = function (data) {
        var target = this.getNowModeTargetMatrixKey();
        console.log('setAssignTargetData:', data, 'ManagerTarget:', target);
        var arrKeys = Object.keys(data);
        for (var index = 0; index < arrKeys.length; index++) {
            if (target[arrKeys[index]] != undefined) {
                target[arrKeys[index]] = data[arrKeys[index]];
            }
        }
        target.changed = true;
    };
    KeyBoard.prototype.getNowModeTargetKeyPressStatus = function () {
        if (this.getNowModeTargetMatrixKey().openLongTimePress) {
            if (this.getNowModeTargetMatrixKey().LongTime_Instant_Status) {
                return 'LongTimePress';
            }
            else {
                return 'InstantPress';
            }
        }
        else {
            return 'NormalPress';
        }
    };
    KeyBoard.prototype.setRecordLed = function (profileName, recordBindCodeName) {
        console.log('setRecordLedVar_', profileName, recordBindCodeName);
        var T = this.getNowModeTargetMatrixKey();
        T.profileName = profileName;
        T.recordBindCodeName = recordBindCodeName;
    };
    KeyBoard.prototype.set_FiveLed = function (profileName, recordBindCodeName) {
        console.log('set_FiveLed', profileName, recordBindCodeName);
        var T = this.fiveDefaultLedCode[this.fiveRecordIndex];
        T.recordBindCodeName = recordBindCodeName;
        T.profileName = profileName;
    };
    KeyBoard.prototype.resetAssignFive = function (index) {
        var T = this.fiveDefaultLedCode[index];
        T.recordBindCodeName = 0;
        T.profileName = this.defaultName;
    };
    KeyBoard.prototype.reset_assign_default = function (type) {
        if (type === void 0) { type = ''; }
        console.log('reset_assign_default', type);
        if (type == 'key') {
            var T = this.getNowModeTargetMatrixKey();
            for (var _i = 0, _a = Object.entries(T); _i < _a.length; _i++) {
                var _b = _a[_i], key = _b[0], value = _b[1];
                if (key != "keyAssignType") {
                    T[key] = this.defaultModule()[key];
                }
            }
        }
        else if (type == 'led') {
            var T = this.getNowModeTargetMatrixKey();
            T.profileName = this.defaultName;
            T.recordBindCodeName = 0;
        }
        else if (type == 'LongTime_or_Instant_Delete') {
            var T = this.getNowModeTargetMatrixKey();
            if (T.LongTime_Instant_Status) {
                T.keyAssignType[0] = this.defaultName;
                T.LongTimePressValue = '';
            }
            else {
                T.keyAssignType[1] = this.defaultName;
                T.InstantPressValue = '';
            }
        }
    };
    KeyBoard.prototype.reset_AllKey = function () {
        var KeyArray = this.getNowModeKeyMatrix();
        for (var index = 0; index < KeyArray.length; index++) {
            for (var _i = 0, _a = Object.entries(KeyArray[index]); _i < _a.length; _i++) {
                var _b = _a[_i], key = _b[0], value = _b[1];
                if (key != "defaultValue") {
                    KeyArray[index][key] = this.defaultModule()[key];
                }
            }
        }
    };
    KeyBoard.prototype.defaultModule = function (type) {
        if (type === void 0) { type = ''; }
        var T = {
            keyAssignType: ['', '', ''],
            LongTimePressValue: '',
            InstantPressValue: '',
            LongTime_Instant_Status: false,
            openLongTimePress: false,
            defaultValue: 'Default',
            value: this.defaultName,
            macro_RepeatType: 0,
            macro_Data: {},
            assignValue: '',
            profileName: '',
            recordBindCodeType: '',
            recordBindCodeName: this.defaultName,
            shortcutsWindowsEnable: false,
            ApplicationPath: "",
            WebsitePath: "",
            combinationkey: "",
            combinationkeyEnable: false,
            Shift: false,
            Alt: false,
            Ctrl: false,
            Windows: false,
            changed: false,
        };
        return T;
    };
    return KeyBoard;
}());



/***/ }),

/***/ "./src/app/KeyBoard_RGBFolder/KeyBoardStyle.css":
/*!******************************************************!*\
  !*** ./src/app/KeyBoard_RGBFolder/KeyBoardStyle.css ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "input.KeyAssignUIStyle:focus {\r\n    outline: none !important;\r\n    border: 2px solid #ffc757;\r\n    border-radius: 10px;\r\n}\r\n\r\n.KeyAssignUIStyle {\r\n    position: absolute;\r\n    background-repeat: no-repeat;\r\n    width: 43px;\r\n    height: 11%;\r\n    float: left;\r\n    margin-top: 0.3%;\r\n    margin-left: 0.3%;\r\n    padding: 0;\r\n    background-color: #0000;\r\n    box-sizing: border-box;\r\n    border-radius: 16%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: flex-end;\r\n    z-index: 4;\r\n}\r\n\r\n.KeyAssignHasValue {\r\n    background: red;\r\n    width: 60%;\r\n    height: 15%;\r\n    margin-bottom: 10px;\r\n    pointer-events: none;\r\n}\r\n\r\n.RGBColorBlockStyle {\r\n    position: absolute;\r\n    background-repeat: no-repeat;\r\n    width: 43px;\r\n    height: 11%;\r\n    float: left;\r\n    margin-top: 0.3%;\r\n    margin-left: 0.3%;\r\n    padding: 0;\r\n    background-color: #0000;\r\n    box-sizing: border-box;\r\n    border-radius: 16%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: flex-end;\r\n}\r\n\r\n.RGBColorBlockP7 {\r\n    position: absolute;\r\n    background-repeat: no-repeat;\r\n    width: 6.3%;\r\n    height: 19%;\r\n    float: left;\r\n    margin-top: 0.3%;\r\n    margin-left: 0.3%;\r\n    padding: 0;\r\n    background-color: #0000;\r\n    box-sizing: border-box;\r\n    border-radius: 16%;\r\n}\r\n\r\n.KBUICommon {\r\n    position: absolute;\r\n    left: 2.6%;\r\n    top: 3%;\r\n    height: 292px;\r\n    width: 757px;\r\n    /* border: 2px solid red; */\r\n    box-sizing: border-box;\r\n    -webkit-transform: scale(1);\r\n            transform: scale(1);\r\n}\r\n\r\n.EventCanBoxSelectRange {\r\n    position: absolute;\r\n    left: 28%;\r\n    top: 21%;\r\n    height: 320px;\r\n    width: 825px;\r\n    background: rgba(255, 255, 255, 0);\r\n}\r\n"

/***/ }),

/***/ "./src/app/KeyBoard_RGBFolder/KeyBoardStyle.ts":
/*!*****************************************************!*\
  !*** ./src/app/KeyBoard_RGBFolder/KeyBoardStyle.ts ***!
  \*****************************************************/
/*! exports provided: KeyBoardStyle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyBoardStyle", function() { return KeyBoardStyle; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var KeyBoardStyle = /** @class */ (function () {
    function KeyBoardStyle() {
        this.nowTargetIndex = 0;
        this.nowTargetKey = 'GMMK Pro';
        //BGImage:'url(./image/Share/KB1KeyerEffects.png)',
        this.keyBoardList = {
            'GMMK Pro': {
                ItemCss: [
                    "margin-top:22px;margin-left:22px;height:44px;display: flex;",
                    "margin-top:22px;margin-left:78px;height:44px;display: flex;",
                    "margin-top:22px;margin-left:124px;height:44px;display: flex;",
                    "margin-top:22px;margin-left:169px;height:44px;display: flex;",
                    "margin-top:22px;margin-left:215px;height:44px;display: flex;",
                    "margin-top:22px;margin-left:271px;height:44px;display: flex;",
                    "margin-top:22px;margin-left:316px;height:44px;display: flex;",
                    "margin-top:22px;margin-left:361px;height:44px;display: flex;",
                    "margin-top:22px;margin-left:408px;height:44px;display: flex;",
                    "margin-top:22px;margin-left:463px;height:44px;display: flex;",
                    "margin-top:22px;margin-left:508px;height:44px;display: flex;",
                    "margin-top:22px;margin-left:554px;height:44px;display: flex;",
                    "margin-top:22px;margin-left:600px;height:44px;display: flex;",
                    "margin-top:22px;margin-left:655px;height:44px;display: flex;",
                    "margin-top:22px;margin-left:722px;border-radius:25px;height:44px;display: flex;",
                    "margin-top:76px;margin-left:23px;height:44px;display: flex;",
                    "margin-top:76px;margin-left:68px;height:44px;display: flex;",
                    "margin-top:76px;margin-left:113px;height:44px;display: flex;",
                    "margin-top:76px;margin-left:158px;height:44px;display: flex;",
                    "margin-top:76px;margin-left:203px;height:44px;display: flex;",
                    "margin-top:76px;margin-left:249px;height:44px;display: flex;",
                    "margin-top:76px;margin-left:294px;height:44px;display: flex;",
                    "margin-top:76px;margin-left:339px;height:44px;display: flex;",
                    "margin-top:76px;margin-left:384px;height:44px;display: flex;",
                    "margin-top:76px;margin-left:429px;height:44px;display: flex;",
                    "margin-top:76px;margin-left:474px;height:44px;display: flex;",
                    "margin-top:76px;margin-left:520px;height:44px;display: flex;",
                    "margin-top:76px;margin-left:565px;height:44px;display: flex;",
                    "margin-top:76px;margin-left:611px;width:88px;height:44px;display: flex;",
                    "margin-top:76px;margin-left:720px;height:44px;display: flex;",
                    "margin-top:121px;margin-left:20px;width:67px;height:44px;display: flex;",
                    "margin-top:121px;margin-left:90px;height:44px;display: flex;",
                    "margin-top:121px;margin-left:137px;height:44px;display: flex;",
                    "margin-top:121px;margin-left:182.1px;height:44px;display: flex;",
                    "margin-top:121px;margin-left:227.1px;height:44px;display: flex;",
                    "margin-top:121px;margin-left:272.1px;height:44px;display: flex;",
                    "margin-top:121px;margin-left:317.1px;height:44px;display: flex;",
                    "margin-top:121px;margin-left:362.1px;height:44px;display: flex;",
                    "margin-top:121px;margin-left:407.1px;height:44px;display: flex;",
                    "margin-top:121px;margin-left:452px;height:44px;display: flex;",
                    "margin-top:121px;margin-left:497px;height:44px;display: flex;",
                    "margin-top:121px;margin-left:543px;height:44px;display: flex;",
                    "margin-top:121px;margin-left:588px;height:44px;display: flex;",
                    "width:66px;margin-top:121px;margin-left:634px;height:44px;display: flex;",
                    "margin-top:121px;margin-left:719px;height:44px;display: flex;",
                    "margin-top:168px;margin-left:19px;width:82px;height:44px;display: flex;",
                    "margin-top:168px;margin-left:103px;height:44px;display: flex;",
                    "margin-top:168px;margin-left:148px;height:44px;display: flex;",
                    "margin-top:168px;margin-left:193px;height:44px;display: flex;",
                    "margin-top:168px;margin-left:238px;height:44px;display: flex;",
                    "margin-top:168px;margin-left:283px;height:44px;display: flex;",
                    "margin-top:168px;margin-left:328px;height:44px;display: flex;",
                    "margin-top:168px;margin-left:373px;height:44px;display: flex;",
                    "margin-top:168px;margin-left:418px;height:44px;display: flex;",
                    "margin-top:168px;margin-left:464px;height:44px;display: flex;",
                    "margin-top:168px;margin-left:509px;height:44px;display: flex;",
                    "margin-top:168px;margin-left:554px;height:44px;display: flex;",
                    "margin-top:168px;margin-left:599px;width:100px;height:44px;display: flex;",
                    "margin-top:168px;margin-left:719px;height:44px;display: flex;",
                    "width:98px;margin-top:212px;margin-left:24px;height:44px;display: flex;",
                    "margin-top:212px;margin-left:125px;height:44px;display: flex;",
                    "margin-top:212px;margin-left:170px;height:44px;display: flex;",
                    "margin-top:212px;margin-left:215px;height:44px;display: flex;",
                    "margin-top:212px;margin-left:260px;height:44px;display: flex;",
                    "margin-top:212px;margin-left:305px;height:44px;display: flex;",
                    "margin-top:212px;margin-left:351px;height:44px;display: flex;",
                    "margin-top:212px;margin-left:395px;height:44px;display: flex;",
                    "margin-top:212px;margin-left:441px;height:44px;display: flex;",
                    "margin-top:212px;margin-left:486px;height:44px;display: flex;",
                    "margin-top:212px;margin-left:531px;height:44px;display: flex;",
                    "margin-top:212px;margin-left:577px;width:77px;height:44px;display: flex;",
                    "margin-top:222px;margin-left:665px;height:44px;display: flex;",
                    "margin-top:212px;margin-left:719px;height:44px;display: flex;",
                    "width:53px;margin-top:258px;margin-left:24px;height:44px;display: flex;",
                    "width:53px;margin-top:258px;margin-left:80px;height:44px;display: flex;",
                    "width:53px;margin-top:258px;margin-left:136px;height:44px;display: flex;",
                    "width:277px;border-radius:3px;margin-top:258px;margin-left:194px;height:44px;display: flex;",
                    "margin-top:258px;margin-left:474px;height:44px;display: flex;",
                    "margin-top:258px;margin-left:520px;height:44px;display: flex;",
                    "margin-top:258px;margin-left:565px;height:44px;display: flex;",
                    "margin-top:267px;margin-left:620px;height:44px;display: flex;",
                    "margin-top:267px;margin-left:666px;height:44px;display: flex;",
                    "margin-top:267px;margin-left:711px;height:44px;display: flex;",
                ],
                hasValueStyle: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""],
                keyMapping: [
                    "Escape", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "PrintScreen", "ScrollWheel", "Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "Delete", "Tab", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "Backslash", "PageUp", "CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Enter", "PageDown", "ShiftLeft", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "ShiftRight", "ArrowUp", "End", "ControlLeft", "MetaLeft", "AltLeft", "Space", "AltRight", "Custom_Fnkey", "ControlRight", "ArrowLeft", "ArrowDown", "ArrowRight"
                ],
                cssText: 'position: absolute;height: 100%;width: 100%;pointer-events: none;',
                BGImage: 'url(./image/Share/KB1.png)',
                BGImageKeyerEffects: 'url(./image/Share/KB1KeyerEffects.png)',
                centerBlockPoint: 37,
                qigong_Step1_Range: [0, 15, 30, 58, 71, 82],
                qigong_Step2_Range: [22, 23, 38, 52, 51, 36],
                KeyTableArray: [[0, 14], [15, 29], [30, 44], [45, 58], [59, 72], [73, 82]],
                imageMaxWidth: 765,
                imageMaxHeight: 308,
            },
            "GMMK_V2_65US": {
                ItemCss: [
                    "margin-top: 13px; margin-left: 12px; width: 45px; height: 43px; display: flex; ",
                    "margin-top: 13px; margin-left: 60px; width: 45px; height: 43px; display: flex; ",
                    "margin-top: 13px; margin-left: 107px; width: 45px; height: 43px; display: flex; ",
                    "margin-top: 13px; margin-left: 155px; width: 45px; height: 43px; display: flex; ",
                    "margin-top: 13px; margin-left: 202px; width: 45px; height: 43px; display: flex; ",
                    "margin-top: 13px;margin-left: 251px;width: 45px;height: 43px;display: flex;",
                    "margin-top: 13px;margin-left: 299px;width: 45px;height: 43px;display: flex;",
                    "margin-top: 13px;margin-left: 348px;width: 45px;height: 43px;display: flex;",
                    "margin-top: 13px;margin-left: 395px;width: 45px;height: 43px;display: flex;",
                    "margin-top: 13px;margin-left: 443px;width: 45px;height: 43px;display: flex;",
                    "margin-top: 13px;margin-left: 491px;width: 45px;height: 43px;display: flex;",
                    "margin-top: 13px;margin-left: 539px;width: 45px;height: 43px;display: flex;",
                    "margin-top: 13px;margin-left: 587px;width: 45px;height: 43px;display: flex;",
                    "margin-top: 13px;margin-left: 636px;width: 90px;height: 43px;display: flex;",
                    "margin-top: 13px;margin-left: 730px;width: 45px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 12px;width: 68px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 85px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 132px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 181px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 227px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 275px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 324px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 371px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 418px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 467px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 513px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 563px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 610px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 658px;width: 66px;height: 43px;display: flex;",
                    "margin-top: 61px;margin-left: 731px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 14px;width: 77px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 97px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 144px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 192px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 241px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 288px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 337px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 383px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 431px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 478px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 526px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 574px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 622px;width: 104px;height: 43px;display: flex;",
                    "margin-top: 109px;margin-left: 730px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 14px;width: 103px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 122px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 170px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 217px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 264px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 313px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 361px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 409px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 457px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 504px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 552px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 600px;width: 77px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 683px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 157px;margin-left: 732px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 205px;margin-left: 14px;width: 52px;height: 43px;display: flex;",
                    "margin-top: 204px;margin-left: 73px;width: 52px;height: 43px;display: flex;",
                    "margin-top: 204px;margin-left: 134px;width: 52px;height: 43px;display: flex;",
                    "margin-top: 204px;margin-left: 193px;width: 292px;height: 43px;border-radius: 6px;display: flex;",
                    "margin-top: 204px;margin-left: 492px;width: 52px;height: 43px;display: flex;",
                    "margin-top: 204px;margin-left: 552px;width: 52px;height: 43px;display: flex;",
                    "margin-top: 204px;margin-left: 635px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 204px;margin-left: 683px;width: 43px;height: 43px;display: flex;",
                    "margin-top: 204px;margin-left: 731px;width: 43px;height: 43px;display: flex;",
                ],
                hasValueStyle: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""],
                keyMapping: ["Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "Delete", "Tab", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "Backslash", "PageUp", "CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Enter", "PageDown", "ShiftLeft", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "ShiftRight", "ArrowUp", "End", "ControlLeft", "MetaLeft", "AltLeft", "Space", "MetaRight", "AltRight", "ArrowLeft", "ArrowDown", "ArrowRight"],
                cssText: 'position: absolute;height: 100%;width: 100%;pointer-events: none;',
                BGImage: 'url(./image/Share/KB1.png)',
                BGImageKeyerEffects: 'url(./image/Share/KB1KeyerEffects.png)',
                centerBlockPoint: 37,
                qigong_Step1_Range: [0, 15, 30, 33, 43, 54],
                qigong_Step2_Range: [21, 22, 37, 50, 49, 35],
                KeyTableArray: [[0, 14], [15, 29], [30, 43], [44, 57], [58, 66]],
                imageMaxWidth: 765,
                imageMaxHeight: 308,
            },
            'GMMK Pro ISO': {
                ItemCss: [
                    "margin-top: 17px;margin-left: 22px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 78px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 124px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 169px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 215px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 272px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 317px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 363px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 408px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 465px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 510px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 556px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 602px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 658px;height: 44px;display: flex;",
                    "margin-top: 17px;margin-left: 723px;border-radius: 25px;height: 44px;display: flex;",
                    "margin-top: 72px;margin-left: 22px;height: 44px;display: flex;",
                    "margin-top: 72px;margin-left: 68px;height: 44px;display: flex;",
                    "margin-top: 71px;margin-left: 113px;height: 44px;display: flex;",
                    "margin-top: 71px;margin-left: 158px;height: 44px;display: flex;",
                    "margin-top: 71px;margin-left: 203px;height: 44px;display: flex;",
                    "margin-top: 72px;margin-left: 249px;height: 44px;display: flex;",
                    "margin-top: 71px;margin-left: 294px;height: 44px;display: flex;",
                    "margin-top: 71px;margin-left: 339px;height: 44px;display: flex;",
                    "margin-top: 71px;margin-left: 386px;height: 44px;display: flex;",
                    "margin-top: 71px;margin-left: 432px;height: 44px;display: flex;",
                    "margin-top: 71px;margin-left: 477px;height: 44px;display: flex;",
                    "margin-top: 71px;margin-left: 522px;height: 44px;display: flex;",
                    "margin-top: 71px;margin-left: 565px;height: 44px;display: flex;",
                    "margin-top: 71px;margin-left: 612px;width: 88px;height: 44px;display: flex;",
                    "margin-top: 72px;margin-left: 723px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 22px;width: 67px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 91px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 136px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 182px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 227px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 272px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 317px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 363px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 408px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 454px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 499px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 544px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 589px;height: 44px;display: flex;",
                    "margin-top: 118px;margin-left: 722px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 19px;width: 82px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 102px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 148px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 193px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 238px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 283px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 328px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 373px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 419px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 465px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 510px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 555px;height: 44px;display: flex;",
                    "margin-top: 163px;margin-left: 599px;width: 44px;height: 44px;display: flex;",
                    "width: 58px;margin-top: 159px;margin-left: 646px;height: 83px;\
                clip-path: polygon(0px 0px, 100% 0px, 100% 100%, 20% 100%, 21% 48%, 0px 48%);border-radius: 8px;display: flex;transform: translate(-7px, -40px);",
                    "width: 47px;margin-top: 163px;margin-left: 719px;height: 44px;display: flex;",
                    "width: 57px;margin-top: 208px;margin-left: 22px;height: 44px;display: flex;",
                    "width: 43px;margin-top: 208px;margin-left: 80px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 125px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 170px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 216px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 261px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 306px;height: 44px;display: flex;",
                    "margin-top: 209px;margin-left: 352px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 397px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 442px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 487px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 533px;width: 43px;height: 44px;display: flex;",
                    "margin-top: 208px;margin-left: 578px;height: 44px;width: 77px;display: flex;",
                    "width: 45px;margin-top: 216px;margin-left: 666px;height: 44px;display: flex;",
                    "width: 47px;margin-top: 209px;margin-left: 720px;height: 44px;display: flex;",
                    "width: 56px;height: 44px;margin-top: 253px;margin-left: 23px;display: flex;",
                    "width: 56px;height: 44px;margin-top: 253px;margin-left: 80px;display: flex;",
                    "width: 56px;height: 44px;margin-top: 253px;margin-left: 137px;display: flex;",
                    "width: 280px;height: 44px;margin-top: 253px;margin-left: 194.5px;border-radius: 8px;display: flex;",
                    "height: 44px;margin-top: 253px;margin-left: 476px;display: flex;",
                    "height: 44px;margin-top: 253px;margin-left: 521px;display: flex;",
                    "height: 44px;margin-top: 253px;margin-left: 567px;display: flex;",
                    "height: 44px;margin-top: 263px;margin-left: 621px;display: flex;",
                    "height: 44px;margin-top: 263px;margin-left: 667px;display: flex;",
                    "height: 44px;margin-top: 263px;margin-left: 712px;display: flex;",
                ],
                hasValueStyle: [
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "margin-left: 15px",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                    "",
                ],
                keyMapping: [
                    "Escape", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "PrintScreen", "ScrollWheel", "Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "Delete", "Tab", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "PageUp", "CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Backslash", "Enter", "PageDown", "ShiftLeft", "IntlBackslash", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "ShiftRight", "ArrowUp", "End", "ControlLeft", "MetaLeft", "AltLeft", "Space", "AltRight", "Custom_Fnkey", "ControlRight", "ArrowLeft", "ArrowDown", "ArrowRight"
                ],
                cssText: 'position: absolute;height: 100%;width: 100%;pointer-events: none;',
                BGImage: 'url(./image/Share/KB1.png)',
                BGImageKeyerEffects: 'url(./image/Share/KB1KeyerEffects.png)',
                centerBlockPoint: 37,
                qigong_Step1_Range: [0, 15, 30, 58, 71, 82],
                qigong_Step2_Range: [22, 23, 38, 52, 51, 36],
                KeyTableArray: [[0, 14], [15, 29], [30, 44], [45, 58], [59, 72], [73, 82]],
                imageMaxWidth: 765,
                imageMaxHeight: 308,
            },
            'GMMK_V2_96US': {
                ItemCss: [
                    "margin-top: 11px;margin-left: 10px;height: 39px;width: 36px;display: flex;",
                    "margin-top: 10px;margin-left: 61px;height: 39px;width: 36px;display: flex;",
                    "margin-top: 10px;margin-left: 103px;height: 39px;width: 36px;display: flex;",
                    "margin-top: 10px;margin-left: 143px;height: 39px;width: 36px;display: flex;",
                    "margin-top: 10px;margin-left: 185px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 236px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 277px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 318px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 359px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 410px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 451px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 493px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 533px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 584px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 636px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 677px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 718px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 10px;margin-left: 760px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 10px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 51px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 92px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 133px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 175px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 215px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 257px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 298px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 338px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 379px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 420px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 461px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 502px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 544px;width: 76px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 636px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 677px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 718px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 55px;margin-left: 759px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 8px;width: 60px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 72px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 113px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 154px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 195px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 236px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 277px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 317px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 358px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 399px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 440px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 481px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 522px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 562px;width: 58px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 635px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 677px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 718px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 95px;margin-left: 759px;width: 36px;height: 80px;display: flex;",
                    "margin-top: 136px;margin-left: 12px;width: 64px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 82px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 122px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 163px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 204px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 246px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 287px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 328px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 368px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 409px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 450px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 491px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 534px;width: 86px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 635px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 677px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 136px;margin-left: 717px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 12px;width: 86px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 104px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 145px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 186px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 226px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 267px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 308px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 349px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 390px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 431px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 472px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 512px;width: 68px;height: 39px;display: flex;",
                    "margin-top: 183px;margin-left: 590px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 636px;width: 36px;height: 39px;display: flex;",
                    "margin-top: 178px;margin-left: 677px;width: 36px;height: 39px;",
                    "margin-top: 178px;margin-left: 717px;width: 36px;height: 39px;",
                    "margin-top: 178px;margin-left: 758px;width: 36px;height: 79px;",
                    "margin-top: 218px;margin-left: 12px;width: 44px;height: 39px;",
                    "margin-top: 218px;margin-left: 64px;width: 44px;height: 39px;display: flex;",
                    "margin-top: 218px;margin-left: 114px;width: 44px;height: 39px;display: flex;",
                    "margin-top: 218px;margin-left: 165px;width: 249px;height: 39px;display: flex;border-radius: 5px;",
                    "margin-top: 221px;margin-left: 421px;width: 35px;height: 36px;display: flex;",
                    "margin-top: 221px;margin-left: 462px;width: 35px;height: 36px;display: flex;",
                    "margin-top: 221px;margin-left: 503px;width: 35px;height: 36px;",
                    "margin-top: 225px;margin-left: 550px;width: 35px;height: 36px;display: flex;",
                    "margin-top: 225px;margin-left: 590px;width: 35px;height: 36px;display: flex;",
                    "margin-top: 225px;margin-left: 632px;width: 35px;height: 36px;display: flex;",
                    "margin-top: 220px;margin-left: 677px;width: 35px;height: 36px;",
                    "margin-top: 220px;margin-left: 718px;width: 35px;height: 36px;",
                ],
                hasValueStyle: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""],
                keyMapping: ["Escape", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12", "PrintScreen", "Delete", "Insert", "PageUp", "PageDown", "Backquote", "Digit1", "Digit2", "Digit3", "Digit4", "Digit5", "Digit6", "Digit7", "Digit8", "Digit9", "Digit0", "Minus", "Equal", "Backspace", "NumLock", "NumpadDivide", "NumpadMultiply", "NumpadSubtract", "Tab", "KeyQ", "KeyW", "KeyE", "KeyR", "KeyT", "KeyY", "KeyU", "KeyI", "KeyO", "KeyP", "BracketLeft", "BracketRight", "Backslash", "Numpad7", "Numpad8", "Numpad9", "NumpadAdd", "CapsLock", "KeyA", "KeyS", "KeyD", "KeyF", "KeyG", "KeyH", "KeyJ", "KeyK", "KeyL", "Semicolon", "Quote", "Enter", "Numpad4", "Numpad5", "Numpad6", "ShiftLeft", "KeyZ", "KeyX", "KeyC", "KeyV", "KeyB", "KeyN", "KeyM", "Comma", "Period", "Slash", "ShiftRight", "ArrowUp", "Numpad1", "Numpad2", "Numpad3", "NumpadEnter", "ControlLeft", "MetaLeft", "AltLeft", "Space", "AltRight", "Custom_Fnkey", "ControlRight", "ArrowLeft", "ArrowDown", "ArrowRight", "Numpad0", "NumpadDecimal"],
                cssText: 'position: absolute;height: 100%;width: 100%;pointer-events: none;',
                BGImage: 'url(./image/Share/KB1.png)',
                BGImageKeyerEffects: 'url(./image/Share/KB1KeyerEffects.png)',
                centerBlockPoint: 62,
                qigong_Step1_Range: [0, 18, 36, 69, 86, 98],
                qigong_Step2_Range: [44, 45, 63, 78, 77, 61],
                KeyTableArray: [[0, 17], [18, 35], [36, 53], [54, 69], [70, 86], [87, 98]],
                imageMaxWidth: 765,
                imageMaxHeight: 308,
            },
        };
    }
    KeyBoardStyle.prototype.getAssignTarget = function (name) {
        //console.log("keyBoardList",this.keyBoardList,this.nowTargetKey);
        return this.keyBoardList[name];
    };
    KeyBoardStyle.prototype.getTarget = function () {
        //console.log("keyBoardList",this.keyBoardList,this.nowTargetKey);
        return this.keyBoardList[this.nowTargetKey];
    };
    KeyBoardStyle.prototype.getTargetKeyBoradUIcss = function (id) {
        //console.log("getTargetKeyBoradUIcss",id);
        //document.getElementById(id).style.cssText=this.keyBoardList[this.nowTargetKey].cssText;
        var T1 = document.getElementById(id);
        if ((T1.dataset.UITransparent = 'RGBTransparent')) {
            T1.style.backgroundImage = this.keyBoardList[this.nowTargetKey].BGImageKeyerEffects;
        }
        else {
            T1.style.backgroundImage = this.keyBoardList[this.nowTargetKey].BGImage;
        }
        //return this.keyBoardList[this.nowTargetKey].cssText;
    };
    KeyBoardStyle.prototype.getAssignKBCssStyles = function (name) {
        var target = document.getElementById(name);
        var targetArray = target.getElementsByClassName('SyncRGBColorBlockStyle');
        var targetUI = target.getElementsByClassName('RGBKeyBoardUITransparent');
        targetUI[0].style.backgroundImage = this.keyBoardList[name].BGImageKeyerEffects;
        for (var _i = 0, _a = Object.entries(this.getAssignTarget(name).ItemCss); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            targetArray[key].style.cssText += value;
            //console.log(key, value);
        }
    };
    KeyBoardStyle.prototype.getTargetDefaultKeyArray = function () {
        return this.getTarget().keyMapping;
    };
    KeyBoardStyle.prototype.findKeyMappingIndex = function (code) {
        if (code === void 0) { code = ""; }
        var targetIndex = this.getTargetDefaultKeyArray().findIndex(function (x) { return x == code; });
        if (targetIndex == -1) {
            //console.error('this.nowMacroSelect.m_Identifier', this.nowMacroSelect.m_Identifier);
            //alert('findKeyMappingIndex=lost' + code);
            console.log('findKeyMappingIndex=lostcode', code);
        }
        return targetIndex;
    };
    KeyBoardStyle.prototype.applyStyles = function (target) {
        //this.getTargetKeyBoradUIcss('RGBKeyBoardUITransparent')
        //console.log("applyStyles", this.getTarget().ItemCss,target);
        this.getTarget().ItemCss.forEach(function (element, index) {
            //console.log("applyStyles_element", element);
            if (target[index]) {
                //console.log("applyStyles_ItemCss_"+index, target[index].style.cssText);
                target[index].style.cssText = element;
            }
            else {
                console.log("applyStyles_ItemCss.forEach_Err", target[index], index);
            }
        });
        this.getTarget().keyMapping.forEach(function (element, index) {
            if (target[index]) {
                target[index].setAttribute('keyMapping', element);
                //console.log("applyStyles_keyMapping", index);
            }
            else {
                console.log("applyStyles_keyMapping.forEach_Err", "color:red", target[index], index);
            }
            //element.setAttribute('keyMapping', index);
        });
        // for (const [key, value] of Object.entries(this.getTarget().ItemCss)) {
        //     //element.style.width = '100px'
        //     //if(key!=="target" &&key!=="cssText"){
        //     target[key].style.cssText += value
        //     //target[key].style.width = value;
        //     //console.log(key, value);
        //     //}
        // }
    };
    KeyBoardStyle = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [])
    ], KeyBoardStyle);
    return KeyBoardStyle;
}());



/***/ }),

/***/ "./src/app/KeyBoard_RGBFolder/KeyBoard_RGB.css":
/*!*****************************************************!*\
  !*** ./src/app/KeyBoard_RGBFolder/KeyBoard_RGB.css ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n:host{\r\n    width: 100%;height:100%;\r\n    background-color: #45c1a6;\r\n    opacity: 0.8;\r\n    background-image:  linear-gradient(#cd1ef9 1px, transparent 1px), linear-gradient(to right, #cd1ef9 1px, #45c1a6 1px);\r\n    background-size: 20px 20px;\r\n    \r\n}\r\n\r\n.KeyboardPageScroll{\r\n    overflow: auto;\r\n    display: none;\r\n}\r\n\r\n.KeyboardPageScroll ::-webkit-scrollbar-track {\r\n    /* border: 1px solid red;*/\r\n    background-repeat: no-repeat;\r\n}\r\n\r\n.KeyboardPageScroll::-webkit-scrollbar-thumb {\r\n    /* border-radius: 10px; */\r\n    box-shadow: inset 0 0 6px rgba(0, 0, 0, .3);/* border: 1px solid yellow; */\r\n    background-repeat: no-repeat;\r\n    background-color: rgb(42, 42, 42);\r\n}\r\n\r\n.KeyboardPageScroll::-webkit-scrollbar {\r\n    width: 15px;\r\n    display: none;\r\n}\r\n\r\n.KeyboardPageScroll::-webkit-scrollbar-button:vertical:decrement {\r\n    background-image: url('/image/ColorSet/UpArrow.png');\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n}\r\n\r\n.KeyboardPageScroll::-webkit-scrollbar-button:vertical:increment {\r\n    background-image: url('/image/ColorSet/DownArrow.png');\r\n\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n}"

/***/ }),

/***/ "./src/app/KeyBoard_RGBFolder/KeyBoard_RGB.html":
/*!******************************************************!*\
  !*** ./src/app/KeyBoard_RGBFolder/KeyBoard_RGB.html ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div id=\"TopFunction\">\r\n    <div class=\"ClassName\" style=\"color: red;font-size: 1.3vw;\">speed </div>\r\n    <input id=\"PRESETS_RateSlider\" type=\"range\" min=\"0\" max=\"100\" class=\"slider\" style=\"width: 13vw;\" step=\"5\"\r\n        [(ngModel)]=\"this.Built_ineffect.Built_inSelected.speed\" (mouseup)=\"sliderChange()\"\r\n        (ngModelChange)=\"lightSliderMove('PRESETS_RateSlider')\" onkeydown=\"event.preventDefault()\">\r\n\r\n    <div class=\"ClassName\" style=\"color: red;font-size: 1.3vw;\">brightness </div>\r\n    <input id=\"PERKEY_BrightnessSlider\" type=\"range\" min=\"0\" max=\"100\" class=\"slider\" style=\"width: 13vw;\" step=\"5\"\r\n        [(ngModel)]=\"this.Built_ineffect.Built_inSelected.brightness\" (mouseup)=\"sliderChange()\"\r\n        (ngModelChange)=\"lightSliderMove('PERKEY_BrightnessSlider')\" onkeydown=\"event.preventDefault()\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"GMMK_imgVisible()\" onkeydown=\"\" value=\"GMMK_imgVisible\"\r\n        class=\"ButtonStyle\" style=\"width: 12.8vw;\">\r\n</div>\r\n<div id=\"dropList\" class=\"KeyboardPageScroll\" style=\"width: 15vw;\r\n    height: 100%;\r\n    display: flex;\r\n    flex-wrap: wrap;\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('FastRunWithoutTrace',[255,255,0,1],false)\" onkeydown=\"\"\r\n        value=\"mode_FastRunWithoutTrace\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('ConicRipple',[0,0,255,1],false)\" onkeydown=\"\"\r\n        value=\"mode_ConicRipple\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('Conical_Diffusion',[0,0,255,1],false)\" onkeydown=\"\"\r\n        value=\"mode_Conical_Diffusion\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('FastRunWithoutTrace',[255,255,0,1],true)\" onkeydown=\"\"\r\n        value=\"mode_FastRunWithoutTraceRainbow\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('mode_TrainMove',[255,255,0,1],true);\" onkeydown=\"\"\r\n        value=\"mode_TrainMove\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('AcidMode')\" onkeydown=\"\" value=\"mode_gloriousMode\"\r\n        class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('Snowing',[255,255,0,1],false)\" onkeydown=\"\"\r\n        value=\"mode_Snowing\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('Matrix3',[255,255,0,1],false)\" value=\"mode_Matrix3\"\r\n        class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('Matrix3',[255,255,0,1],true)\" value=\"mode_Matrix3Multicolor\"\r\n        class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('Matrix2',[255,255,0,1],false)\" value=\"mode_Matrix2\"\r\n        class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('Matrix2',[255,255,0,1],true)\" value=\"mode_Matrix2Multicolor\"\r\n        class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('Starlight',[255,255,0,1],false)\" onkeydown=\"\"\r\n        value=\"mode_Starlight\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('DigitTimes',[255,255,0,1],false)\" onkeydown=\"\"\r\n        value=\"mode_DigitTimes\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('DigitTimes',[255,255,0,1],true)\" onkeydown=\"\"\r\n        value=\"mode_DigitTimesMulticolor\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('PassWithoutTrace',[255,0,0,1],false)\" onkeydown=\"\"\r\n        value=\"PassWithoutTrace\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('PassWithoutTrace',[255,0,0,1],true)\" onkeydown=\"\"\r\n        value=\"PassWithoutTraceMulticolor\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('HeartbeatSensor',[255,255,0,1],false)\" onkeydown=\"\"\r\n        value=\"mode_HeartbeatSensor\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('HeartbeatSensor',[255,255,0,1],true)\" onkeydown=\"\"\r\n        value=\"mode_HeartbeatSensor_Rainbow\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('Rainbow',[255,255,0,1],true)\" onkeydown=\"\" value=\"mode_Rainbow\"\r\n        class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('mode_SlopeRight',[255,255,0,1],true)\" onkeydown=\"\"\r\n        value=\"mode_SlopeRight\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('WaveSync',[255,255,0,1],false)\" onkeydown=\"\"\r\n        value=\"mode_WaveSync\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('Wave1',[0,0,255,1],false)\" onkeydown=\"\" value=\"mode_Wave1\"\r\n        class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('Wave2',[0,0,255,1],true)\" onkeydown=\"\"\r\n        value=\"mode_Wave1_Rainbow\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('Wave2',[0,0,255,1],false)\" onkeydown=\"\" value=\"mode_Wave2\"\r\n        class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('Wave2',[0,0,255,1],true)\" onkeydown=\"\"\r\n        value=\"mode_Wave2_Rainbow\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('mode_Spiral',[0,0,255,1],false);\" onkeydown=\"\"\r\n        value=\"mode_Spiral\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('mode_Spiral',[0,0,255,1],true);\" onkeydown=\"\"\r\n        value=\"mode_Spiral_Rainbow\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('mode_Cooking',[0,0,255,1],true);\" onkeydown=\"\"\r\n        value=\"mode_Cooking\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('RippleGraff',[0,0,255,1],true)\" onkeydown=\"\"\r\n        value=\"mode_RippleGraff\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('Cross',[255,255,0,1],false)\" onkeydown=\"\" value=\"mode_Cross\"\r\n        class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('RippleGraff',[255,255,0,1],false)\" onkeydown=\"\"\r\n        value=\"mode_RippleGraff_Single\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('Blossom',[255,255,0,1],false)\" onkeydown=\"\"\r\n        value=\"mode_Blossom\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('Breathing',[0,0,255,1],true)\" onkeydown=\"\"\r\n        value=\"mode_BreathingMulticolor\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('Breathing',[0,0,255,1],false)\" onkeydown=\"\"\r\n        value=\"mode_Breathing\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('NormallyOn',[0,0,255,1],false)\" onkeydown=\"\"\r\n        value=\"mode_NormallyOn\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('NormallyOn',[0,0,255,1],true)\" onkeydown=\"\"\r\n        value=\"mode_NormallyOnMulticolor\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('AcidMode',[0,0,255,1],false)\" onkeydown=\"\"\r\n        value=\"mode_AcidMode\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('Kamehemeha',[255,255,0,1],true)\" onkeydown=\"\"\r\n        value=\"mode_Kamehemeha_rainbow\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('Kamehemeha',[255,255,0,1],false)\" onkeydown=\"\"\r\n        value=\"mode_Kamehemeha_Single\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('mode_Wave1',[255,255,0,1],false)\" onkeydown=\"\" \r\n    value=\"mode_Wave1\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('mode_Wave1',[255,255,0,1],true)\" onkeydown=\"\"\r\n        value=\"mode_Wave1_rainbow\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('Pingpong',[0,0,255,1],true)\" onkeydown=\"\"\r\n        value=\"mode_Pingpong_rainbow\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('Pingpong',[0,0,255,1],false)\" onkeydown=\"\"\r\n        value=\"mode_Pingpong\" class=\"ButtonStyle\">\r\n    <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('Surmount',[0,0,255,1],false)\" onkeydown=\"\"\r\n        value=\"mode_Surmount\" class=\"ButtonStyle\">\r\n        <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('Retro_snake',[0,0,255,1],false)\" onkeydown=\"\"\r\n        value=\"mode_Retro_snake\" class=\"ButtonStyle\">\r\n        <input type=\"button\" id=\"AddSpace\" (click)=\"setMode('Shadow_disappear',[0,0,255,1],false)\" onkeydown=\"\"\r\n        value=\"mode_Shadow_disappear\" class=\"ButtonStyle\">\r\n    <BR>\r\n</div>\r\n\r\n<!-- background: linear-gradient(-225deg, rgba(0,0,0,0.6) 50%, rgba(0,36,61,0.6) 80%), -->\r\n<div id=\"EventCanBoxSelectRange\" style=\"position: absolute;\r\nleft: 23vw;\r\ntop: 20%;\" class=\"Keyboard-content\">\r\n    <div id=\"GMMK_0x320F0x5044\" class=\"Content1\">\r\n        <div style=\"position: absolute; display: flex\">\r\n            <img id=\"GMMK_img\" src=\"./app/GMMK3.png\"\r\n                style=\"width: 834px; height: 372px; z-index: 3;\" />\r\n            <div id=\"keyAssignPrompt\" style=\"\r\n                              position: absolute;\r\n                              margin-top: -146px;\r\n                              margin-left: -65px;\r\n                              visibility: visible;\r\n                              width: 130px;\r\n                              display: flex;\r\n                              height: 117px;\r\n                              justify-content: center;\r\n                              align-items: flex-end;\r\n                              background-image: url('./image/keybinding/Indicator.png');\r\n                              z-index: 5;\r\n                          \" [style.display]=\"keybindingflag && !this.KeyBoardManager.notClickedYet ? 'flex' : 'none'\">\r\n                <div id=\"keyAssignPromptline\"\r\n                    style=\"background-color: rgb(255, 255, 255); position: absolute; width: 1px; display: flex\"></div>\r\n                <div id=\"KeyDefaultValue\" style=\"\r\n                                  color: white;\r\n                                  margin-bottom: 84px;\r\n                                  width: 50%;\r\n                                  text-overflow: ellipsis;\r\n                                  overflow: hidden;\r\n                                  white-space: nowrap;\r\n                                  text-align: center;\r\n                              \">\r\n                    {{ this.KeyBoardManager.getTarget().getNowModeTargetMatrixKey().defaultValue }}\r\n                </div>\r\n                <div id=\"SingleKeyClass\" style=\"position: absolute; color: white; margin-top: -57px\">\r\n                    {{ this.KeyBoardManager.getTarget().getNowModeTargetMatrixKey().recordBindCodeType }}\r\n                </div>\r\n                <div id=\"SingleKeyAssignValue\" style=\"    position: absolute;\r\n                                                  color: white;\r\n                                                  margin-top: -25px;\r\n                                                  width: 50%;\r\n                                                  text-overflow: ellipsis;\r\n                                                  overflow: hidden;\r\n                                                  white-space: nowrap;\r\n                                                  text-align: center;\r\n                                                  \">\r\n                    {{ switchChangAllkey() }}\r\n                </div>\r\n            </div>\r\n            <!-- [style.background-color]=\"this.M_Light_CS.getIndexRGBCss(i)\" -->\r\n            <div id=\"KeyLightUI_section\" style=\"position: absolute;\r\n                      display: flex;\r\n                      WIDTH:  834px;\r\n                      HEIGHT: 372px;\">\r\n                <div [style.display]=\"lightingflag?'flex':'none'\"\r\n                    *ngFor=\"let item of KeyBoardStyle.getTarget().keyMapping; let i = index\" class=\"RGBColorBlockStyle\"\r\n                    [attr.data-index]=\"i\"\r\n                    [ngStyle]=\"{'background':this.M_Light_CS.getIndexRGBCss(i)}\">\r\n                </div>\r\n            </div>\r\n            <!-- -->\r\n            <!-- <div id=\"KeyAssignBlock_section\" style=\"position: absolute;\r\n                      display: flex;\r\n                      WIDTH: auto;\r\n                      HEIGHT: 100%;\">\r\n                          <div id=\"KeyAssignBlock\" [style.display]=\"keybindingflag ? 'flex' : 'none'\"\r\n                              *ngFor=\"let item of KeyBoardStyle.getTarget().keyMapping; let i = index\"\r\n                              (mouseover)=\"this.KeyBoardManager.getTarget().keyHoverIndex = i\" [style.background-color]=\"setkeyUIColor(i)\" \r\n                              class=\"KeyAssignUIStyle\">\r\n                              <div [ngClass]=\"{KeyAssignHasValue:this.KeyBoardManager.getTarget().getNowModeKeyMatrix()[i].changed}\" class=\"KeyAssignHasValue\"></div>\r\n                          </div>\r\n                      </div> -->\r\n\r\n        </div>\r\n    </div>\r\n\r\n\r\n</div>\r\n\r\n\r\n<!-- <div *ngIf=\"this.CurrentPageName=='Built-ineffects'\" [style.display]=\"Built_ineffect.getTarget().colors.length>0?'block': 'none'\"\r\n    id=\"color-picker-container\" >\r\n        <div id=\"Built_inColorPickingArea\" class=\"PickingArea\" [style.background-color]=\"Built_inColor.gradientBGcolor\"\r\n        style=\"display: none;\">\r\n            <div id=\"Built_inColorCircle\" class=\"circle\">\r\n            </div>\r\n        </div>\r\n        <input style=\"display:none;\" id=\"ColorSliderH\" type=\"range\" min=\"0\" max=\"359\" step=\"1\" [(ngModel)]=\"Built_inColor.Hue\" (ngModelChange)='LedColorhueChange()'>\r\n        <div class=\"colorBaseList\" style=\"left: -4%;top: 21%;\">\r\n            <div *ngFor=\"let item of this.Built_ineffect.getTarget().colors ;let i = index\" class=\"colorBase\"\r\n                (click)=\"built_inColor_OnclickColorDefault($event.target,i)\" id=\"colorBase{{i}}\"\r\n                [style.background-color]=\"Built_inColor.toCssRGB(item)\">\r\n            </div>\r\n        </div>\r\n        \r\n    \r\n    </div> -->\r\n"

/***/ }),

/***/ "./src/app/KeyBoard_RGBFolder/KeyBoard_RGB.ts":
/*!****************************************************!*\
  !*** ./src/app/KeyBoard_RGBFolder/KeyBoard_RGB.ts ***!
  \****************************************************/
/*! exports provided: AppComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(System) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppComponent", function() { return AppComponent; });
/* harmony import */ var _KeyAssignManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./KeyAssignManager */ "./src/app/KeyBoard_RGBFolder/KeyAssignManager.ts");
/* harmony import */ var _KeyBoardManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./KeyBoardManager */ "./src/app/KeyBoard_RGBFolder/KeyBoardManager.ts");
/* harmony import */ var _KeyBoardStyle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./KeyBoardStyle */ "./src/app/KeyBoard_RGBFolder/KeyBoardStyle.ts");
/* harmony import */ var _M_Light_CS__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./M_Light_CS */ "./src/app/KeyBoard_RGBFolder/M_Light_CS.ts");
/* harmony import */ var _Built_ineffect__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Built_ineffect */ "./src/app/KeyBoard_RGBFolder/Built_ineffect.ts");
/* harmony import */ var _module_SupportData__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../module/SupportData */ "./src/module/SupportData.js");
/* harmony import */ var _module_SupportData__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_module_SupportData__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var AppComponent = /** @class */ (function () {
    function AppComponent(
    //private macroService: MacroService,
    cdr) {
        var _this = this;
        this.cdr = cdr;
        this.SideLightAreaArr = [false, false, false, false, false, false, false, false, false, false];
        this.SideLightAreaFlag = false;
        this.LightingGroupFunction = 1;
        //KeyboardKeyData: any = KeyMapping
        //Shortcuts_WindowsMapping: any = Shortcuts_WindowsMapping
        this.lightingflag = true;
        this.keybindingflag = false;
        this.performanceflag = false;
        this.RateValue = 60;
        this.OpacityValue = 60;
        this.WiredBrightnessValue = 60;
        this.WirelessBrightnessValue = 60;
        this.SepatateCheckValue = false;
        this.ColorData = [];
        this.Color = 'FF00FF';
        this.ColorMiniNum = 1;
        this.DeleteFlag = false;
        this.AddFlag = false;
        this.DeleteColorIconFlag = true;
        this.KeyBoardStyle = new _KeyBoardStyle__WEBPACK_IMPORTED_MODULE_2__["KeyBoardStyle"]();
        this.M_Light_CS = new _M_Light_CS__WEBPACK_IMPORTED_MODULE_3__["M_Light_CS"](83);
        this.KeyBoardManager = new _KeyBoardManager__WEBPACK_IMPORTED_MODULE_1__["KeyBoardManager"](83);
        this.KeyAssignManager = new _KeyAssignManager__WEBPACK_IMPORTED_MODULE_0__["KeyAssignManager"]();
        this.Built_ineffect = new _Built_ineffect__WEBPACK_IMPORTED_MODULE_4__["Built_ineffect"]();
        //Profile
        this.ProfileData = [];
        this.PollingRateData = [
            { name: '125Hz', value: 125, translate: '125Hz' },
            { name: '250Hz', value: 250, translate: '250Hz' },
            { name: '500Hz', value: 500, translate: '500Hz' },
            { name: '1000Hz', value: 1000, translate: '1000Hz' },
        ];
        this.buttonNum = 0;
        this.GMMK_imgFlag = false;
        this.bindPassiveEffectEvent = function (event) {
            //console.log("KeyShortcut_event.keyCode", event.keyCode);
            var recordValue = _module_SupportData__WEBPACK_IMPORTED_MODULE_5__["AllFunctionMapping"].find(function (x) { return x.code == event.code; });
            var index2 = _this.KeyBoardStyle.findKeyMappingIndex(recordValue.code);
            console.log("recordValue", recordValue);
            console.log("index2", index2);
            _this.M_Light_CS.currentBlockIndex = index2;
            var obj = {
                PointEffectName: _this.M_Light_CS.lightData.PointEffectName,
                colorPickerArr: _this.M_Light_CS.lightData.colorPickerValue,
                Multicolor: true,
                BlockIndex: index2,
            };
            //this.Built_ineffect.Built_inSelected=obj;
            _this.setPassiveEffect(obj);
        };
        console.log('KeyboardComponent__ciphertext', _module_SupportData__WEBPACK_IMPORTED_MODULE_5__["AllFunctionMapping"]);
        console.log('KeyboardComponent__ciphertext', System);
    }
    AppComponent.prototype.setkeyUIColor = function () {
    };
    AppComponent.prototype.ngOnInit = function () {
        //this.M_Light_CS.lightData=this.default_LightData();
        this.M_Light_CS.lightData = this.Built_ineffect.getTarget();
        var temp_data = this.KeyBoardStyle.getTarget();
        console.log('%c KeyBoardStyle.getTarget', 'color:rgb(255,75,255,1)', temp_data);
        this.M_Light_CS.qigong_Step1_Range = temp_data.qigong_Step1_Range;
        this.M_Light_CS.qigong_Step2_Range = temp_data.qigong_Step2_Range;
        this.M_Light_CS.setKeyTableArray(temp_data.KeyTableArray);
        this.M_Light_CS.imageMaxWidth = temp_data.imageMaxWidth;
        this.M_Light_CS.imageMaxHeight = temp_data.imageMaxHeight;
    };
    AppComponent.prototype.ngOnDestroy = function () {
        console.log('Keyboardpage Destory');
        //this.ModelPreview.ClosePreview();
        document.removeEventListener('keydown', this.bindPassiveEffectEvent);
    };
    AppComponent.prototype.ngDoCheck = function () { };
    AppComponent.prototype.ngAfterViewChecked = function () {
        //Called after every check of the component's view. Applies to components only.
        //Add 'implements AfterViewChecked' to the class.
    };
    AppComponent.prototype.ngAfterViewInit = function () {
        //Called after ngAfterContentInit when the component's view has been initialized. Applies to components only.
        //Add 'implements AfterViewInit' to the class.
        //this.macroService.setMacroPageEnter();
        this.LightPageRegisterEvent_Box_selection();
        this.DeveloperControl();
    };
    AppComponent.prototype.switchChangAllkey = function () {
    };
    AppComponent.prototype.LightPageRegisterEvent_Box_selection = function () {
        //var RGBCBSList = this.elementRef.nativeElement.querySelectorAll('.RGBColorBlockStyle')
        //console.log('RGBCBSList', RGBCBSList)
        //this.M_Light_CS.BSApage1.setSelectContainer('EventCanBoxSelectRange')
        var RGBCBSList = document.getElementsByClassName('RGBColorBlockStyle');
        this.KeyBoardStyle.applyStyles(RGBCBSList);
        console.log('%c LightPageRegisterEvent_Box_selection', 'color:rgb(255,77,255)', RGBCBSList);
        // RGBCBSList
        // var coordinates = document.getElementsByClassName('RGBColorBlockStyle') as HTMLCollectionOf<HTMLElement>;
        // var element = coordinates[0] as HTMLElement;
        // this.BoxSelectFnArrP1[0] = (e: MouseEvent) => {
        //     this.M_Light_CS.BSApage1.mousedown(e)
        // }
        // this.BoxSelectFnArrP1[1] = (e: MouseEvent) => {
        //     this.M_Light_CS.BSApage1.mousemove(e)
        // }
        // this.BoxSelectFnArrP1[2] = (e: MouseEvent) => {
        //     if (this.M_Light_CS.BSApage1.mouseup(e) == 'Finish') {
        //         this.M_Light_CS.setModeFrameRange()
        //         //this.setColorDataToServer('setModeFrameRange')
        //     }
        // }
        // this.M_Light_CS.BSApage1.selectContainer.addEventListener('mousedown', this.BoxSelectFnArrP1[0])
        // this.M_Light_CS.BSApage1.selectContainer.addEventListener('mousemove', this.BoxSelectFnArrP1[1])
        // this.M_Light_CS.BSApage1.selectContainer.addEventListener('mouseup', this.BoxSelectFnArrP1[2])
        for (var index = 0; index < RGBCBSList.length; index++) {
            var element = RGBCBSList[index];
            element.setAttribute('data-index', String(index));
            //element.setAttribute('coordinate',String(element.style.width));
            element.setAttribute('coordinate', String(element));
            var obj = {
                "clientHeight": element.clientHeight,
                "clientWidth": element.clientWidth,
                "offsetLeft": element.offsetLeft,
                "offsetTop": element.offsetTop,
                "scroll": element.scroll,
                "top_Left": [element.offsetLeft, element.offsetTop],
                "top_Right": [element.offsetLeft + element.clientWidth, element.offsetTop],
                "bottom_Left": [element.offsetLeft, element.offsetTop + element.clientHeight],
                "bottom_Right": [element.offsetLeft + element.clientWidth, element.offsetTop + element.clientHeight],
                "center_Point": [element.offsetLeft + (element.clientWidth / 2), element.offsetTop + (element.clientHeight / 2)],
            };
            this.M_Light_CS.AllBlockColor[index].coordinateData = obj;
            //console.log(String(index), obj);  
        }
        this.M_Light_CS.imageMaxWidth = 765;
        this.M_Light_CS.imageMaxHeight = 308;
    };
    AppComponent.prototype.GMMK_imgVisible = function () {
        var GMMK_img = document.getElementById('GMMK_img');
        //let RateContent = document.getElementById('RateContent')
        //let ColorContent = document.getElementById('ColorContent')
        this.GMMK_imgFlag = !this.GMMK_imgFlag;
        if (this.GMMK_imgFlag) {
            GMMK_img.style.display = 'flex';
        }
        else {
            GMMK_img.style.display = 'none';
        }
        //RateContent.style.display = 'flex'
        //ColorContent.style.display = 'flex'
    };
    AppComponent.prototype.default_LightData = function (defaultcolor) {
        if (defaultcolor === void 0) { defaultcolor = [255, 0, 0, 1]; }
        var T = {
            speed: 50,
            brightness: 50,
            colorHex: '#0000',
            colorPickerValue: defaultcolor,
            breathing: false,
            sideLightSync: false,
            brightness_Enable: false,
            rate_Enable: false,
            color_Enable: false,
            isRainbow: false,
            lightSelected: { name: 'GloriousMode', value: 0, translate: 'GloriousMode', }
        };
        return T;
    };
    AppComponent.prototype.PERKEY_BrightnessSlider_Background = function () {
        //return '-webkit-linear-gradient(left ,#FDBA3B 0%,#FDBA3B ' +50 +'%,#313131 ' +50 +'%, #313131 100%)';
        return '-webkit-linear-gradient(left ,#FDBA3B 0%,#FDBA3B 50%,#313131 50%, #313131 100%)';
    };
    /**
     * Wired Brightness slider move event
     */
    AppComponent.prototype.lightSliderMove = function (TargetName) {
        var showValue;
        if (TargetName == 'PRESETS_BrightnessSlider') {
            showValue = this.M_Light_CS.lightData.brightness;
        }
        if (TargetName == 'PRESETS_RateSlider') {
            showValue = this.Built_ineffect.Built_inSelected.speed;
        }
        console.log('lightSliderMove', TargetName, showValue);
        if (document.getElementById(TargetName)) {
            document.getElementById(TargetName).style.backgroundImage =
                '-webkit-linear-gradient(left ,#FDBA3B 0%,#FDBA3B ' +
                    showValue +
                    '%,#313131 ' +
                    showValue +
                    '%, #313131 100%)';
        }
        this.setNowLightMode();
    };
    AppComponent.prototype.sliderChange = function () {
        this.setNowLightMode();
    };
    AppComponent.prototype.setMode = function (modeName, color, isRainbow) {
        if (color === void 0) { color = [0, 0, 0, 1]; }
        if (isRainbow === void 0) { isRainbow = true; }
        console.log('%c setMode', 'color:rgb(255,77,255)', modeName, color, isRainbow);
        this.Built_ineffect.Built_inSelected.colorPickerValue = color;
        this.Built_ineffect.Built_inSelected.Multicolor = isRainbow;
        this.Built_ineffect.Built_inSelected.PointEffectName = modeName;
        this.Built_ineffect.Built_inSelected.translate = modeName;
        this.setNowLightMode(); //by setMode
        //this.M_Light_CS.setPassiveEffect(obj);
    };
    AppComponent.prototype.setNowLightMode = function () {
        var T_CS = this.M_Light_CS;
        var target = JSON.parse(JSON.stringify(this.Built_ineffect.Built_inSelected));
        var inputColor = [target.colorPickerValue];
        if (inputColor == undefined) {
            console.log('%c setNowLightMode_undefined', 'color:rgb(255,77,255)', T_CS.lightData);
            return;
        }
        this.M_Light_CS.lightData = target;
        T_CS.onSetModeRefresh();
        switch (target.PointEffectName) {
            case 'GloriousMode':
                break;
            case 'SpiralingWave':
                break;
            case 'AcidMode':
                T_CS.mode_AcidMode(inputColor);
                break;
            case 'Breathing':
                if (target.Multicolor) {
                    //T_CS.mode_BreathingMulticolor(inputColor, true);    
                    T_CS.mode_CycleBreath(inputColor, true);
                }
                else {
                    T_CS.mode_CycleBreath(inputColor, false);
                }
                break;
            case 'NormallyOn':
                if (target.Multicolor) {
                    T_CS.mode_NormallyOnMulticolor(inputColor);
                }
                else {
                    T_CS.mode_NormallyOn(inputColor);
                }
                break;
            case 'Matrix2':
                T_CS.mode_Matrix2(inputColor, target.Multicolor);
                break;
            case 'Matrix3':
                T_CS.mode_Matrix3(inputColor, target.Multicolor);
                break;
            case 'Rainbow':
                T_CS.mode_Rainbow();
                break;
            case 'HeartbeatSensor':
                if (target.Multicolor) {
                    T_CS.mode_HeartbeatSensor([[255, 0, 0, 1], [0, 255, 0, 1], [0, 0, 255, 1]]);
                }
                else {
                    T_CS.mode_HeartbeatSensor(inputColor);
                }
                break;
            case 'DigitTimes':
                if (target.Multicolor) {
                    T_CS.mode_DigitTimes([[255, 0, 0, 1], [0, 255, 0, 1], [0, 0, 255, 1]]);
                }
                else {
                    T_CS.mode_DigitTimes(inputColor);
                }
                break;
            case 'Kamehemeha':
                T_CS.mode_Kamehemeha(inputColor, target.Multicolor);
                break;
            case 'Pingpong':
                T_CS.mode_Pingpong(inputColor, target.Multicolor);
                break;
            case 'Surmount':
                T_CS.mode_Surmount(inputColor, target.Multicolor, T_CS.centerBlockPoint);
                break;
            case 'Retro_snake':
                T_CS.mode_Retro_snake(inputColor, [1, 2, 3, 4, 66, 40, 36]);
                break;
            case 'LEDOFF':
                T_CS.mode_LEDOFF();
                break;
            case 'Starlight':
                T_CS.mode_Starlight(inputColor);
                break;
            case 'Snowing':
                T_CS.mode_Snowing(inputColor, target.Multicolor);
                break;
            case 'WaveSync':
                T_CS.mode_WaveSync(inputColor, true, 20);
                break;
            case 'Wave1':
                if (target.Multicolor) {
                    T_CS.mode_WaveSync(inputColor, true, 80, 150);
                }
                else {
                    T_CS.mode_WaveSync(inputColor, false, 100, 250);
                }
                break;
            case 'Wave2':
                if (target.Multicolor) {
                    T_CS.mode_WaveSync(inputColor, true, 80, 150);
                }
                else {
                    T_CS.mode_WaveSync(inputColor, false, 300, 100);
                }
                break;
            case 'ConicRipple':
                //if (target.Multicolor) {
                T_CS.mode_ConicRipple(inputColor, true);
                //}
                break;
            case 'Conical_Diffusion':
                T_CS.mode_Conical_Diffusion();
                break;
            case 'ConicRippleRainbow':
                //if (target.Multicolor) {
                T_CS.mode_ConicRippleRainbow(inputColor, true);
                //}
                break;
            case 'mode_Spiral':
                T_CS.mode_Spiral(inputColor, target.Multicolor);
                break;
            case 'mode_TrainMove':
                T_CS.mode_TrainMove(inputColor, target.Multicolor, 300);
                break;
            case 'mode_SlopeRight':
                T_CS.mode_SlopeRight(inputColor, target.Multicolor, 300);
                break;
            case 'mode_Cooking':
                T_CS.mode_Cooking(inputColor, target.Multicolor);
                break;
            case 'mode_Wave1':
                T_CS.mode_Wave1(inputColor, target.Multicolor);
                break;
            default:
                //alert('遺失燈效名'+target.PointEffectName)
                break;
        }
        var obj = {
            PointEffectName: this.M_Light_CS.lightData.PointEffectName,
            colorPickerArr: this.M_Light_CS.lightData.colorPickerValue,
            Multicolor: true,
            BlockIndex: 37,
        };
        //this.Built_ineffect.Built_inSelected=obj;
        this.setPassiveEffect(obj);
    };
    AppComponent.prototype.setPassiveEffect = function (obj) {
        var target_cs = this.M_Light_CS;
        var target = JSON.parse(JSON.stringify(this.Built_ineffect.Built_inSelected));
        var inputColor = [target.colorPickerValue];
        if (inputColor == undefined) {
            //this.lightData;
            console.log('%c setPassiveEffect_undefined', 'color:rgb(255,77,255)', target_cs.lightData);
            return;
        }
        this.M_Light_CS.lightData = target;
        var index = this.M_Light_CS.currentBlockIndex = obj.BlockIndex;
        console.log('%c setPassiveEffect', 'color:rgb(255,77,255)', index);
        switch (target.PointEffectName) {
            case 'RippleGraff'://彩色擴散
                target_cs.mode_RippleGraff(inputColor, target.Multicolor, index);
                break;
            case 'PassWithoutTrace'://單點
                if (target.Multicolor) {
                    var colors = [[255, 0, 0, 1], [0, 255, 0, 1], [0, 0, 255, 1]];
                    inputColor = [colors[this.M_Light_CS.getRandom(0, colors.length - 1)]];
                }
                target_cs.mode_PassWithoutTrace(inputColor, index);
                break;
            case 'Shadow_disappear'://單點
                target_cs.mode_Shadow_disappear(inputColor, index);
                break;
            case 'FastRunWithoutTrace'://一排
                target_cs.mode_FastRunWithoutTrace(inputColor, target.Multicolor, index);
                break;
            case 'Cross'://十字
                target_cs.mode_Cross(inputColor, false, index);
                break;
            case 'Blossom'://綻放
                target_cs.mode_Blossom(inputColor, false, index);
                break;
            default:
                break;
        }
    };
    AppComponent.prototype.DeveloperControl = function () {
        var _this = this;
        //this.setMode('Wave1',[255,255,0,1],false);
        //this.M_Light_CS.mode_Rain();
        //this.M_Light_CS.mode_Breath();
        //this.M_Light_CS.mode_Spiral();
        //this.setMode('ConicRipple',[0,0,255,1],false);
        //this.setMode('ConicRippleRainbow',[0,0,255,1],false);
        //this.setMode('ConicRipple',[0,0,255,1],true);
        setTimeout(function () {
            //this.setMode('ConicRipple',[0,0,255,1],false);
            _this.setMode('Conical_Diffusion', [0, 0, 255, 1], false);
        }, 100);
        //this.M_Light_CS.mode_BreathingMulticolor();
        //this.setMode('AcidMode');
        document.addEventListener('keydown', this.bindPassiveEffectEvent);
    };
    AppComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_6__["Component"])({
            selector: 'app-root',
            template: __webpack_require__(/*! ./KeyBoard_RGB.html */ "./src/app/KeyBoard_RGBFolder/KeyBoard_RGB.html"),
            styles: [__webpack_require__(/*! ./KeyBoard_RGB.css */ "./src/app/KeyBoard_RGBFolder/KeyBoard_RGB.css"), __webpack_require__(/*! ./Built_ineffect.scss */ "./src/app/KeyBoard_RGBFolder/Built_ineffect.scss"), __webpack_require__(/*! ./KeyBoardStyle.css */ "./src/app/KeyBoard_RGBFolder/KeyBoardStyle.css")]
        }),
        __metadata("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_6__["ChangeDetectorRef"]])
    ], AppComponent);
    return AppComponent;
}());


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/system.js */ "./node_modules/webpack/buildin/system.js")))

/***/ }),

/***/ "./src/app/KeyBoard_RGBFolder/M_Light_CS.ts":
/*!**************************************************!*\
  !*** ./src/app/KeyBoard_RGBFolder/M_Light_CS.ts ***!
  \**************************************************/
/*! exports provided: M_Light_CS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "M_Light_CS", function() { return M_Light_CS; });
var M_Light_CS = /** @class */ (function () {
    // x_Array=new Array(120);//8*26;
    // y_Array=new Array(120);//8*26;
    function M_Light_CS(inputMax) {
        //左上,右上,左下,右下
        this.maxkaycapNumber = 0;
        this.AllBlockColor = [];
        this.lightData = {
            translate: 'GloriousMode',
            PointEffectName: 'GloriousMode',
            colorPickerValue: [255, 0, 0, 1],
            brightness: 100,
            speed: 50,
        };
        this.animationSpeed = 1;
        this.currentBlockIndex = 0;
        this.minKeyWidth = 43;
        this.minKeyHeight = 41;
        this.settingPerkeyName = '';
        this.imageMaxWidth = 0;
        this.imageMaxHeight = 0;
        this.recordModeArr = [];
        this.currentModeIndex = 0;
        this.twoDimensionalArray = new Array(26); //8*26;
        this.KeyTableArray = [];
        this.qigong_Step2_Range = [22, 23, 38, 52, 51, 36];
        this.qigong_Step1_Range = [0, 15, 30, 58, 71, 82];
        this.BreathTempArray = [];
        this.centerBlockPoint = 37;
        this.break_DimensionalArray = [];
        this.max_X_Number = 26;
        this.max_Y_Number = 8;
        this.maxkaycapNumber = inputMax;
        for (var i_block = 0; i_block < this.maxkaycapNumber; i_block++) {
            this.AllBlockColor.push({ clearStatus: false, color: [0, 0, 0, 0], breathing: false, border: true, coordinateData: [], keyCode: '' });
            this.BreathTempArray.push({ clearStatus: false, color: [0, 0, 0, 0], breathing: false, border: true, coordinateData: [], keyCode: '' });
        }
        for (var index = 0; index < this.twoDimensionalArray.length; index++) {
            this.twoDimensionalArray[index] = [];
        }
        for (var index = 0; index < this.twoDimensionalArray.length; index++) {
            for (var index2 = 0; index2 < 8; index2++) {
                this.twoDimensionalArray[index].push(this.defaultModule());
            }
        }
    }
    M_Light_CS.prototype.defaultModule = function (type) {
        if (type === void 0) { type = ''; }
        var T = {
            blockIndex: 9999,
            color: [255, 0, 0, 1],
        };
        return T;
    };
    M_Light_CS.prototype.setKeyTableArray = function (KeyTableArray) {
        this.KeyTableArray = KeyTableArray;
        for (var index = 0; index < this.KeyTableArray.length; index++) {
            var min = this.KeyTableArray[index][0]; //14
            var max = this.KeyTableArray[index][1]; //29
            var total = max - min;
            for (var i3 = 0; i3 <= total; i3++) {
                this.twoDimensionalArray[i3][index].blockIndex = i3 + min;
                //console.log('twoDimensionalArray', this.twoDimensionalArray[index][i3]=i3+min);
            }
        }
        //console.log('twoDimensionalArray', this.twoDimensionalArray);
        //console.log('KeyTableArray', this.KeyTableArray);
    };
    M_Light_CS.prototype.showTwoDimensionalArray = function () {
        for (var index = 0; index < this.twoDimensionalArray.length; index++) {
            for (var index2 = 0; index2 < 8; index2++) {
                var target = this.twoDimensionalArray[index][index2];
                if (target.blockIndex != 9999) {
                    this.AllBlockColor[target.blockIndex].color = target.color;
                }
            }
        }
    };
    M_Light_CS.prototype.resetTwoDimensionalArray = function (colors) {
        if (colors === void 0) { colors = [0, 0, 0, 1]; }
        for (var index = 0; index < this.twoDimensionalArray.length; index++) {
            //var temp_=new Array(26);
            for (var index2 = 0; index2 < this.twoDimensionalArray[index].length; index2++) {
                //const element = array[index];
                var target = this.twoDimensionalArray[index][index2];
                target.color = colors;
            }
        }
    };
    M_Light_CS.prototype.setCoordinateData = function (RGBList) {
        for (var index = 0; index < RGBList.length; index++) {
            var element = RGBList[index];
            //element.setAttribute('data-index', String(index));
            //element.setAttribute('coordinate', String(element));     
            var obj = {
                "clientHeight": element.clientHeight,
                "clientWidth": element.clientWidth,
                "offsetLeft": element.offsetLeft,
                "offsetTop": element.offsetTop,
                "scroll": element.scroll,
                "top_Left": [element.offsetLeft, element.offsetTop],
                "top_Right": [element.offsetLeft + element.clientWidth, element.offsetTop],
                "bottom_Left": [element.offsetLeft, element.offsetTop + element.clientHeight],
                "bottom_Right": [element.offsetLeft + element.clientWidth, element.offsetTop + element.clientHeight],
                "center_Point": [element.offsetLeft + (element.clientWidth / 2), element.offsetTop + (element.clientHeight / 2)],
            };
            this.AllBlockColor[index].coordinateData = obj;
        }
        console.log('setCoordinateData()', this.AllBlockColor);
    };
    M_Light_CS.prototype.setPerkey = function (index, Clear, colorPickerValue, breathing) {
        if (!Clear) {
            this.AllBlockColor[index].color = [0, 0, 0, 0];
            this.AllBlockColor[index].breathing = false;
            this.AllBlockColor[index].clearStatus = false;
        }
        else {
            this.AllBlockColor[index].color = JSON.parse(JSON.stringify(colorPickerValue));
            this.AllBlockColor[index].breathing = breathing;
            this.AllBlockColor[index].clearStatus = true;
            console.log('%c setPerkey,breathing,Clear', 'color:rgb(255,77,255)', this.AllBlockColor[index].breathing, Clear);
        }
    };
    M_Light_CS.prototype.setlightData = function (obj) {
        this.lightData = JSON.parse(JSON.stringify(obj));
    };
    M_Light_CS.prototype.resetDefault = function (resetData) {
        this.lightData = resetData;
        var arr = Object.keys(resetData);
        for (var i = 0; i < this.AllBlockColor.length; i++) {
            for (var index = 0; index < arr.length; index++) {
                if (this.AllBlockColor[i][arr[index]] != undefined) {
                    this.AllBlockColor[i][arr[index]] = resetData[arr[index]];
                }
            }
            this.AllBlockColor[i].color = [0, 0, 0, 0];
        }
    };
    M_Light_CS.prototype.addBlockIndex = function () {
        if (this.currentBlockIndex < this.AllBlockColor.length - 1) {
            this.currentBlockIndex += 1;
        }
        else {
        }
    };
    M_Light_CS.prototype.setGroupArrayColor = function (obj) {
        //groupArray,assignColor=[],isAll=false,clearStatus=false,colorPickerValue,breathing
        if (obj.isAll) {
            obj.groupArray = [];
            for (var i = 0; i < this.AllBlockColor.length; i++) {
                obj.groupArray.push(i);
            }
        }
        if (obj.assignColor.length < 1) {
            //console.log('setGroupArrayColor_assignColor', assignColor)
            obj.assignColor = JSON.parse(JSON.stringify(obj.colorPickerValue));
        }
        var target = this.AllBlockColor;
        obj.groupArray.forEach(function (value, index, array) {
            target[value].color = obj.assignColor;
            target[value].breathing = obj.breathing;
            target[value].clearStatus = obj.clearStatus;
        });
    };
    M_Light_CS.prototype.subBlockIndex = function () {
        if (this.currentBlockIndex > 0) {
            this.currentBlockIndex -= 1;
        }
        else {
        }
    };
    M_Light_CS.prototype.rgbToHex = function (r, g, b) {
        r = Number(r);
        g = Number(g);
        b = Number(b);
        return "#" + this.componentToHex(r) + this.componentToHex(g) + this.componentToHex(b);
    };
    M_Light_CS.prototype.componentToHex = function (c) {
        var hex = c.toString(16);
        return hex.length == 1 ? "0" + hex : hex;
    };
    M_Light_CS.prototype.getNowBlock = function (index) {
        if (index === void 0) { index = -1; }
        if (index != -1) {
            return this.AllBlockColor[index];
        }
        else {
            return this.AllBlockColor[this.currentBlockIndex];
        }
    };
    M_Light_CS.prototype.ImportLedClassData = function (InputData) {
        console.log('ImportLedClassData', InputData);
        var arr = Object.keys(this.getTarget());
        for (var index = 0; index < arr.length; index++) {
            if (arr[index] != '') {
                this.getTarget()[arr[index]] = InputData[arr[index]];
            }
        }
    };
    M_Light_CS.prototype.ImportCreateLedData = function (InputData) {
        console.log('ImportCreateLedData', InputData);
        InputData = JSON.parse(JSON.stringify(InputData));
        this.recordModeArr.push(InputData);
    };
    M_Light_CS.prototype.getTarget = function () {
        //console.log(" this.recordModeArr[this.currentModeIndex];", this.recordModeArr[this.currentModeIndex]);
        return this.recordModeArr[this.currentModeIndex];
    };
    M_Light_CS.prototype.switchEffectMode = function (index) {
        // var clone = $.extend(
        //     true,
        //     Object.create(Object.getPrototypeOf(this.modeClassArr[index])),
        //     this.modeClassArr[index]
        // )
        // console.log('newSwitchEffectMode', clone)
        // this.recordModeArr[this.currentModeIndex] = clone
    };
    M_Light_CS.prototype.deleteChoose = function () {
        if (this.recordModeArr.length > 1) {
            this.recordModeArr.splice(this.currentModeIndex, 1);
        }
        if (this.currentModeIndex - 1 >= 0) {
            this.currentModeIndex -= 1;
        }
        this.updateframe_selection_range();
        console.log('deleteChoose', '=>currentModeIndex' + this.currentModeIndex);
    };
    M_Light_CS.prototype.addNewChoose = function () {
        if (this.recordModeArr.length > 10) {
            return;
        }
    };
    M_Light_CS.prototype.stringFormat = function () {
        if (arguments.length == 0)
            return null;
        var str = arguments[0];
        for (var i = 1; i < arguments.length; i++) {
            var re = new RegExp('\\{' + (i - 1) + '\\}', 'gm');
            str = str.replace(re, arguments[i]);
        }
        return str;
    };
    //原有邊框架構 因客戶要求不顯示邊框 這邊採用border判斷是否顯示此格
    M_Light_CS.prototype.updateframe_selection_range = function () {
    };
    M_Light_CS.prototype.distanceCalculation = function (x1, y1, x2, y2) {
        return Math.sqrt(Math.pow((x1 - x2), 2) + Math.pow((y1 - y2), 2)); //å…©é»žè·�é›¢
    };
    M_Light_CS.prototype.onSetModeRefresh = function () {
        this.setAnimationSpeed();
        clearInterval(this.repeater);
        this.setAllBlockColor([0, 0, 0, 1]);
    };
    M_Light_CS.prototype.mode_NormallyOn = function (colors, isRainbow) {
        var _this = this;
        if (colors === void 0) { colors = [[0, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        clearInterval(this.repeater);
        //this.setAllBlockColor([0, 0, 255, 1]);
        console.log('%c mode_NormallyOn', 'color:rgb(255,75,255,1)', colors, colors[this.getRandom(0, colors.length - 1)]);
        this.repeater = setInterval(function () {
            var temp_colorData = JSON.parse(JSON.stringify(colors[_this.getRandom(0, colors.length - 1)]));
            for (var index = 0; index < 3; index++) {
                temp_colorData[index] = temp_colorData[index] * _this.lightData.brightness / 100;
            }
            _this.setAllBlockColor(temp_colorData);
        }, 50);
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.mode_NormallyOnMulticolor = function (colors, isRainbow) {
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        clearInterval(this.repeater);
        this.setAllBlockColor([0, 0, 0, 1]);
        var repeatCountList = [];
        var target = this.AllBlockColor;
        var setRGB;
        //var RGBObj=this.rainbow7Color()
        var RGBObj = [[255, 0, 0, 1], [255, 0, 0, 1], [0, 255, 0, 1], [0, 0, 255, 1], [0, 0, 255, 1]];
        //[this.getRandom(0, this.rainbow7Color().length - 1)];
        var Rainbow_totalstep = 60;
        var Rainbow_step = 0;
        var Rainbow_i = 0;
        console.log('%c mode_NormallyOnMulticolor', 'color:rgb(255,75,255,1)', colors);
        for (var i_compare = 0; i_compare < this.imageMaxWidth; i_compare += this.imageMaxWidth / 60 / 5) {
            //const element = array[index];
            if (Rainbow_step < Rainbow_totalstep) {
                Rainbow_step += 1;
            }
            else {
                Rainbow_step = 0;
                if (Rainbow_i < RGBObj.length - 2) {
                    Rainbow_i += 1;
                }
                else {
                    Rainbow_i = 0;
                }
            }
            var t_data = [0, 0, 0, 1];
            for (var index = 0; index < 3; index++) {
                t_data[index] = (RGBObj[Rainbow_i][index] * (Rainbow_totalstep - Rainbow_step) + RGBObj[Rainbow_i + 1][index] * Rainbow_step) / Rainbow_totalstep;
            }
            //setRGB = this.rainbow7Color()[this.getRandom(0, this.rainbow7Color().length - 1)];  
            setRGB = t_data;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var dis = this.distanceCalculation(0, this.imageMaxHeight / 2, element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                if (dis <= i_compare && dis >= i_compare - this.minKeyWidth) {
                    // repeatCountList.push({
                    //     color: setRGB,
                    //     recordIndex:index,
                    //     repeatTime: this.getRandom(5, 25),
                    // });
                    var temp_colorData = JSON.parse(JSON.stringify(setRGB));
                    for (var index_1 = 0; index_1 < 3; index_1++) {
                        temp_colorData[index_1] = temp_colorData[index_1] * this.lightData.brightness / 100;
                    }
                    element.color = temp_colorData;
                }
            }
        }
        //console.log('repeatCountList', repeatCountList)
        // this.repeater = setInterval(() => {
        // }, 50*this.animationSpeed)
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.mode_AcidMode = function (colors) {
        var _this = this;
        if (colors === void 0) { colors = []; }
        clearInterval(this.repeater);
        //colors = this.rainbow7Color();
        colors = [[255, 0, 0, 1], [0, 255, 0, 1], [0, 0, 255, 1]];
        var repeatCount = 0;
        var StartPoint = this.getNowBlock(50).coordinateData;
        var mode_step = 0;
        var step = 60;
        var nowStep = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        var repeatCountList = [];
        var target = this.AllBlockColor;
        var setRGB = this.rainbow7Color();
        var repeatCircleCount = 0;
        for (var i_compare = 0; i_compare < this.imageMaxWidth; i_compare += this.minKeyWidth) {
            //const element = array[index];
            //setRGB = [0, 0, 255, 1];
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var dis = this.distanceCalculation(StartPoint.center_Point[0], StartPoint.center_Point[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                if (dis <= i_compare && dis >= i_compare - this.minKeyWidth) {
                    repeatCountList.push({
                        color: colors[0],
                        recordIndex: index,
                        repeatTime: this.getRandom(5, 25),
                    });
                }
            }
        }
        console.log('repeatCountList', repeatCountList);
        this.repeater = setInterval(function () {
            //this.mode_reset();
            var t_Count = repeatCount % 3;
            var t_Count2;
            if (t_Count + 1 < colors.length) {
                t_Count2 = t_Count + 1;
            }
            else {
                t_Count2 = 0;
            }
            //console.log('t_Count',t_Count, t_Count2);
            for (var index = 0; index < repeatCountList.length; index++) {
                //var nowColor=[JSON.parse(JSON.stringify(repeatCountList[index].color)),[0,0,0,1]];
                var nowColor = JSON.parse(JSON.stringify(colors));
                var temp_colorData = [0, 0, 0, 1];
                for (var index_2 = 0; index_2 < 3; index_2++) {
                    temp_colorData[index_2] = (nowColor[t_Count][index_2] * (step - nowStep) + nowColor[t_Count2][index_2] * nowStep) / step;
                    temp_colorData[index_2] = temp_colorData[index_2] * _this.lightData.brightness / 100;
                }
                var target = _this.AllBlockColor;
                target[repeatCountList[index].recordIndex].color = JSON.parse(JSON.stringify(temp_colorData));
                //console.log('element.color', t_data, step, nowStep)
            }
            if (nowStep < step - 1) {
                nowStep += 1;
            }
            else {
                nowStep = 0;
                repeatCount += 1;
                //repeatCount=0;            
            }
        }, 50 * this.animationSpeed);
    };
    M_Light_CS.prototype.setAnimationSpeed = function () {
        //this.acceleration
        this.animationSpeed = 1 * (1 - this.lightData.speed / 400);
    };
    M_Light_CS.prototype.mode_Kamehemeha = function (colors, isRainbow) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        clearInterval(this.repeater);
        if (isRainbow) {
            colors = this.rainbow7Color();
        }
        var centerBlockIndex = this.centerBlockPoint;
        var repeatCount = 0;
        var StartPoint = this.getNowBlock(this.centerBlockPoint).coordinateData;
        this.setAllBlockColor([0, 0, 0, 1]);
        var target = this.AllBlockColor;
        var setRGB = this.rainbow7Color();
        var setArray = JSON.parse(JSON.stringify(this.qigong_Step1_Range));
        console.log('enter mode_Kamehemeha');
        this.repeater = setInterval(function () {
            //this.mode_reset();  
            //this.setAllBlockColor([0, 0, 0, 1]);
            for (var index = 0; index < setArray.length; index++) {
                var temp_colorData = JSON.parse(JSON.stringify(colors[_this.getRandom(0, colors.length - 1)]));
                for (var index_3 = 0; index_3 < 3; index_3++) {
                    temp_colorData[index_3] = temp_colorData[index_3] * _this.lightData.brightness / 100;
                }
                target[setArray[index]].color = temp_colorData;
            }
            for (var index = 0; index < setArray.length; index++) {
                if (setArray[index] < centerBlockIndex) {
                    setArray[index] += 1;
                }
                else {
                    if (target[setArray[index]].coordinateData.center_Point[0] > StartPoint.center_Point[0]) {
                        setArray[index] -= 1;
                    }
                }
            }
            repeatCount += 1;
            if (repeatCount > 7) {
                if (isRainbow) {
                    _this.mode_Kamehemeha2(colors, true);
                }
                else {
                    _this.mode_Kamehemeha2(colors, false);
                }
                //this.mode_RippleGraff([],false,37);              
            }
        }, 55 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_Kamehemeha2 = function (colors, isRainbow) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1], [0, 255, 0, 1], [0, 0, 255, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        clearInterval(this.repeater);
        //colors = this.rainbow7Color();
        var repeatCount = 0;
        var StartPoint = this.getNowBlock(this.centerBlockPoint).coordinateData;
        if (isRainbow) {
            colors = this.rainbow7Color();
        }
        var step = 60;
        var nowStep = 0;
        var qigongRangeIndex = [0];
        this.setAllBlockColor([0, 0, 0, 1]);
        var repeatCountList = [];
        var target = this.AllBlockColor;
        for (var index = 0; index < target.length; index++) {
            var element = target[index];
            var dis = this.distanceCalculation(StartPoint.center_Point[0], StartPoint.center_Point[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
            if (dis > 5 && dis <= this.minKeyWidth * 1.5) {
                repeatCountList.push({
                    color: colors[0],
                    recordIndex: index,
                    repeatTime: this.getRandom(5, 25),
                });
            }
        }
        for (var i_compare = 0; i_compare < this.imageMaxHeight / 2; i_compare += this.minKeyHeight) {
        }
        //console.log('repeatCountList', repeatCountList)
        this.repeater = setInterval(function () {
            _this.setAllBlockColor([0, 0, 0, 1]);
            var target = _this.AllBlockColor;
            for (var index = 0; index < qigongRangeIndex.length; index++) {
                var temp_colorData = JSON.parse(JSON.stringify(colors[_this.getRandom(0, colors.length - 1)]));
                for (var index_4 = 0; index_4 < 3; index_4++) {
                    temp_colorData[index_4] = temp_colorData[index_4] * _this.lightData.brightness / 100;
                }
                temp_colorData;
                target[_this.qigong_Step2_Range[qigongRangeIndex[index]]].color = temp_colorData;
            }
            for (var index = 0; index < qigongRangeIndex.length; index++) {
                if (qigongRangeIndex[index] < _this.qigong_Step2_Range.length - 1) {
                    qigongRangeIndex[index] += 1;
                }
                else {
                    qigongRangeIndex[index] = 0;
                }
            }
            repeatCount += 1;
            if (repeatCount > 27) {
                if (isRainbow) {
                    _this.mode_RippleGraff(colors, true, _this.centerBlockPoint);
                }
                else {
                    _this.mode_RippleGraff(colors, false, _this.centerBlockPoint);
                }
            }
        }, 50 * this.animationSpeed);
    };
    /**
     * 排列Array順序
     * @param array
     * @param key
     */
    M_Light_CS.prototype.ArraySort = function (array, key) {
        return array.sort(function (a, b) {
            var x = a[key];
            var y = b[key];
            x;
            return x - y;
        });
    };
    M_Light_CS.prototype.loopArrDisplacementAssignSpacing = function (directionSwitch, Arr, Spacing) {
        if (directionSwitch === void 0) { directionSwitch = 1; }
        if (Spacing === void 0) { Spacing = 1; }
        var handleArr = JSON.parse(JSON.stringify(Arr));
        if (directionSwitch == 2) {
            handleArr = (handleArr.splice(handleArr.length - Spacing, handleArr.length)).concat(handleArr);
        }
        else if (directionSwitch == 1) {
            handleArr = handleArr.concat(handleArr.splice(0, Spacing));
        }
        return handleArr;
    };
    M_Light_CS.prototype.mode_Surmount = function (colors, isRainbow, blockIndex) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        if (blockIndex === void 0) { blockIndex = 48; }
        console.log('%c mode_Surmount_enter', 'color:rgb(255,75,255,1)', colors, this.repeater);
        clearInterval(this.repeater);
        //colors = this.rainbow7Color();
        //this.rainbow7Color();
        //this.currentBlockIndex = 48;
        var repeatCount = 0;
        var StartPoint = this.getNowBlock(blockIndex).coordinateData;
        //var setRGB=[255,0,0,1];
        var mode_step = 0;
        var step = 30;
        var nowStep = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        this.repeater = setInterval(function () {
            //this.mode_reset();
            var target = _this.AllBlockColor;
            var setRGB;
            if (isRainbow) {
                setRGB = _this.rainbow7Color()[_this.getRandom(0, colors.length - 1)];
            }
            else {
                setRGB = colors[_this.getRandom(0, colors.length - 1)];
            }
            var compareResult = _this.minKeyWidth * repeatCount;
            var compareResultMax = _this.minKeyWidth * repeatCount - _this.minKeyWidth;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var dis = _this.distanceCalculation(StartPoint.center_Point[0], StartPoint.center_Point[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                //console.log('mode_step', mode_step)
                if (mode_step == 0) {
                    if (dis <= compareResult && dis >= compareResultMax) {
                        var temp_colorData = JSON.parse(JSON.stringify(setRGB));
                        for (var index2 = 0; index2 < 3; index2++) {
                            temp_colorData[index2] = temp_colorData[index2] * _this.lightData.brightness / 100;
                        }
                        element.color = temp_colorData;
                    }
                }
                else {
                    clearInterval(_this.repeater);
                }
            }
            if (nowStep + 1 < step) {
                nowStep += 1;
            }
            else {
                nowStep = 0;
                mode_step = 0;
                repeatCount = 0;
                clearInterval(_this.repeater);
                //console.log('nowStep_end', mode_step, repeatCount, nowStep)
                _this.setAllBlockColor([0, 0, 0, 1]);
            }
            if (_this.minKeyWidth * repeatCount < _this.imageMaxWidth) {
                repeatCount += 1;
                //console.log('repeatCount', repeatCount)
            }
            else {
                mode_step = 1;
                //this.setAllBlockColor([0,0,0,1]);
            }
        }, Math.pow(50, this.animationSpeed));
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.mode_HardCode = function (colors, InputArray) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (InputArray === void 0) { InputArray = [[]]; }
        console.log('%c mode_HardCode_enter', 'color:rgb(255,75,255,1)', colors, InputArray);
        clearInterval(this.repeater);
        var nowStep = 0;
        this.repeater = setInterval(function () {
            _this.setAllBlockColor([0, 0, 0, 1]);
            //InputArray = this.loopArrDisplacementAssignSpacing(2, InputArray, nowStep);
            var target = _this.AllBlockColor;
            try {
                for (var index = 0; index < InputArray[nowStep].length; index++) {
                    var rowArray = InputArray[nowStep];
                    for (var rowindex = 0; rowindex < rowArray.length; rowindex++) {
                        var element = rowArray[rowindex];
                        var setRGB = colors[_this.getRandom(0, colors.length - 1)];
                        var temp_colorData = JSON.parse(JSON.stringify(setRGB));
                        for (var index2 = 0; index2 < 3; index2++) {
                            temp_colorData[index2] = temp_colorData[index2] * _this.lightData.brightness / 100;
                        }
                        target[rowArray[rowindex]].color = temp_colorData;
                    }
                }
                if (nowStep < InputArray.length - 1) {
                    nowStep += 1;
                }
                else {
                    nowStep = 0;
                    // clearInterval(this.repeater);
                }
            }
            catch (error) {
                console.log('%c mode_HardCode_error', 'color:rgb(255,0,0,1)', nowStep, InputArray);
                clearInterval(_this.repeater);
            }
        }, 150 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_Retro_snake = function (colors, InputArray) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (InputArray === void 0) { InputArray = []; }
        console.log('%c mode_Retro_snake_enter', 'color:rgb(255,75,255,1)', colors, this.repeater);
        clearInterval(this.repeater);
        var nowStep = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        this.repeater = setInterval(function () {
            if (nowStep < InputArray.length) {
                nowStep += 1;
            }
            else {
                nowStep = 0;
            }
            //InputArray = this.loopArrDisplacementAssignSpacing(2, InputArray, nowStep);
            var target = _this.AllBlockColor;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                if (index == InputArray[nowStep]) {
                    var setRGB = colors[_this.getRandom(0, colors.length - 1)];
                    var temp_colorData = JSON.parse(JSON.stringify(setRGB));
                    for (var index2 = 0; index2 < 3; index2++) {
                        temp_colorData[index2] = temp_colorData[index2] * _this.lightData.brightness / 100;
                    }
                    element.color = temp_colorData;
                }
                else {
                    element.color = [0, 0, 0, 1];
                }
            }
        }, 70 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_RippleGraff = function (colors, isRainbow, blockIndex) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        if (blockIndex === void 0) { blockIndex = 48; }
        console.log('%c mode_RippleGraff', 'color:rgb(255,75,255,1)', colors, isRainbow);
        clearInterval(this.repeater);
        var repeatCount = 0;
        var StartPoint = this.getNowBlock(blockIndex).coordinateData;
        //var setRGB=[255,0,0,1];
        var mode_step = 0;
        var totalstep = 30;
        var nowStep = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        var r_totalstep = 30;
        var r_nowStep = 0;
        this.repeater = setInterval(function () {
            //this.mode_reset();
            var target = _this.AllBlockColor;
            var setRGB;
            if (isRainbow) {
                setRGB = _this.rainbow7Color()[_this.getRandom(0, _this.rainbow7Color().length - 1)];
            }
            else {
                setRGB = colors[_this.getRandom(0, colors.length - 1)];
            }
            var compareResult = _this.minKeyWidth * repeatCount;
            var compareResultMax = _this.minKeyWidth * repeatCount - _this.minKeyWidth;
            if (r_nowStep + 1 < r_totalstep) {
                r_nowStep += 1;
            }
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var dis = _this.distanceCalculation(StartPoint.center_Point[0], StartPoint.center_Point[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                if (mode_step == 0) {
                    //console.log('mode_step', mode_step)
                    //console.log('%c mode_RippleGraff_dis.compareResult','color:rgb(255,75,255,1)',dis,compareResult,compareResultMax);
                    if (dis <= compareResult && dis >= compareResultMax) {
                        var temp_colorData = JSON.parse(JSON.stringify(setRGB));
                        for (var index_5 = 0; index_5 < 3; index_5++) {
                            temp_colorData[index_5] = (temp_colorData[index_5] * (r_totalstep - r_nowStep) + 0 * r_nowStep) / r_totalstep;
                            temp_colorData[index_5] = temp_colorData[index_5] * _this.lightData.brightness / 100;
                        }
                        element.color = temp_colorData;
                    }
                }
                else {
                    var temp_colorData = JSON.parse(JSON.stringify(setRGB));
                    for (var index_6 = 0; index_6 < 3; index_6++) {
                        temp_colorData[index_6] = (temp_colorData[index_6] * (totalstep - nowStep) + 0 * nowStep) / totalstep;
                        temp_colorData[index_6] = temp_colorData[index_6] * _this.lightData.brightness / 100;
                    }
                    element.color = temp_colorData;
                    //console.log('element.color', T, step, nowStep)
                }
            }
            if (nowStep + 1 < totalstep) {
                nowStep += 1;
            }
            else {
                nowStep = 0;
                mode_step = 0;
                repeatCount = 0;
                clearInterval(_this.repeater);
                //console.log('nowStep_end', mode_step, repeatCount, nowStep)
                _this.setAllBlockColor([0, 0, 0, 1]);
                if (_this.lightData.PointEffectName == "Kamehemeha") {
                    _this.mode_Kamehemeha(colors, isRainbow);
                }
            }
            if (_this.minKeyWidth * repeatCount < _this.imageMaxWidth) {
                repeatCount += 1;
                //console.log('repeatCount', repeatCount)
            }
            else {
                mode_step = 1;
                //this.setAllBlockColor([0,0,0,1]);
            }
        }, Math.pow(50, this.animationSpeed));
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.mode_ConicRipple = function (colors, isRainbow, blockIndex) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        if (blockIndex === void 0) { blockIndex = 37; }
        console.log('%c mode_ConccRipple', 'color:rgb(255,75,255,1)', colors, isRainbow);
        clearInterval(this.repeater);
        var repeatCount = 0;
        var StartPoint = this.getNowBlock(blockIndex).coordinateData;
        console.log('%c StartPoint', 'color:rgb(255,75,255,1)', StartPoint);
        var mode_step = 0;
        var totalstep = 30;
        var nowStep = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        var r_totalstep = 30;
        var r_nowStep = 0;
        var setRGB;
        var zzzzzzz = [
            [255, 0, 0, 1],
            [255, 65, 0, 1],
            [255, 125, 0, 1],
            [255, 255, 0, 1],
            [125, 255, 0, 1],
            [65, 255, 0, 1],
            [0, 255, 0, 1],
            [0, 255, 65, 1],
            [0, 255, 125, 1],
            [0, 255, 255, 1],
            [0, 125, 255, 1],
            [0, 65, 255, 1],
            [0, 0, 255, 1],
            [65, 0, 255, 1],
            [125, 0, 255, 1],
            [255, 0, 255, 1],
            [255, 0, 125, 1],
            [255, 0, 65, 1],
            [255, 0, 0, 1],
            [255, 65, 0, 1],
            [255, 125, 0, 1],
            [255, 255, 0, 1],
            [125, 255, 0, 1],
            [65, 255, 0, 1],
            [0, 255, 0, 1],
            [0, 255, 65, 1],
            [0, 255, 125, 1],
            [0, 255, 255, 1],
            [0, 125, 255, 1],
            [0, 65, 255, 1],
            [0, 0, 255, 1],
            [65, 0, 255, 1],
            [125, 0, 255, 1],
            [255, 0, 255, 1],
            [255, 0, 125, 1],
            [255, 0, 65, 1],
        ];
        if (isRainbow) {
            setRGB = this.getGradientArr_RGB();
        }
        else {
            setRGB = colors[this.getRandom(0, colors.length - 1)];
        }
        var T_center_Point = StartPoint.center_Point;
        //[this.imageMaxWidth/2,this.imageMaxHeight/2]
        var diameter = this.imageMaxWidth - T_center_Point[0] + this.minKeyWidth; //StartPoint.center_Point[0]
        //var diameter=this.minKeyWidth*setRGB.length;//StartPoint.center_Point[0]
        //var diameter=this.imageMaxHeight-T_center_Point[1];//StartPoint.center_Point[0]
        var target = this.AllBlockColor;
        var direction = 0;
        var averagearr = [];
        for (var d_index = 0; d_index < setRGB.length; d_index++) {
            //average.push(diameter/setRGB.length);
            //var averageNow=Math.round(diameter/setRGB.length*d_index);
            var averagePrevious = diameter / setRGB.length * d_index;
            var averageNext = averagePrevious + (diameter / setRGB.length);
            var _loop_1 = function (index) {
                element = target[index];
                dis = this_1.distanceCalculation(T_center_Point[0], T_center_Point[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                if (mode_step == 0) {
                    //console.log('mode_step', mode_step)
                    //console.log('%c mode_RippleGraff_dis.compareResult','color:rgb(255,75,255,1)',dis,compareResult,compareResultMax);
                    if (dis >= averagePrevious && dis <= averageNext) {
                        if (averagearr.some(function (x) { return x.recordIndex == index; }) == false) {
                            averagearr.push({
                                color: setRGB[d_index],
                                colorIndex: d_index,
                                // nowStep:0,
                                // totalstep:30,
                                recordIndex: index,
                            });
                        }
                    }
                }
            };
            var this_1 = this, element, dis;
            for (var index = 0; index < target.length; index++) {
                _loop_1(index);
            }
        }
        console.log('%c mode_ConccRipple_averagearr', 'color:rgb(255,75,255,1)', averagearr);
        this.repeater = setInterval(function () {
            for (var index = 0; index < averagearr.length; index++) {
                var element_1 = averagearr[index];
                if (direction == 1) {
                    if (element_1.colorIndex < setRGB.length - 1) {
                        element_1.colorIndex += 1;
                    }
                    else {
                        element_1.colorIndex = 0;
                    }
                }
                else {
                    if (element_1.colorIndex > 0) {
                        element_1.colorIndex -= 1;
                    }
                    else {
                        element_1.colorIndex = setRGB.length - 1;
                    }
                }
                //     element.color=setRGB[Math.abs(element.colorIndex-(setRGB.length-1))];
                //    }
                //    else{
                //     element.color=setRGB[element.colorIndex];
                //    }
                var temp_colorData = JSON.parse(JSON.stringify(setRGB[element_1.colorIndex]));
                for (var index_7 = 0; index_7 < 3; index_7++) {
                    temp_colorData[index_7] = temp_colorData[index_7] * _this.lightData.brightness / 100;
                }
                target[element_1.recordIndex].color = temp_colorData;
            }
        }, 220 * this.animationSpeed);
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.mode_ConicRippleRainbow = function (colors, isRainbow, blockIndex) {
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        if (blockIndex === void 0) { blockIndex = 37; }
        console.log('%c mode_ConccRipple', 'color:rgb(255,75,255,1)', colors, isRainbow);
        clearInterval(this.repeater);
        var repeatCount = 0;
        var StartPoint = this.getNowBlock(blockIndex).coordinateData;
        var setRGB;
        var mode_step = 0;
        var totalstep = 30;
        var nowStep = 0;
        // for (let index = 0; index < array.length; index++) {
        //     const element = array[index];
        // }
        this.setAllBlockColor([0, 0, 0, 1]);
        var r_totalstep = 30;
        var r_nowStep = 0;
        if (isRainbow) {
            setRGB = this.rainbow7Color(); //this.rainbow7Color();
        }
        else {
            setRGB = colors[this.getRandom(0, colors.length - 1)];
        }
        var T_center_Point = StartPoint.center_Point;
        //[this.imageMaxWidth/2,this.imageMaxHeight/2]
        var diameter = this.imageMaxWidth - T_center_Point[0]; //StartPoint.center_Point[0]
        //var diameter=this.imageMaxHeight-T_center_Point[1];//StartPoint.center_Point[0]
        var target = this.AllBlockColor;
        //diameter/10;
        var direction = 0;
        //var average=[];
        var averagearr = [];
        for (var d_index = 0; d_index < 7; d_index++) {
            //average.push(diameter/setRGB.length);
            //var averageNow=Math.round(diameter/setRGB.length*d_index);
            var averagePrevious = diameter / 7 * d_index;
            var averageNext = averagePrevious + (diameter / 7);
            var _loop_2 = function (index) {
                element = target[index];
                dis = this_2.distanceCalculation(T_center_Point[0], T_center_Point[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                if (mode_step == 0) {
                    //console.log('mode_step', mode_step)
                    //console.log('%c mode_RippleGraff_dis.compareResult','color:rgb(255,75,255,1)',dis,compareResult,compareResultMax);
                    if (dis >= averagePrevious && dis <= averageNext) {
                        if (averagearr.some(function (x) { return x.recordIndex == index; }) == false) {
                            averagearr.push({
                                color: setRGB[d_index],
                                colorIndex: d_index,
                                nowStep: 0,
                                totalstep: 30,
                                recordIndex: index,
                            });
                        }
                    }
                }
            };
            var this_2 = this, element, dis;
            //var T_averageArr=[];
            for (var index = 0; index < target.length; index++) {
                _loop_2(index);
            }
        }
        console.log('%c mode_ConccRipple_averagearr', 'color:rgb(255,75,255,1)', averagearr);
        this.repeater = setInterval(function () {
            for (var index = 0; index < averagearr.length; index++) {
                var element_2 = averagearr[index];
                if (element_2.nowStep < 30) {
                    element_2.nowStep += 1;
                }
                else {
                    element_2.nowStep = 0;
                }
                if (direction == 1) {
                    if (element_2.colorIndex < setRGB.length - 1) {
                        element_2.colorIndex += 1;
                    }
                    else {
                        element_2.colorIndex = 0;
                    }
                }
                else {
                    if (element_2.colorIndex > 0) {
                        element_2.colorIndex -= 1;
                    }
                    else {
                        element_2.colorIndex = setRGB.length - 1;
                    }
                }
                //     element.color=setRGB[Math.abs(element.colorIndex-(setRGB.length-1))];
                //    }
                //    else{
                //     element.color=setRGB[element.colorIndex];
                //    }
                if (setRGB[element_2.colorIndex] == undefined) {
                    console.log('%c mode_ConccRipple_element.colorIndex]', 'color:rgb(255,75,255,1)', element_2.colorIndex);
                    return;
                }
                element_2.color = JSON.parse(JSON.stringify(setRGB[element_2.colorIndex]));
                target[element_2.recordIndex].color = JSON.parse(JSON.stringify(element_2.color));
            }
        }, 700 * this.animationSpeed);
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.mode_Conical_Diffusion = function () {
        console.log('%c mode_Conical_Diffusion', 'color:rgb(255,75,255,1)');
        clearInterval(this.repeater);
        var repeatCount = 0;
        // var StartPoint = this.getNowBlock(0).coordinateData;
        // console.log('%c StartPoint','color:rgb(255,75,255,1)',StartPoint);
        var mode_step = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        var setRGB = this.getGradientArr_RGB(3, 0);
        var T_center_Point = [0, this.imageMaxHeight / 2];
        var diameter = this.imageMaxWidth; //StartPoint.center_Point[0]
        var target = this.AllBlockColor;
        var direction = 0;
        var averagearr = [];
        for (var d_index = 0; d_index < setRGB.length; d_index++) {
            //average.push(diameter/setRGB.length);
            //var averageNow=Math.round(diameter/setRGB.length*d_index);
            var averagePrevious = diameter / setRGB.length * d_index;
            var averageNext = averagePrevious + (diameter / setRGB.length);
            var _loop_3 = function (index) {
                element = target[index];
                dis = this_3.distanceCalculation(T_center_Point[0], T_center_Point[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                if (mode_step == 0) {
                    //console.log('mode_step', mode_step)
                    //console.log('%c mode_RippleGraff_dis.compareResult','color:rgb(255,75,255,1)',dis,compareResult,compareResultMax);
                    if (dis >= averagePrevious && dis <= averageNext) {
                        if (averagearr.some(function (x) { return x.recordIndex == index; }) == false) {
                            averagearr.push({
                                color: setRGB[d_index],
                                colorIndex: d_index,
                                recordIndex: index,
                            });
                        }
                    }
                }
            };
            var this_3 = this, element, dis;
            for (var index = 0; index < target.length; index++) {
                _loop_3(index);
            }
        }
        console.log('%c mode_Conical_Diffusion_averagearr', 'color:rgb(255,75,255,1)', averagearr);
        for (var index = 0; index < averagearr.length; index++) {
            var element_3 = averagearr[index];
            var temp_colorData = JSON.parse(JSON.stringify(setRGB[element_3.colorIndex]));
            for (var index_8 = 0; index_8 < 3; index_8++) {
                temp_colorData[index_8] = temp_colorData[index_8] * this.lightData.brightness / 100;
            }
            target[element_3.recordIndex].color = temp_colorData;
        }
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.getGradientArr_RGB = function (g_totalStep, g_nowstep) {
        if (g_totalStep === void 0) { g_totalStep = 2; }
        if (g_nowstep === void 0) { g_nowstep = 0; }
        var gradientArr_RGB = [];
        var T_RGB = this.rainbow7Color();
        //var T_RGB=[[255,0,0,1],[0,255,0,1]];
        var T_nowColorIndex = 0;
        while (T_nowColorIndex < T_RGB.length - 1) {
            var T1Color = T_RGB[T_nowColorIndex];
            var T2Color = T_RGB[T_nowColorIndex + 1];
            var gradient_COLOR = [0, 0, 0, 1];
            for (var i_2 = 0; i_2 < 3; i_2++) {
                //console.log('%c getGradientArr_RGB','color:rgb(255,75,255,1)', T1Color[i_2],T2Color[i_2],gradient_COLOR,T1Color,T2Color);
                gradient_COLOR[i_2] = (T1Color[i_2] * (g_totalStep - g_nowstep) + T2Color[i_2] * g_nowstep) / g_totalStep;
            }
            gradientArr_RGB.push(gradient_COLOR);
            if (g_nowstep < g_totalStep) {
                g_nowstep += 1;
            }
            else {
                g_nowstep = 0;
                T_nowColorIndex += 1;
            }
        }
        console.log('%c getGradientArr_RGB', 'color:rgb(255,75,255,1)', gradientArr_RGB);
        return gradientArr_RGB;
    };
    M_Light_CS.prototype.mode_Blossom = function (colors, isRainbow, blockIndex) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        if (blockIndex === void 0) { blockIndex = 48; }
        //console.log('%c mode_RippleGraff_enter','color:rgb(255,75,255,1)',colors,this.AllBlockColor);
        clearInterval(this.repeater);
        //colors = this.rainbow7Color();
        //this.rainbow7Color();
        //this.currentBlockIndex = 48;
        var repeatCount = 0;
        var StartPoint = this.getNowBlock(blockIndex).coordinateData;
        //var setRGB=[255,0,0,1];
        var mode_step = 0;
        var step = 30;
        var nowStep = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        this.repeater = setInterval(function () {
            //this.mode_reset();
            var target = _this.AllBlockColor;
            var setRGB;
            if (isRainbow) {
                setRGB = _this.rainbow7Color()[_this.getRandom(0, colors.length - 1)];
            }
            else {
                setRGB = colors[_this.getRandom(0, colors.length - 1)];
            }
            var compareResult = _this.minKeyWidth * repeatCount;
            var compareResultMax = _this.minKeyWidth * repeatCount - _this.minKeyWidth;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var dis = _this.distanceCalculation(StartPoint.center_Point[0], StartPoint.center_Point[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                if (mode_step == 0) {
                    //console.log('mode_step', mode_step)
                    console.log('%c mode_Blossom', 'color:rgb(255,75,255,1)', dis, compareResult, compareResultMax);
                    if (dis <= compareResult && dis >= compareResultMax) {
                        var temp_colorData = JSON.parse(JSON.stringify(setRGB));
                        for (var index_9 = 0; index_9 < 3; index_9++) {
                            temp_colorData[index_9] = temp_colorData[index_9] * _this.lightData.brightness / 100;
                        }
                        element.color = temp_colorData;
                    }
                }
                else {
                    var temp_colorData = JSON.parse(JSON.stringify(element.color));
                    for (var index_10 = 0; index_10 < 3; index_10++) {
                        temp_colorData[index_10] = (temp_colorData[index_10] * (step - nowStep) + index_10 * nowStep) / step;
                        //temp_colorData[index] = temp_colorData[index] * this.lightData.brightness/100;
                    }
                    element.color = temp_colorData;
                    //console.log('element.color', temp_colorData, step, nowStep)
                }
            }
            if (nowStep + 1 < step) {
                nowStep += 1;
            }
            else {
                nowStep = 0;
                mode_step = 0;
                repeatCount = 0;
                clearInterval(_this.repeater);
                //console.log('nowStep_end', mode_step, repeatCount, nowStep)
                _this.setAllBlockColor([0, 0, 0, 1]);
            }
            if (_this.minKeyWidth * repeatCount < 100) {
                repeatCount += 1;
                //console.log('repeatCount', repeatCount)
            }
            else {
                mode_step = 1;
                //this.setAllBlockColor([0,0,0,1]);
            }
        }, 50 * this.animationSpeed);
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.mode_Cross = function (colors, isRainbow, blockIndex) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        if (blockIndex === void 0) { blockIndex = 48; }
        //console.log('%c mode_RippleGraff_enter','color:rgb(255,75,255,1)',colors,this.AllBlockColor);
        clearInterval(this.repeater);
        //colors = this.rainbow7Color();
        //this.rainbow7Color();
        //this.currentBlockIndex = 48;
        var repeatCount = 0;
        var StartPoint = this.getNowBlock(blockIndex).coordinateData;
        //var setRGB=[255,0,0,1];
        var mode_step = 0;
        var step = 30;
        var nowStep = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        var RangeList = [];
        for (var index = -StartPoint.center_Point[0]; index < this.imageMaxWidth; index += this.minKeyWidth / 2) {
            //var modStep=(target[index].coordinateData.center_Point[0]%this.imageMaxWidth)/this.imageMaxWidth;
            RangeList.push([index, StartPoint.center_Point[1]]);
        }
        for (var index = -StartPoint.center_Point[1]; index < this.imageMaxHeight; index += this.minKeyHeight) {
            //var modStep=(target[index].coordinateData.center_Point[0]%this.imageMaxWidth)/this.imageMaxWidth;
            RangeList.push([StartPoint.center_Point[0], index]);
            RangeList.push([StartPoint.center_Point[0] + this.minKeyWidth / 2, index]);
        }
        this.repeater = setInterval(function () {
            //this.mode_reset();
            var target = _this.AllBlockColor;
            var setRGB;
            if (isRainbow) {
                setRGB = _this.rainbow7Color()[_this.getRandom(0, colors.length - 1)];
            }
            else {
                setRGB = colors[_this.getRandom(0, colors.length - 1)];
            }
            var repeatCountList = [];
            var RanRange = [10, 100];
            var temp_point = [StartPoint[0] + 500];
            //var temp_target=JSON.parse(JSON.stringify(this.AllBlockColor));   
            console.log('RangeList', RangeList);
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var dis = _this.distanceCalculation(StartPoint.center_Point[0], StartPoint.center_Point[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                if (mode_step == 0) {
                    //console.log('%c mode_Cross','color:rgb(255,75,255,1)',dis);
                    for (var i2 = 0; i2 < RangeList.length; i2++) {
                        var T = RangeList[i2];
                        if (T[0] > element.coordinateData.top_Left[0] &&
                            T[0] < element.coordinateData.top_Right[0] &&
                            T[1] > element.coordinateData.top_Left[1] &&
                            T[1] < element.coordinateData.bottom_Left[1]) {
                            element.color = setRGB;
                            break;
                        }
                    }
                    var temp_colorData = JSON.parse(JSON.stringify(element.color));
                    for (var index_11 = 0; index_11 < 3; index_11++) {
                        temp_colorData[index_11] = (temp_colorData[index_11] * (step - nowStep) + index_11 * nowStep) / step;
                        temp_colorData[index_11] = temp_colorData[index_11] * _this.lightData.brightness / 100;
                    }
                    element.color = temp_colorData;
                }
                // else {
                //     var T = JSON.parse(JSON.stringify(element.color));
                //     T[0] = (T[0] * (step - nowStep) + 0 * nowStep) / step;
                //     T[1] = (T[1] * (step - nowStep) + 0 * nowStep) / step;
                //     T[2] = (T[2] * (step - nowStep) + 0 * nowStep) / step;
                //     element.color = T;
                //     //console.log('element.color', T, step, nowStep)
                // }
            }
            if (nowStep + 1 < step) {
                nowStep += 1;
            }
            else {
                nowStep = 0;
                mode_step = 0;
                clearInterval(_this.repeater);
                //console.log('nowStep_end', mode_step, repeatCount, nowStep)
                //this.setAllBlockColor([0, 0, 0, 1]);
            }
        }, 50 * this.animationSpeed);
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.mode_Breathing = function (colors, isRainbow) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        clearInterval(this.repeater);
        var repeatCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        var mode_step = 0;
        var step = 60;
        var nowStep = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        var repeatCountList = [];
        var target = this.AllBlockColor;
        var setRGB;
        var repeatCircleCount = 0;
        console.log('%c mode_Breathing', 'color:rgb(255,75,255,1)', this.imageMaxWidth);
        for (var i_compare = 0; i_compare < this.imageMaxWidth; i_compare += this.minKeyWidth) {
            //const element = array[index];
            if (isRainbow) {
                setRGB = this.rainbow7Color()[this.getRandom(0, this.rainbow7Color().length - 1)];
            }
            else {
                setRGB = colors[0];
            }
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var dis = this.distanceCalculation(StartPoint.center_Point[0], StartPoint.center_Point[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                if (dis <= i_compare && dis >= i_compare - this.minKeyWidth) {
                    //element.color = setRGB;
                    repeatCountList.push({
                        color: setRGB,
                        recordIndex: index,
                        repeatTime: this.getRandom(5, 25),
                    });
                }
            }
        }
        console.log('repeatCountList', repeatCountList);
        this.repeater = setInterval(function () {
            //this.mode_reset();
            var t_Count = repeatCount % 2;
            var t_Count2 = 0;
            if (t_Count == 0) {
                t_Count2 = 1;
            }
            else {
                t_Count2 = 0;
            }
            for (var index = 0; index < repeatCountList.length; index++) {
                var nowColor = [JSON.parse(JSON.stringify(repeatCountList[index].color)), [0, 0, 0, 1]];
                var temp_colorData = [0, 0, 0, 1];
                for (var index2 = 0; index2 < 3; index2++) {
                    temp_colorData[index2] = (nowColor[t_Count][index2] * (step - nowStep) + nowColor[t_Count2][index2] * nowStep) / step;
                    temp_colorData[index2] = temp_colorData[index2] * _this.lightData.brightness / 100;
                }
                var target = _this.AllBlockColor;
                target[repeatCountList[index].recordIndex].color = temp_colorData;
                //console.log('element.color', t_data, step, nowStep)
            }
            if (nowStep < step - 1) {
                nowStep += 1;
            }
            else {
                nowStep = 0;
                repeatCount += 1;
                //repeatCount=0;            
            }
        }, 50 * this.animationSpeed);
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.mode_BreathingMulticolor = function (colors, isRainbow) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        clearInterval(this.repeater);
        var repeatCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        var totalstep = 60;
        var nowStep = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        var repeatCountList = [];
        var target = this.AllBlockColor;
        var setRGB;
        var repeatCircleCount = 0;
        //var RGBObj=this.rainbow7Color()
        var RGBObj = [[255, 0, 0, 1], [255, 0, 0, 1], [0, 255, 0, 1], [0, 0, 255, 1], [0, 0, 255, 1]];
        //[this.getRandom(0, this.rainbow7Color().length - 1)];
        var Rainbow_totalstep = 60;
        var Rainbow_step = 0;
        var Rainbow_i = 0;
        console.log('%c mode_BreathingMulticolor', 'color:rgb(255,75,255,1)', this.imageMaxWidth);
        for (var i_compare = 0; i_compare < this.imageMaxWidth; i_compare += this.imageMaxWidth / 60 / 5) {
            //const element = array[index];
            if (Rainbow_step < Rainbow_totalstep) {
                Rainbow_step += 1;
            }
            else {
                Rainbow_step = 0;
                if (Rainbow_i < RGBObj.length - 2) {
                    Rainbow_i += 1;
                }
                else {
                    Rainbow_i = 0;
                }
            }
            if (isRainbow) {
                var t_data = [0, 0, 0, 1];
                if (RGBObj[Rainbow_i] == undefined) {
                    console.log('%c RGBObjError', 'color:rgb(255,75,255,1)', RGBObj, Rainbow_i);
                    return;
                }
                else {
                    console.log('%c RGBObj', 'color:rgb(255,75,255,1)', Rainbow_i);
                }
                var temp_colorData = [0, 0, 0, 1];
                for (var index2 = 0; index2 < 3; index2++) {
                    temp_colorData[index2] = (RGBObj[Rainbow_i][index2] * (Rainbow_totalstep - Rainbow_step) + RGBObj[Rainbow_i + 1][index2] * Rainbow_step) / Rainbow_totalstep;
                    temp_colorData[index2] = temp_colorData[index2] * this.lightData.brightness / 100;
                }
                //setRGB = this.rainbow7Color()[this.getRandom(0, this.rainbow7Color().length - 1)];
                console.log('%c RGBObj_t_data', 'color:rgb(255,75,255,1)', temp_colorData);
                setRGB = temp_colorData;
            }
            else {
                setRGB = colors[0];
            }
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var dis = this.distanceCalculation(0, this.imageMaxHeight / 2, element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                if (dis <= i_compare && dis >= i_compare - this.minKeyWidth) {
                    //element.color = setRGB;
                    repeatCountList.push({
                        color: setRGB,
                        recordIndex: index,
                    });
                }
            }
        }
        console.log('repeatCountList', repeatCountList);
        this.repeater = setInterval(function () {
            //this.mode_reset();
            var t_Count = repeatCount % 2;
            var t_Count2 = 0;
            if (t_Count == 0) {
                t_Count2 = 1;
            }
            else {
                t_Count2 = 0;
            }
            for (var index = 0; index < repeatCountList.length; index++) {
                var nowColor = [JSON.parse(JSON.stringify(repeatCountList[index].color)), [0, 0, 0, 1]];
                var temp_colorData = [0, 0, 0, 1];
                for (var index2 = 0; index2 < 3; index2++) {
                    temp_colorData[index2] = (nowColor[t_Count][index2] * (totalstep - nowStep) + nowColor[t_Count2][index2] * nowStep) / totalstep;
                    temp_colorData[index2] = temp_colorData[index2] * _this.lightData.brightness / 100;
                }
                var target = _this.AllBlockColor;
                target[repeatCountList[index].recordIndex].color = temp_colorData;
                //console.log('element.color', t_data, step, nowStep)
            }
            if (nowStep < totalstep - 1) {
                nowStep += 1;
            }
            else {
                nowStep = 0;
                repeatCount += 1;
                //repeatCount=0;            
            }
        }, 50 * this.animationSpeed);
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.mode_CycleBreath = function (colors, isRainbow) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        clearInterval(this.repeater);
        var repeatCount = 0;
        var mode_step = 0;
        var totalstep = 60;
        var nowStep = 0;
        if (isRainbow) {
            colors = this.rainbow7Color();
        }
        else {
            //colors=[[0, 0, 255, 1],[255, 0, 0, 1]];
        }
        var nowC_index = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        var repeatCountList = [];
        var target = this.AllBlockColor;
        var setRGB;
        var repeatCircleCount = 0;
        console.log('%c mode_Breathing', 'color:rgb(255,75,255,1)', colors, isRainbow);
        //setRGB = this.rainbow7Color()[this.getRandom(0, this.rainbow7Color().length - 1)];  
        for (var index = 0; index < target.length; index++) {
            //var element = target[index];
            repeatCountList.push({
                color: [0, 0, 0, 1],
                recordIndex: index,
                repeatTime: this.getRandom(5, 25),
            });
        }
        console.log('repeatCountList', repeatCountList);
        this.repeater = setInterval(function () {
            //this.mode_reset();
            var t_Count = repeatCount % 2;
            var t_Count2 = 0;
            if (t_Count == 0) {
                t_Count2 = 1;
            }
            else {
                t_Count2 = 0;
            }
            var T_colors = JSON.parse(JSON.stringify(colors[nowC_index]));
            //console.log('T_colors', T_colors)
            for (var index = 0; index < repeatCountList.length; index++) {
                var nowColor = [[0, 0, 0, 1], T_colors];
                var temp_colorData = [0, 0, 0, 1];
                for (var index2 = 0; index2 < 3; index2++) {
                    temp_colorData[index2] = (nowColor[t_Count][index2] * (totalstep - nowStep) + nowColor[t_Count2][index2] * nowStep) / totalstep;
                    temp_colorData[index2] = temp_colorData[index2] * _this.lightData.brightness / 100;
                }
                var target = _this.AllBlockColor;
                target[repeatCountList[index].recordIndex].color = JSON.parse(JSON.stringify(temp_colorData));
                //console.log('element.color', t_data, nowStep, totalstep)
            }
            if (nowStep < totalstep - 1) {
                nowStep += 1;
            }
            else {
                nowStep = 0;
                repeatCount += 1;
                var t_Count3 = repeatCount % 2;
                console.log('t_Count', t_Count3);
                if (t_Count3 == 0) {
                    if (nowC_index < colors.length - 1) {
                        nowC_index += 1;
                    }
                    else {
                        nowC_index = 0;
                    }
                }
                //repeatCount=0;            
            }
        }, 50 * this.animationSpeed);
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.mode_LEDOFF = function () {
        clearInterval(this.repeater);
        this.setAllBlockColor([0, 0, 0, 1]);
    };
    M_Light_CS.prototype.mode_TrainMove = function (colors, isRainbow, bandwidth) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        if (bandwidth === void 0) { bandwidth = 200; }
        //this.addBlockIndex();
        clearInterval(this.repeater);
        this.currentBlockIndex = 30;
        var repeatMin = 5;
        var repeatMax = 200;
        var repeatCount = 0;
        this.repeater = setInterval(function () {
            //var StartPoint = this.getNowBlock().coordinateData;
            var target = _this.AllBlockColor;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var compareResult = (repeatCount * 180);
                repeatMax = compareResult + bandwidth;
                if (compareResult > element.coordinateData.top_Left[0] && repeatMax < element.coordinateData.top_Right[0]) {
                    var temp_colorData = JSON.parse(JSON.stringify(colors[0]));
                    for (var index_12 = 0; index_12 < 3; index_12++) {
                        temp_colorData[index_12] = temp_colorData[index_12] * _this.lightData.brightness / 100;
                    }
                    element.color = temp_colorData;
                }
                else if (compareResult < element.coordinateData.top_Left[0] && repeatMax > element.coordinateData.top_Left[0]) {
                    var temp_colorData = JSON.parse(JSON.stringify(colors[0]));
                    for (var index_13 = 0; index_13 < 3; index_13++) {
                        temp_colorData[index_13] = temp_colorData[index_13] * _this.lightData.brightness / 100;
                    }
                    element.color = temp_colorData;
                }
                else {
                    element.color = [0, 0, 0, 1];
                }
            }
            if (repeatCount < 15 && repeatMax < _this.imageMaxWidth) {
                repeatCount += 1;
            }
            else {
                repeatCount = 0;
            }
        }, 500 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_SlopeRight = function (colors, isRainbow, bandwidth) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        if (bandwidth === void 0) { bandwidth = 200; }
        //this.addBlockIndex();
        clearInterval(this.repeater);
        this.currentBlockIndex = 30;
        var repeatMin = 5;
        var repeatMax = 200;
        var repeatCount = 0;
        var StartPoint = this.getNowBlock().coordinateData;
        //var SlopeEquation=this.SlopeEquation([0,0],[834,372]);//StartPoint.clientWidth
        var startX = -StartPoint.clientWidth * 5;
        this.repeater = setInterval(function () {
            var SlopeEquation = _this.slopeEquation([0 + startX, _this.imageMaxWidth / _this.minKeyWidth], [startX + StartPoint.clientWidth * 5, _this.imageMaxHeight]);
            console.log('SlopeEquation', SlopeEquation);
            _this.mode_reset();
            var target = _this.AllBlockColor;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                for (var i2 = 0; i2 < SlopeEquation.length; i2++) {
                    var T = SlopeEquation[i2];
                    //console.log('SlopeEquation[index]', i2, T, element.coordinateData.top_Left);
                    if (T[0] > element.coordinateData.top_Left[0] &&
                        T[0] < element.coordinateData.top_Right[0] &&
                        T[1] > element.coordinateData.top_Left[1] &&
                        T[1] < element.coordinateData.bottom_Left[1]) {
                        var temp_colorData = JSON.parse(JSON.stringify(colors[0]));
                        for (var index_14 = 0; index_14 < 3; index_14++) {
                            temp_colorData[index_14] = temp_colorData[index_14] * _this.lightData.brightness / 100;
                        }
                        element.color = temp_colorData;
                        continue;
                    }
                }
            }
            if (startX < _this.imageMaxWidth) {
                startX += 22;
            }
            else {
                startX = -StartPoint.clientWidth * 5;
                _this.mode_reset();
            }
        }, 25 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_WaveSync = function (colors, isRainbow, bandwidth, BaseSpeed) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        if (bandwidth === void 0) { bandwidth = 20; }
        if (BaseSpeed === void 0) { BaseSpeed = 140; }
        console.log('%c mode_WaveSync_enter', 'color:rgb(255,75,255,1)', colors, this.repeater);
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        if (isRainbow) {
            //colors =this.rainbow7Color();
            colors = [[255, 0, 0, 1], [255, 165, 0, 1], [255, 255, 0, 1], [0, 255, 0, 1], [0, 127, 255, 1], [0, 0, 255, 1], [139, 0, 255, 1]];
            //colors= colors.concat(colors);
        }
        else {
            var maxPercent = 55;
            var currentPercent = 55;
            var tempColorArray = [];
            var inputColor_T = colors[0];
            //console.log('%c inputColor_T','color:rgb(255,75,255,1)',inputColor_T);
            while (currentPercent > 25) {
                currentPercent -= 5;
                var tempColor = [0, 0, 0, 1];
                tempColor[0] = inputColor_T[0] * currentPercent / maxPercent;
                tempColor[1] = inputColor_T[1] * currentPercent / maxPercent;
                tempColor[2] = inputColor_T[2] * currentPercent / maxPercent;
                //console.log('%c currentPercent>0','color:rgb(255,75,255,1)',tempColor);
                tempColorArray.push(tempColor);
            }
            colors = tempColorArray;
            //console.log('%c tempColorArray','color:rgb(255,75,255,1)',tempColorArray);
        }
        //console.log('%c colors','color:rgb(255,75,255,1)',colors);
        var setRGB = colors[this.getRandom(0, colors.length - 1)];
        var spacing = -5;
        var nowColor = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        var angle = 40;
        var theta = Math.PI * angle / 180; //弧度
        var dx = Math.cos(theta);
        var dy = -Math.sin(theta);
        if (Math.abs(dx) < 1e-5)
            dx = 0;
        if (Math.abs(dy) < 1e-5)
            dy = 0;
        var position = 0;
        var color_number = colors.length;
        var target = this.AllBlockColor;
        var handleAllList = [];
        position += 5;
        //console.log('%c getColor','color:rgb(255,75,255,1)',result,this.use_scales,loop,this.colors,scales);
        this.repeater = setInterval(function () {
            //position+=5;
            position += 50;
            position %= bandwidth * color_number;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                //var y=sinx + cosx;
                //var y=sinx + cosx;
                var OffsetValue = element.coordinateData.center_Point[0] * dx + element.coordinateData.center_Point[1] * dy; //x*cos+y*sin=P(x,y)theta
                var scale = (OffsetValue - position) / bandwidth / color_number;
                var defaultscales = [
                    0, 0.2, 0.4, 0.6, 0.8
                ];
                //console.log('%c dy','color:rgb(255,75,255,1)',dx,dy);
                // console.log('%c OffsetValue','color:rgb(255,75,255,1)',OffsetValue);
                // console.log('%c scale','color:rgb(255,75,255,1)',String(scale));
                // console.log('%c position','color:rgb(255,75,255,1)',position);
                // console.log('%c bandwidth','color:rgb(255,75,255,1)',bandwidth);
                var scales = defaultscales.slice(0);
                scale -= Math.floor(scale); // [0, 1)                
                var lower_index = -1;
                var lower_scale = 0;
                var upper_index = colors.length;
                var upper_scale = 1;
                for (var i = 0; i < color_number; ++i) {
                    if (scales[i] <= scale) {
                        if (scales[i] >= lower_scale)
                            //console.log('%c lower_index','color:rgb(255,75,255,1)',lower_index);
                            lower_scale = scales[lower_index = i];
                        //console.log('%c lower_index','color:rgb(255,75,255,1)',lower_index);
                    }
                    else {
                        if (scales[i] < upper_scale)
                            upper_scale = scales[upper_index = i];
                    }
                }
                //console.log('%c lower_scale','color:rgb(255,75,255,1)',upper_scale);
                //console.log('%c upper_scale','color:rgb(255,75,255,1)',upper_scale);
                // colors[lower_index];
                //element.color = JSON.parse(JSON.stringify(colors[nowColor]));
                var temp_colorData = JSON.parse(JSON.stringify(colors[lower_index]));
                for (var index_15 = 0; index_15 < 3; index_15++) {
                    temp_colorData[index_15] = temp_colorData[index_15] * _this.lightData.brightness / 100;
                }
                element.color = temp_colorData;
            }
        }, BaseSpeed * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_Spiral = function (colors, isRainbow, direction) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        if (direction === void 0) { direction = 0; }
        console.log('%c mode_Spiral', 'color:rgb(255,75,255,1)', colors, this.repeater);
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        if (isRainbow) {
            //colors =this.rainbow7Color();
            colors = [[255, 0, 0, 1], [255, 165, 0, 1], [255, 255, 0, 1], [0, 255, 0, 1], [0, 127, 255, 1], [0, 0, 255, 1], [139, 0, 255, 1]];
            //colors= colors.concat(colors);
        }
        else {
            var maxPercent = 55;
            var currentPercent = 55;
            var tempColorArray = [];
            var inputColor_T = colors[0];
            console.log('%c inputColor_T', 'color:rgb(255,75,255,1)', inputColor_T);
            while (currentPercent > 25) {
                currentPercent -= 5;
                var tempColor = [0, 0, 0, 1];
                tempColor[0] = inputColor_T[0] * currentPercent / maxPercent;
                tempColor[1] = inputColor_T[1] * currentPercent / maxPercent;
                tempColor[2] = inputColor_T[2] * currentPercent / maxPercent;
                console.log('%c currentPercent>0', 'color:rgb(255,75,255,1)', tempColor);
                tempColorArray.push(tempColor);
            }
            colors = tempColorArray;
            console.log('%c tempColorArray', 'color:rgb(255,75,255,1)', tempColorArray);
        }
        //console.log('%c colors','color:rgb(255,75,255,1)',colors);
        var setRGB = colors[this.getRandom(0, colors.length - 1)];
        var spacing = -5;
        var nowColor = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        var angle = 0;
        var theta = Math.PI * 30 / 180; //弧度
        var dx = Math.cos(theta);
        var dy = -Math.sin(theta);
        if (Math.abs(dx) < 1e-5)
            dx = 0;
        if (Math.abs(dy) < 1e-5)
            dy = 0;
        var position = 0;
        var color_number = colors.length;
        var bandwidth = 20;
        var target = this.AllBlockColor;
        position += 5;
        this.repeater = setInterval(function () {
            if (direction == 1) {
                angle += 10 * 1; //-1 反向
            }
            else {
                angle += 10 * -1; //-1 反向
            }
            var bandangle = 360 / (colors.length);
            var dis_angle = angle % 360;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                //var y=sinx + cosx;
                //var OffsetValue = element.coordinateData.center_Point[0] * dx + element.coordinateData.center_Point[1] * dy;  //x*cos+y*sin=P(x,y)theta
                var center_Point = [_this.imageMaxWidth / 2, _this.imageMaxHeight / 2];
                var PointRotation = _this.PointRotation(center_Point, element.coordinateData.center_Point);
                if (PointRotation < 0) {
                    PointRotation += 360;
                }
                var remainder;
                var scale = (PointRotation - angle) / bandangle / colors.length; // / colors.length
                var defaultscales = [
                    0, 0.5, 0.1, 0.3, 0.5, 0.7, 0.9
                ];
                // var defaultscales = [
                // ];
                // var addvalue=0;
                // for (let index = 0; index < colors.length; index++) {
                //     addvalue+=1/colors.length;
                //     defaultscales.push(addvalue);    
                // }
                ///(360/colors.length);
                remainder = Math.floor(remainder);
                scale -= Math.floor(scale); // [0, 1)
                var data = {
                    PointRotation: PointRotation,
                    remainder: scale,
                    dis_angle: dis_angle,
                    part: bandangle,
                };
                //console.log('%c mode_Spiral','color:rgb(255,75,255,1)',data);
                var scales = defaultscales.slice(0);
                var lower_index = -1;
                var lower_scale = 0;
                var upper_index = colors.length;
                var upper_scale = 1;
                for (var i = 0; i < color_number; ++i) {
                    if (scales[i] <= scale) {
                        if (scales[i] >= lower_scale)
                            //console.log('%c lower_index','color:rgb(255,75,255,1)',lower_index);
                            lower_scale = scales[lower_index = i];
                        //console.log('%c lower_index','color:rgb(255,75,255,1)',lower_index);
                    }
                    else {
                        if (scales[i] < upper_scale)
                            upper_scale = scales[upper_index = i];
                    }
                }
                var temp_colorData = JSON.parse(JSON.stringify(colors[lower_index]));
                for (var index_16 = 0; index_16 < 3; index_16++) {
                    temp_colorData[index_16] = temp_colorData[index_16] * _this.lightData.brightness / 100;
                }
                element.color = temp_colorData;
            }
        }, 100);
    };
    M_Light_CS.prototype.mode_WaveSyncBack2 = function (colors, isRainbow) {
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        console.log('%c mode_WaveSyncBack2', 'color:rgb(255,75,255,1)', colors, this.repeater);
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        if (isRainbow) {
            //colors =this.rainbow7Color();
            colors = [[255, 0, 0, 1], [255, 165, 0, 1], [255, 255, 0, 1], [0, 255, 0, 1], [0, 127, 255, 1], [0, 0, 255, 1], [139, 0, 255, 1]];
        }
        var setRGB = colors[this.getRandom(0, colors.length - 1)];
        var spacing = -5;
        var nowColor = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        var horizontalList = [];
        var coordinateAllList = [];
        var AverageArea = 10;
        var PartW = this.imageMaxWidth;
        var PartH = this.imageMaxHeight;
        // if (T.coordinate[0] > element.coordinateData.top_Left[0] &&
        //     T.coordinate[0] < element.coordinateData.top_Right[0] &&
        //     T.coordinate[1] > element.coordinateData.top_Left[1] &&
        //     T.coordinate[1] < element.coordinateData.bottom_Left[1] 
        //     && (handleAllList.find((x) => x == index) == undefined)
        // ) 
        var Parallelogram_point = [];
        // ctx.lineTo(25, 0);
        // ctx.lineTo(35, 10);
        // ctx.lineTo(10, 10);
        // ctx.lineTo(0, 0);
        var nowAddDis = 0;
        while (nowAddDis < 500) {
            nowAddDis += this.minKeyWidth;
            Parallelogram_point.push({
                "top_Left": [-this.minKeyWidth * 3 + nowAddDis, 0],
                "top_Right": [-this.minKeyWidth * 3 + 25 + nowAddDis, 0],
                "bottom_Left": [this.minKeyWidth + nowAddDis, PartH],
                "bottom_Right": [this.minKeyWidth + 25 + nowAddDis, PartH],
            });
        }
        console.log('Parallelogram_point', Parallelogram_point);
        // for (let index = AverageArea; index > 1; index--) {
        //     //const element = array[index];
        // }
        var target = this.AllBlockColor;
        var handleAllList = [];
        for (var i2 = 0; i2 < Parallelogram_point.length; i2++) {
            var P_Target = Parallelogram_point[i2];
            //var P_Target = Parallelogram_point[0];
            var angleLeft = this.PointRotation(P_Target.top_Left, P_Target.bottom_Left);
            var angleRight = this.PointRotation(P_Target.top_Right, P_Target.bottom_Right);
            console.log('angleLeft', angleLeft);
            console.log('angleRight', angleRight);
            if (nowColor < colors.length - 1) {
                nowColor += 1;
            }
            else {
                nowColor = 0;
            }
            var _loop_4 = function (index) {
                element = target[index];
                t_angleLeft = this_4.PointRotation(P_Target.top_Left, element.coordinateData.top_Left);
                t_angleRight = this_4.PointRotation(P_Target.top_Right, element.coordinateData.top_Left);
                if (t_angleRight > angleRight && t_angleLeft < angleLeft
                    && (handleAllList.find(function (x) { return x == index; }) == undefined)) {
                    console.log('t_angleLeft', t_angleLeft, index);
                    console.log('t_angleRight', t_angleRight, index);
                    handleAllList.push(index);
                    element.color = JSON.parse(JSON.stringify(colors[nowColor]));
                }
                //handleAllList.push(index);
                //isCheck=true;
                //ItemList.push(index);   
            };
            var this_4 = this, element, t_angleLeft, t_angleRight;
            for (var index = 0; index < target.length; index++) {
                _loop_4(index);
            }
        }
        var AllItemList = [];
        //AllItemList.push(ItemList);
        console.log('handleAllList', handleAllList);
        //console.log('AllItemList', AllItemList);       
        this.repeater = setInterval(function () {
        }, 100);
    };
    M_Light_CS.prototype.mode_KeepRaining = function (colors, isRainbow, bandwidth, BaseSpeed) {
        var _this = this;
        if (colors === void 0) { colors = [[0, 0, 255, 1]]; }
        if (isRainbow === void 0) { isRainbow = false; }
        if (bandwidth === void 0) { bandwidth = 20; }
        if (BaseSpeed === void 0) { BaseSpeed = 140; }
        console.log('%c mode_KeepRaining', 'color:rgb(255,75,255,1)', colors, this.repeater);
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        console.log('%c mode_Starlight', 'color:rgb(255,75,255,1)', colors);
        //colors=[[255,0,0,1]];
        var translatecolors = [];
        if (isRainbow) {
            translatecolors = this.rainbow7Color();
        }
        else {
            translatecolors = colors;
        }
        var totalStep = 5;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        var target = this.AllBlockColor;
        this.setAllBlockColor([0, 0, 0, 1]);
        var repeatCountList = [];
        var RanRange = [1, 200];
        var coordinateAllList = [];
        //RotationMatrixValue: xpos + space+ypos,
        //x' = cos(θ) * x - sin(θ) * y
        //y' = sin(θ) * x + cos(θ) * y
        //var temp_target=JSON.parse(JSON.stringify(this.AllBlockColor));
        for (var xpos = -this.minKeyWidth * 5; xpos < this.imageMaxWidth; xpos += this.imageMaxWidth / 7) {
            var space = 0;
            for (var ypos = -this.minKeyHeight; ypos < this.imageMaxHeight - 50; ypos += this.imageMaxHeight / 8) {
                //space += this.minKeyWidth/2;
                space += 5;
                coordinateAllList.push({
                    coordinate: [xpos + space, ypos],
                    backupPos: [xpos + space, ypos],
                    RotationMatrixValue: xpos + space + ypos,
                    isCheck: false,
                });
            }
        }
        for (var index = 0; index < target.length; index++) {
            //var modStep = (target[index].coordinateData.center_Point[0] % this.imageMaxWidth) / this.imageMaxWidth;
            var ran = this.getRandom(0, translatecolors.length - 1);
            console.log('ran', ran);
            repeatCountList.push({
                nowColor: [0, 0, 0, 1],
                nextColor: translatecolors[ran],
                recordIndex: index,
                nowStep: 10,
                totalStep: 10,
                repeatCount: 0,
                repeatTime: this.getRandom(RanRange[0], RanRange[1]),
                switchOn: false,
            });
            //target[index].color=repeatCountList[index].color;
        }
        var MoveCenter = [0, 0];
        this.repeater = setInterval(function () {
            _this.setAllBlockColor([0, 0, 0, 1]);
            var nowAddx = 0;
            // if(MoveCenter[0]<this.imageMaxWidth){
            //     MoveCenter[0]+=50;
            //     MoveCenter[1]+=50;
            // }
            // else{
            //     MoveCenter[0]=0;
            //     MoveCenter[1]=0;
            // }
            for (var c2 = 0; c2 < coordinateAllList.length; c2++) {
                var T_CA = coordinateAllList[c2];
                //T_CA.coordinate[0]+=this.getRandom(25, 75);
                if (T_CA.coordinate[1] < _this.imageMaxHeight) {
                    nowAddx = 50;
                    //T_CA.coordinate[0]+=this.getRandom(25, 75);
                    T_CA.coordinate[0] += _this.minKeyHeight;
                    T_CA.coordinate[1] += _this.minKeyHeight;
                }
                else {
                    //T_CA.coordinate[0]=this.getRandom(0, 20);
                    T_CA.coordinate[0] = T_CA.backupPos[0];
                    T_CA.coordinate[1] = -_this.minKeyHeight;
                }
            }
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var temp_block = repeatCountList[index];
                var RotationMatrixValue = MoveCenter[0] + MoveCenter[1];
                var RotationMatrixValue2 = element.coordinateData.top_Left[0] + element.coordinateData.top_Left[1];
                for (var c2 = 0; c2 < coordinateAllList.length; c2++) {
                    var T_CA = coordinateAllList[c2];
                    if (T_CA.coordinate[0] > element.coordinateData.top_Left[0] &&
                        T_CA.coordinate[0] < element.coordinateData.top_Right[0] &&
                        T_CA.coordinate[1] > element.coordinateData.top_Left[1] &&
                        T_CA.coordinate[1] < element.coordinateData.bottom_Left[1]) {
                        var colorData = [0, 0, 0, 1];
                        colorData[0] = (temp_block.nowColor[0] * (temp_block.totalStep - temp_block.nowStep) + temp_block.nextColor[0] * temp_block.nowStep) / temp_block.totalStep;
                        colorData[1] = (temp_block.nowColor[1] * (temp_block.totalStep - temp_block.nowStep) + temp_block.nextColor[1] * temp_block.nowStep) / temp_block.totalStep;
                        colorData[2] = (temp_block.nowColor[2] * (temp_block.totalStep - temp_block.nowStep) + temp_block.nextColor[2] * temp_block.nowStep) / temp_block.totalStep;
                        element.color = JSON.parse(JSON.stringify(colorData));
                    }
                    // var dis = this.distanceCalculation(T_CA.coordinate[0], T_CA.coordinate[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                    // if (dis < 25&&element.coordinateData.center_Point[0]>T_CA.coordinate[0]) {
                    //     //if (Math.abs(RotationMatrixValue2-RotationMatrixValue) < 10) {
                    //     console.log('%c RotationMatrixValue', 'color:rgb(255,75,255,1)', RotationMatrixValue, RotationMatrixValue2);
                    //     // if (temp_block.nowStep < temp_block.totalStep) {
                    //     //     temp_block.nowStep += 1;
                    //     // }
                    //     // else {
                    //     //     //temp_block.nowStep = 0;
                    //     //     temp_block.repeatCount += 1;
                    //     //     // var T_Now = JSON.parse(JSON.stringify(temp_block.nowColor));
                    //     //     // var T_Next = JSON.parse(JSON.stringify(temp_block.nextColor));
                    //     //     // temp_block.nextColor = T_Now;
                    //     //     // temp_block.nowColor = T_Next;
                    //     //     temp_block.switchOn = false;
                    //     //     // if(temp_block.repeatCount>=1){
                    //     //     //     temp_block.repeatCount=0;
                    //     //     //     temp_block.switchOn=false;
                    //     //     // }
                    //     // }
                    //     var colorData = [0, 0, 0, 1]
                    //     colorData[0] = (temp_block.nowColor[0] * (temp_block.totalStep - temp_block.nowStep) + temp_block.nextColor[0] * temp_block.nowStep) / temp_block.totalStep;
                    //     colorData[1] = (temp_block.nowColor[1] * (temp_block.totalStep - temp_block.nowStep) + temp_block.nextColor[1] * temp_block.nowStep) / temp_block.totalStep;
                    //     colorData[2] = (temp_block.nowColor[2] * (temp_block.totalStep - temp_block.nowStep) + temp_block.nextColor[2] * temp_block.nowStep) / temp_block.totalStep;
                    //     element.color = JSON.parse(JSON.stringify(colorData));
                    //     break;
                    // }
                }
            }
        }, 250);
    };
    M_Light_CS.prototype.mode_KeepRainingBackup = function (colors, isRainbow, bandwidth, BaseSpeed) {
        var _this = this;
        if (colors === void 0) { colors = [[0, 0, 255, 1]]; }
        if (isRainbow === void 0) { isRainbow = false; }
        if (bandwidth === void 0) { bandwidth = 20; }
        if (BaseSpeed === void 0) { BaseSpeed = 140; }
        console.log('%c mode_KeepRainingBackup', 'color:rgb(255,75,255,1)', colors, this.repeater);
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        console.log('%c mode_Starlight', 'color:rgb(255,75,255,1)', colors);
        //colors=[[255,0,0,1]];
        var translatecolors = [];
        if (isRainbow) {
            translatecolors = this.rainbow7Color();
        }
        else {
            translatecolors = colors;
        }
        var totalStep = 5;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        var target = this.AllBlockColor;
        this.setAllBlockColor([0, 0, 0, 1]);
        var repeatCountList = [];
        var RanRange = [1, 200];
        var coordinateAllList = [];
        //RotationMatrixValue: xpos + space+ypos,
        //x' = cos(θ) * x - sin(θ) * y
        //y' = sin(θ) * x + cos(θ) * y
        //var temp_target=JSON.parse(JSON.stringify(this.AllBlockColor));
        for (var xpos = -this.minKeyWidth * 10; xpos < this.imageMaxWidth; xpos += this.imageMaxWidth / 10) {
            var space = 0;
            for (var ypos = 0; ypos < this.imageMaxHeight; ypos += this.imageMaxHeight / 10) {
                //space += this.minKeyWidth/2;
                space += 0;
                coordinateAllList.push({
                    coordinate: [xpos + space, ypos],
                    backupPos: [xpos + space, ypos],
                    RotationMatrixValue: xpos + space + ypos,
                    isCheck: false,
                });
            }
        }
        for (var index = 0; index < target.length; index++) {
            //var modStep = (target[index].coordinateData.center_Point[0] % this.imageMaxWidth) / this.imageMaxWidth;
            var ran = this.getRandom(0, translatecolors.length - 1);
            console.log('ran', ran);
            repeatCountList.push({
                nowColor: [0, 0, 0, 1],
                nextColor: translatecolors[ran],
                recordIndex: index,
                nowStep: 10,
                totalStep: 10,
                repeatCount: 0,
                repeatTime: this.getRandom(RanRange[0], RanRange[1]),
                switchOn: false,
            });
            //target[index].color=repeatCountList[index].color;
        }
        this.repeater = setInterval(function () {
            _this.setAllBlockColor([0, 0, 0, 1]);
            var nowAddx = 0;
            for (var c2 = 0; c2 < coordinateAllList.length; c2++) {
                var T_CA = coordinateAllList[c2];
                //T_CA.coordinate[0]+=this.getRandom(25, 75);
                if (T_CA.coordinate[1] < _this.imageMaxHeight) {
                    nowAddx = 50;
                    T_CA.coordinate[0] += 55;
                    T_CA.coordinate[1] += 25;
                }
                else {
                    //T_CA.coordinate[0]=this.getRandom(0, 20);
                    T_CA.coordinate[0] = T_CA.backupPos[0];
                    T_CA.coordinate[1] = -50;
                }
            }
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var temp_block = repeatCountList[index];
                for (var i2 = 0; i2 < coordinateAllList.length; i2++) {
                    var T = coordinateAllList[i2];
                    var RotationMatrixValue = T.coordinate[0] + T.coordinate[1];
                    var RotationMatrixValue2 = element.coordinateData.top_Left[0] + element.coordinateData.center_Point[1];
                    // if (Math.abs(RotationMatrixValue - RotationMatrixValue2) < 2) {
                    //     console.log('%c RotationMatrixValue', 'color:rgb(255,75,255,1)', RotationMatrixValue, RotationMatrixValue2);
                    //     if (temp_block.nowStep < temp_block.totalStep) {
                    //         temp_block.nowStep += 1;
                    //     }
                    //     else {
                    //         temp_block.nowStep = 0;
                    //         temp_block.repeatCount += 1;
                    //         var T_Now = JSON.parse(JSON.stringify(temp_block.nowColor));
                    //         var T_Next = JSON.parse(JSON.stringify(temp_block.nextColor));
                    //         temp_block.nextColor = T_Now;
                    //         temp_block.nowColor = T_Next;
                    //         temp_block.switchOn = false;
                    //         // if(temp_block.repeatCount>=1){
                    //         //     temp_block.repeatCount=0;
                    //         //     temp_block.switchOn=false;
                    //         // }
                    //     }
                    //     break;
                    // }                
                    if (T.coordinate[0] > element.coordinateData.top_Left[0] &&
                        T.coordinate[0] < element.coordinateData.top_Right[0] &&
                        T.coordinate[1] > element.coordinateData.top_Left[1] &&
                        T.coordinate[1] < element.coordinateData.bottom_Left[1]) {
                        if (temp_block.nowStep < temp_block.totalStep) {
                            temp_block.nowStep += 1;
                        }
                        else {
                            //temp_block.nowStep = 0;
                            temp_block.repeatCount += 1;
                            // var T_Now = JSON.parse(JSON.stringify(temp_block.nowColor));
                            // var T_Next = JSON.parse(JSON.stringify(temp_block.nextColor));
                            // temp_block.nextColor = T_Now;
                            // temp_block.nowColor = T_Next;
                            temp_block.switchOn = false;
                            // if(temp_block.repeatCount>=1){
                            //     temp_block.repeatCount=0;
                            //     temp_block.switchOn=false;
                            // }
                        }
                        var colorData = [0, 0, 0, 1];
                        colorData[0] = (temp_block.nowColor[0] * (temp_block.totalStep - temp_block.nowStep) + temp_block.nextColor[0] * temp_block.nowStep) / temp_block.totalStep;
                        colorData[1] = (temp_block.nowColor[1] * (temp_block.totalStep - temp_block.nowStep) + temp_block.nextColor[1] * temp_block.nowStep) / temp_block.totalStep;
                        colorData[2] = (temp_block.nowColor[2] * (temp_block.totalStep - temp_block.nowStep) + temp_block.nextColor[2] * temp_block.nowStep) / temp_block.totalStep;
                        element.color = JSON.parse(JSON.stringify(colorData));
                        //break;
                    }
                }
            }
        }, 250);
    };
    M_Light_CS.prototype.mode_WaveSyncbackup = function (colors, isRainbow) {
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        console.log('%ccmode_WaveSyncbackup_enter', 'color:rgb(255,75,255,1)', colors, this.repeater);
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        if (isRainbow) {
            //colors =this.rainbow7Color();
            colors = [[255, 0, 0, 1], [255, 165, 0, 1], [255, 255, 0, 1], [0, 255, 0, 1], [0, 127, 255, 1], [0, 0, 255, 1], [139, 0, 255, 1]];
        }
        var setRGB = colors[this.getRandom(0, colors.length - 1)];
        //console.log('StartPoint','color:green',JSON.stringify(StartPoint),this.AllBlockColor); 
        //var SlopeEquation=this.SlopeEquation([0,0],[834,372]);//StartPoint.clientWidth
        //Math.trunc(3.7); // 3
        var spacing = -5;
        var nowColor = 0;
        this.setAllBlockColor([0, 0, 0, 1]);
        var horizontalList = [];
        var coordinateAllList = [];
        for (var xpos = -this.minKeyWidth; xpos < this.imageMaxWidth; xpos += this.minKeyWidth) {
            var space = 0;
            var ItemList = [];
            for (var ypos = 0; ypos < this.imageMaxHeight; ypos += StartPoint.clientHeight / 2) {
                space += this.minKeyWidth / 10;
                ItemList.push({
                    coordinate: [xpos + space, ypos],
                    isCheck: false,
                });
            }
            coordinateAllList.push(ItemList);
        }
        console.log('coordinateAllList', coordinateAllList);
        console.log('horizontalList', horizontalList);
        var handleAllList = [];
        var AllItemList = [];
        var target = this.AllBlockColor;
        for (var i33 = 0; i33 < coordinateAllList.length; i33++) {
            var coordinateData = coordinateAllList[i33];
            if (nowColor < colors.length - 1) {
                nowColor += 1;
            }
            else {
                nowColor = 0;
            }
            var ItemList = [];
            var _loop_5 = function (index) {
                isCheck = false;
                var element = target[index];
                for (var i2 = 0; i2 < coordinateData.length; i2++) {
                    T = coordinateData[i2];
                    if (T.coordinate[0] > element.coordinateData.top_Left[0] &&
                        T.coordinate[0] < element.coordinateData.top_Right[0] &&
                        T.coordinate[1] > element.coordinateData.top_Left[1] &&
                        T.coordinate[1] < element.coordinateData.bottom_Left[1]
                        && (handleAllList.find(function (x) { return x == index; }) == undefined)) {
                        handleAllList.push(index);
                        //isCheck=true;
                        ItemList.push(index);
                        //element.color = colors[this.getRandom(0, colors.length - 1)];
                        //console.log('                        colors[nowColor]',                         colors[nowColor],nowColor);       
                        element.color = JSON.parse(JSON.stringify(colors[nowColor]));
                        continue;
                    }
                }
            };
            var isCheck, T;
            for (var index = 0; index < target.length; index++) {
                _loop_5(index);
            }
            AllItemList.push(ItemList);
        }
        console.log('handleAllList', handleAllList);
        console.log('AllItemList', AllItemList);
        var repeatCount = 0;
        this.repeater = setInterval(function () { }, 100);
    };
    M_Light_CS.prototype.mode_Parallelogram = function () {
        var _this = this;
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var repeatCount = 0;
        var StartPoint = this.getNowBlock().coordinateData;
        this.setAllBlockColor([0, 0, 0, 1]);
        //this.mode_reset();
        this.setAllBlockAlpha;
        //var SlopeEquation=this.SlopeEquation([0,0],[834,372]);//StartPoint.clientWidth
        var startX = -StartPoint.clientWidth * 5;
        var movewidth = 4;
        var horizontalList = [];
        //Math.trunc(3.7); // 3
        var H_range = Math.trunc(372 / 40);
        this.repeater = setInterval(function () {
            _this.setAllBlockColor([0, 0, 0, 1]);
            horizontalList = [];
            //console.log('SlopeEquation', SlopeEquation);
            var spacing = -5;
            for (var index = 0; index < 372; index += 40) {
                var ypos = index;
                //horizontalList.push([xpos, ypos]);
                spacing += 1;
                //var ypos = 25;
                for (var index2 = spacing * 22 + repeatCount * 43; index2 < spacing * 22 + 140 + repeatCount * 43; index2 += 1) {
                    var xpos = index2;
                    horizontalList.push([index2, ypos]);
                }
                // var xpos = index;
                // horizontalList.push([xpos, ypos]);
                //+(repeatCount*this.minKeyWidth)
            }
            console.log('horizontalList', horizontalList);
            var target = _this.AllBlockColor;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                for (var i2 = 0; i2 < horizontalList.length; i2++) {
                    var T = horizontalList[i2];
                    //console.log('SlopeEquation[index]', i2, T, element.coordinateData.top_Left);
                    if (T[0] > element.coordinateData.top_Left[0] &&
                        T[0] < element.coordinateData.top_Right[0] &&
                        T[1] > element.coordinateData.top_Left[1] &&
                        T[1] < element.coordinateData.bottom_Left[1]) {
                        element.color = [0, 0, 255, 1];
                        continue;
                    }
                }
            }
            // if(startX<this.imageMaxWidth){
            //     startX+=22;
            // }
            // else{
            //     startX=-StartPoint.clientWidth*5;
            //     this.mode_reset();
            // }
            //clearInterval(this.repeater);
            //     var dis = this.distanceCalculation(0, 0, element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
            //repeatCount+=1;
            if (spacing * 22 + repeatCount * 43 < _this.imageMaxWidth) {
                repeatCount += 1;
            }
            else {
                repeatCount = 0;
            }
        }, 100 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_Pingpong = function (colors, isRainbow) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        console.log('%cmode_Pingpong_enter', 'color:rgb(255,75,255,1)', colors, this.repeater);
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        if (isRainbow) {
            colors = this.rainbow7Color();
        }
        //console.log('StartPoint','color:green',JSON.stringify(StartPoint),this.AllBlockColor); 
        //var SlopeEquation=this.SlopeEquation([0,0],[834,372]);//StartPoint.clientWidth
        //Math.trunc(3.7); // 3
        var repeatCount = 0;
        this.repeater = setInterval(function () {
            _this.setAllBlockColor([0, 0, 0, 1]);
            var horizontalList = [];
            var setRGB = colors[_this.getRandom(0, colors.length - 1)];
            //console.log('repeatCount', repeatCount);
            var spacing = -5;
            if (repeatCount % 2 == 0) {
                for (var index = 0; index < _this.imageMaxHeight; index += StartPoint.clientHeight) {
                    var ypos = index;
                    spacing += 1;
                    var min = intervalCount * StartPoint.clientWidth + spacing * 22;
                    var max = intervalCount * StartPoint.clientWidth + StartPoint.clientWidth * 4 + spacing * 22;
                    for (var index2 = min; index2 < max; index2 += 1) {
                        var xpos = index2;
                        horizontalList.push([xpos, ypos]);
                    }
                }
            }
            else {
                var spacing = -5;
                for (var index = 0; index < _this.imageMaxHeight; index += StartPoint.clientHeight) {
                    spacing += 1;
                    var ypos = index;
                    var min = _this.imageMaxWidth - intervalCount * StartPoint.clientWidth - spacing * 22 - StartPoint.clientWidth * 4;
                    var max = _this.imageMaxWidth - intervalCount * StartPoint.clientWidth - spacing * 22;
                    //var spacing2 = this.minKeyWidth * intervalCount;
                    for (var index2 = max; index2 > min; index2 -= 1) {
                        var xpos = index2;
                        horizontalList.push([xpos, ypos]);
                    }
                }
            }
            //console.log('horizontalList', horizontalList); 
            var target = _this.AllBlockColor;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                for (var i2 = 0; i2 < horizontalList.length; i2++) {
                    var T = horizontalList[i2];
                    if (T[0] > element.coordinateData.top_Left[0] &&
                        T[0] < element.coordinateData.top_Right[0] &&
                        T[1] > element.coordinateData.top_Left[1] &&
                        T[1] < element.coordinateData.bottom_Left[1]) {
                        var temp_colorData = JSON.parse(JSON.stringify(colors[_this.getRandom(0, colors.length - 1)]));
                        for (var index_17 = 0; index_17 < 3; index_17++) {
                            temp_colorData[index_17] = temp_colorData[index_17] * _this.lightData.brightness / 100;
                        }
                        element.color = temp_colorData;
                        //element.color = setRGB;
                        continue;
                    }
                }
            }
            if (intervalCount * StartPoint.clientWidth * 2 < _this.imageMaxWidth) {
                intervalCount += 1;
            }
            else {
                intervalCount = 0;
                repeatCount += 1;
            }
        }, 100);
    };
    M_Light_CS.prototype.mode_BreatheSeparately = function () {
        clearInterval(this.repeater);
        var opacity = 1;
        var opacityCount = 0;
        //RGBcolors =[[255,0,0,1],[255,0,0,0.8],[0,255,0,1],[0,255,0,0.8],[0,0,255,1],[0,0,255,0.8]];
        var totalStep = 30;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        var target = this.AllBlockColor;
        this.setAllBlockColor([0, 0, 255, 1]);
        var repeatCountList = [];
        var RanRange = [10, 100];
        //var temp_target=JSON.parse(JSON.stringify(this.AllBlockColor));   
        for (var index = 0; index < target.length; index++) {
            //var modStep=(target[index].coordinateData.center_Point[0]%this.imageMaxWidth)/this.imageMaxWidth;
            repeatCountList.push({
                color: 0,
                nowPos: 0,
                nowstep: 0,
                repeatCount: 1,
                repeatTime: this.getRandom(RanRange[0], RanRange[1]),
            });
        }
        //var SlopeEquation=this.SlopeEquation([0,0],[834,372]);//StartPoint.clientWidth
        var repeatCount = 0;
        var exist = [];
        this.repeater = setInterval(function () {
            if (opacityCount % 2 == 0) {
                opacity -= 0.05;
            }
            else {
                opacity += 0.05;
            }
            if (opacity >= 1 || opacity <= 0) {
                opacityCount += 1;
            }
            //var horizontalList = [];
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                // var resultL = exist.find((x) => x == index)
                // if (resultL != undefined) {
                //     break;
                // }
                if (element.breathing && element.clearStatus) {
                    //console.log('%c mode_BreatheSeparately_element','color:rgb(255,77,255)',  element);
                    element.color[3] = opacity;
                }
                else {
                }
                //continue;
                //break;
            }
        }, 100);
    };
    M_Light_CS.prototype.clearIntervalEvent = function () {
        clearInterval(this.repeater);
    };
    M_Light_CS.prototype.mode_BreatheSeparatelyBlack = function () {
        var _this = this;
        console.log('%c Enter_BreatheSeparatelyBlack', 'color:rgb(255,77,255)');
        clearInterval(this.repeater);
        //RGBcolors =[[255,0,0,1],[255,0,0,0.8],[0,255,0,1],[0,255,0,0.8],[0,0,255,1],[0,0,255,0.8]];
        var totalStep = 255;
        var nowStep = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        var target = this.AllBlockColor;
        //this.setAllBlockColor([0,0,255,1]);
        //    var tempList=[];
        //    var RanRange=[10,100];
        //     for (let index = 0; index < target.length; index ++) {
        //         tempList.push({
        //             color: JSON.parse(JSON.stringify(target[index].color)),
        //             recordIndex:index,
        //             repeatCount: 1,
        //             repeatTime: this.getRandom(RanRange[0], RanRange[1]),
        //         });
        //     }
        //     var exist=[];
        var repeatCount = 0;
        var nowColor = [];
        var newColor = [];
        this.repeater = setInterval(function () {
            if (nowStep < totalStep) {
                nowStep += 5;
            }
            else {
                nowStep = 0;
                repeatCount += 1;
            }
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var listItem = target[index];
                if (element.breathing && element.clearStatus) {
                    if (repeatCount % 2 == 1) {
                        nowColor = [0, 0, 0, 1];
                        newColor = JSON.parse(JSON.stringify(listItem.color));
                    }
                    else {
                        nowColor = JSON.parse(JSON.stringify(listItem.color));
                        newColor = [0, 0, 0, 1];
                    }
                    var t_data = [0, 0, 0, 1];
                    for (var i_step = 0; i_step < 3; i_step++) {
                        t_data[i_step] = Math.floor((nowColor[i_step] * (totalStep - nowStep) + newColor[i_step] * nowStep) / totalStep);
                    }
                    //var target = this.AllBlockColor;
                    _this.BreathTempArray[index].color = JSON.parse(JSON.stringify(t_data));
                    //element.color= JSON.parse(JSON.stringify(t_data))      
                }
                else {
                    _this.BreathTempArray[index].color = JSON.parse(JSON.stringify(listItem.color));
                }
                //continue;
                //break;
            }
            //console.log('%c Enter_BreatheSeparatelyBlack','color:rgb(255,77,255)',t_data,nowColor,newColor,nowStep,totalStep);
        }, 30);
    };
    M_Light_CS.prototype.mode_Wave1 = function (colors, isRainbow) {
        var _this = this;
        if (colors === void 0) { colors = [[0, 0, 255, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var RGBcolors = [];
        RGBcolors = [[255, 0, 0, 1], [0, 255, 0, 1], [0, 0, 255, 1]];
        if (isRainbow) {
            //colors=this.rainbow7Color();
            colors = RGBcolors;
        }
        else {
            colors = [colors[0], [colors[0][0], colors[0][1], colors[0][2], 0.4]];
        }
        var totalStep = 3;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        var target = this.AllBlockColor;
        this.setAllBlockColor([0, 0, 0, 1]);
        var temp_target = JSON.parse(JSON.stringify(this.AllBlockColor));
        for (var index = 0; index < temp_target.length; index++) {
            //console.log(' target[index].center_Point[0]', target[index].coordinateData.center_Point[0]);
            // var alpha=(target[index].coordinateData.center_Point[0]%this.imageMaxWidth)/this.imageMaxWidth;
            var modStep = (target[index].coordinateData.center_Point[0] % this.imageMaxWidth) / this.imageMaxWidth;
            var ran = (colors.length - 1) - Math.round(modStep * (colors.length - 1));
            console.log('modStep', modStep);
            temp_target[index].nowStep = modStep * totalStep;
            temp_target[index].nowPos = 0;
            var temp_block = temp_target[index];
            var temp_colorData = [0, 0, 0, 1];
            var temp_C = colors[0];
            var nextColor = colors[1];
            if (isRainbow) {
                temp_target[index].nowPos = ran;
                if (ran < colors.length - 1) {
                    temp_C = colors[ran];
                    nextColor = colors[ran + 1];
                }
                else {
                    temp_C = colors[0];
                    nextColor = colors[0];
                }
            }
            var temp_colorData = [0, 0, 0, 1];
            for (var index2 = 0; index2 < 3; index2++) {
                temp_colorData[index2] = (temp_C[index2] * (totalStep - temp_block.nowStep) + nextColor[index2] * temp_block.nowStep) / totalStep;
                temp_colorData[index2] = temp_colorData[index2] * this.lightData.brightness / 100;
            }
            target[index].color = temp_colorData;
        }
        console.log('temp_target', temp_target);
        //var SlopeEquation=this.SlopeEquation([0,0],[834,372]);//StartPoint.clientWidth
        var exist = [];
        this.repeater = setInterval(function () {
            var horizontalList = [];
            //var setRGB=colors[this.getRandom(0, colors.length - 1)];
            var spacing = -5;
            for (var index = 0; index < _this.imageMaxHeight; index += StartPoint.clientHeight) {
                var ypos = index;
                spacing += 1;
                var min = intervalCount * StartPoint.clientWidth + spacing * 22;
                var max = intervalCount * StartPoint.clientWidth + StartPoint.clientWidth + spacing * 22;
                for (var index2 = min; index2 < max; index2 += StartPoint.clientWidth / 2) {
                    var xpos = index2;
                    horizontalList.push([xpos, ypos]);
                }
            }
            var _loop_6 = function (index) {
                var element = target[index];
                for (var i2 = 0; i2 < horizontalList.length; i2++) {
                    T = horizontalList[i2];
                    resultL = exist.find(function (x) { return x == index; });
                    //console.log('exist',exist);
                    if (resultL != undefined) {
                        //console.log('resultL',resultL);
                        break;
                        //return;
                    }
                    if (T[0] > element.coordinateData.top_Left[0] && T[0] < element.coordinateData.top_Right[0] && T[1] > element.coordinateData.top_Left[1] && T[1] < element.coordinateData.bottom_Left[1]) {
                        exist.push(index);
                        temp_block = temp_target[index];
                        //console.log('temp_block.color',temp_block.color);
                        tempColors = colors;
                        if (temp_block.nowStep + 1 < totalStep) {
                            temp_block.nowStep += 1;
                        }
                        else {
                            temp_block.nowStep = 0;
                            if (temp_block.nowPos + 1 < tempColors.length) {
                                temp_block.nowPos += 1;
                            }
                            else {
                                temp_block.nowPos = 0;
                            }
                        }
                        temp_C = tempColors[temp_block.nowPos];
                        if (temp_block.nowPos + 1 < tempColors.length) {
                            nextColor = tempColors[temp_block.nowPos + 1];
                        }
                        else {
                            nextColor = tempColors[0];
                        }
                        temp_colorData = [0, 0, 0, 1];
                        for (var index2 = 0; index2 < 3; index2++) {
                            temp_colorData[index2] = (temp_C[index2] * (totalStep - temp_block.nowStep) + nextColor[index2] * temp_block.nowStep) / totalStep;
                            temp_colorData[index2] = temp_colorData[index2] * _this.lightData.brightness / 100;
                        }
                        element.color = temp_colorData;
                        //continue;
                        //break;
                    }
                }
            };
            var T, resultL, temp_block, tempColors, nextColor, temp_C, temp_colorData;
            //console.log('horizontalList;',horizontalList);
            for (var index = 0; index < target.length; index++) {
                _loop_6(index);
            }
            if (intervalCount * StartPoint.clientWidth < _this.imageMaxWidth) {
                intervalCount += 1;
            }
            else {
                intervalCount = 0;
                exist = [];
            }
        }, 100);
    };
    M_Light_CS.prototype.mode_Rainbow = function () {
        var _this = this;
        console.log('%c Enter_mode_Rainbow', 'color:rgb(255,77,255)');
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        this.setAllBlockColor([0, 0, 0, 1]);
        var H_spacing = Math.trunc(this.imageMaxHeight / StartPoint.clientHeight);
        var w_range = Math.trunc(this.imageMaxWidth / this.minKeyWidth);
        var repeatCountList = [];
        var times = 0;
        var setColors = this.rainbow7Color();
        var target = this.twoDimensionalArray;
        for (var index = 0; index < this.max_X_Number; index++) {
            //this.twoDimensionalArray[index][0].color=[0,0,255,1];
            for (var index2 = 0; index2 < setColors.length; index2++) {
                repeatCountList.push({
                    nowPos: index2,
                    color: setColors[index2],
                    pos: [index, index2],
                    backupPos: [index, index2],
                    step: 5,
                    nowStep: 0,
                });
            }
        }
        this.repeater = setInterval(function () {
            _this.resetTwoDimensionalArray();
            for (var i2 = 0; i2 < repeatCountList.length; i2++) {
                var T = repeatCountList[i2];
                if (T.nowStep + 1 < T.step) {
                    T.nowStep += 1;
                }
                else {
                    T.nowStep = 0;
                    T.nowPos += 1;
                }
                var temp_C = setColors[T.nowPos];
                var nextColor = [];
                if (T.nowPos + 1 < setColors.length - 1) {
                    //T.nowPos+=1;
                    nextColor = setColors[T.nowPos + 1];
                }
                else {
                    T.nowPos = 0;
                    nextColor = setColors[T.nowPos];
                }
                var temp_colorData = [0, 0, 0, 1];
                for (var index2 = 0; index2 < 3; index2++) {
                    temp_colorData[index2] = (temp_C[index2] * (T.step - T.nowStep) + nextColor[index2] * T.nowStep) / T.step;
                    temp_colorData[index2] = temp_colorData[index2] * _this.lightData.brightness / 100;
                }
                _this.twoDimensionalArray[T.pos[0]][T.pos[1]].color = temp_colorData;
            }
            _this.showTwoDimensionalArray();
        }, 50 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_Cooking = function (colors, isRainbow) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var rainbowColors = this.rainbow7Color();
        var StartPoint = this.getNowBlock(0).coordinateData;
        this.setAllBlockColor([0, 0, 0, 1]);
        var H_spacing = Math.trunc(this.imageMaxHeight / StartPoint.clientHeight);
        var w_range = Math.trunc(this.imageMaxWidth / this.minKeyWidth);
        var repeatCountList = [];
        var times = 0;
        var target = this.twoDimensionalArray;
        // var a2=[0,3,5,8,11,13];
        for (var index = 0; index < this.max_X_Number; index++) {
            //this.twoDimensionalArray[index][0].color=[0,0,255,1];
            for (var index2 = 0; index2 < this.max_Y_Number; index2++) {
                repeatCountList.push({
                    nowPos: 0,
                    color: [0, 0, 0, 1],
                    pos: [index, index2],
                    backupPos: [index, index2],
                    repeatTime: this.getRandom(0, 3),
                });
            }
        }
        this.repeater = setInterval(function () {
            var temp_colorData = JSON.parse(JSON.stringify(colors[0]));
            for (var index = 0; index < 3; index++) {
                temp_colorData[index] = temp_colorData[index] * _this.lightData.brightness / 100;
            }
            _this.resetTwoDimensionalArray(temp_colorData); //
            for (var i2 = 0; i2 < repeatCountList.length; i2++) {
                var T = repeatCountList[i2];
                if (T.repeatTime > 0) {
                    T.repeatTime -= 1;
                }
                if (T.repeatTime == 0) {
                    if (T.pos[1] - 1 > 0) {
                        T.pos[1] -= 1;
                    }
                    else {
                        T.pos[1] = T.backupPos[1];
                        T.repeatTime = 0;
                    }
                    //console.log('repeatCountList;', i2,repeatCountList[i2].repeatCount);
                }
                _this.twoDimensionalArray[T.pos[0]][T.pos[1]].color = [0, 0, 0, 1];
            }
            _this.showTwoDimensionalArray();
        }, 50 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_Snowing = function (colors, isRainbow) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        this.setAllBlockColor([0, 0, 0, 1]);
        var H_spacing = Math.trunc(this.imageMaxHeight / StartPoint.clientHeight);
        var w_range = Math.trunc(this.imageMaxWidth / this.minKeyWidth);
        var repeatCountList = [];
        for (var x = StartPoint.top_Left[0]; x < this.imageMaxWidth; x += this.minKeyWidth) {
            //var xpos=[];
            //StartPoint.top_Left[1]
            var temp_list = [];
            //console.log('StartPoint.top_Left[1]',  StartPoint.top_Left[1],this.imageMaxHeight);
            for (var index2 = StartPoint.top_Left[1]; index2 < this.imageMaxHeight; index2 += StartPoint.clientHeight) {
                temp_list.push([x, index2]);
            }
            repeatCountList.push({
                color: [0, 255, 255, 1],
                i_list: temp_list,
                pos: 0,
                repeatCount: 6,
                repeatTime: this.getRandom(1, 25),
            });
            //this.getRandom(1,50)
            //var k = (movement + x) / this.imageMaxHeight;    // 回合數
            //var r = (movement + x) % this.imageMaxHeight;    // 餘數
            //console.log(x, y);
        }
        console.log('repeatCountList;', repeatCountList);
        this.repeater = setInterval(function () {
            _this.setAllBlockColor([0, 0, 0, 1]);
            //current_time+=5;
            for (var i2 = 0; i2 < repeatCountList.length; i2++) {
                var T = repeatCountList[i2];
                if (T.repeatTime > 0) {
                    repeatCountList[i2].repeatTime -= 1;
                }
                else if (T.repeatTime == 0 && T.repeatCount < T.i_list.length) {
                    repeatCountList[i2].repeatCount += 1;
                    //console.log('repeatCountList;', i2,repeatCountList[i2].repeatCount);
                }
                if (T.repeatCount >= T.i_list.length) {
                    repeatCountList[i2].repeatCount = 0;
                    repeatCountList[i2].repeatTime = _this.getRandom(1, 25);
                }
            }
            var target = _this.AllBlockColor;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                for (var i2 = 0; i2 < repeatCountList.length; i2++) {
                    var T = repeatCountList[i2];
                    //console.log('T_now;', T);
                    var now = T.i_list[T.repeatCount];
                    //console.log('now;', now);
                    if (now[0] >= element.coordinateData.top_Left[0] &&
                        now[0] <= element.coordinateData.top_Right[0] &&
                        now[1] >= element.coordinateData.top_Left[1] &&
                        now[1] <= element.coordinateData.bottom_Left[1]) {
                        var temp_colorData = JSON.parse(JSON.stringify(repeatCountList[i2].color));
                        for (var index_18 = 0; index_18 < 3; index_18++) {
                            temp_colorData[index_18] = temp_colorData[index_18] * _this.lightData.brightness / 100;
                        }
                        target[index].color = temp_colorData;
                    }
                }
            }
        }, 100 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_DigitTimes = function (colors, isRainbow) {
        var _this = this;
        if (colors === void 0) { colors = [[0, 0, 255, 1]]; }
        if (isRainbow === void 0) { isRainbow = true; }
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        this.setAllBlockColor([0, 0, 0, 1]);
        var H_spacing = Math.trunc(this.imageMaxHeight / StartPoint.clientHeight);
        var w_range = Math.trunc(this.imageMaxWidth / this.minKeyWidth);
        var repeatCountList = [];
        var setRGB;
        var target = this.twoDimensionalArray;
        // var a2=[0,3,5,8,11,13];
        //    var randomList=[];
        //    for (let i = 0; i < this.KeyTableArray[0][1]-1; i++) {
        //        randomList.push(this.getRandom(0, this.KeyTableArray[0][1]-1));   //亂數產生，亂數產生的範圍是1~9
        //        for (let j = 0; j < i; j++) {
        //            while (randomList[j] == randomList[i])    //檢查是否與前面產生的數值發生重複，如果有就重新產生
        //            {
        //                j = 0;  //如有重複，將變數j設為0，再次檢查 (因為還是有重複的可能)
        //                randomList[i] = this.getRandom(0, this.KeyTableArray[0][1]-1);   //重新產生，存回陣列，亂數產生的範圍是1~9
        //            }
        //        }
        //    }
        for (var index = 0; index <= this.KeyTableArray[0][1]; index++) {
            //this.twoDimensionalArray[index][0].color=[0,0,255,1];
            repeatCountList.push({
                color: colors[this.getRandom(0, colors.length - 1)],
                pos: [index, index % (this.max_Y_Number / 2)],
                backupPos: [index, index % (this.max_Y_Number / 2)],
                repeatTime: this.getRandom(0, 3),
            });
        }
        this.repeater = setInterval(function () {
            _this.resetTwoDimensionalArray();
            for (var i2 = 0; i2 < repeatCountList.length; i2++) {
                var T = repeatCountList[i2];
                if (T.repeatTime > 0) {
                    T.repeatTime -= 1;
                }
                if (T.repeatTime == 0) {
                    if (T.pos[1] + 1 < _this.max_Y_Number) {
                        if (T.pos[0] < 1) {
                            T.pos[1] += 1;
                        }
                        else {
                            T.pos[1] += 1;
                            T.pos[0] += 1;
                        }
                    }
                    else {
                        T.pos[0] = T.backupPos[0];
                        T.pos[1] = 0;
                        T.repeatTime = 1;
                    }
                    //console.log('repeatCountList;', i2,repeatCountList[i2].repeatCount);
                }
                var temp_colorData = JSON.parse(JSON.stringify(T.color));
                for (var index = 0; index < 3; index++) {
                    temp_colorData[index] = temp_colorData[index] * _this.lightData.brightness / 100;
                }
                _this.twoDimensionalArray[T.pos[0]][T.pos[1]].color = temp_colorData;
            }
            _this.showTwoDimensionalArray();
        }, 500 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_SinGraphics = function (colors) {
        var _this = this;
        if (colors === void 0) { colors = []; }
        colors = [[255, 0, 0, 1], [0, 255, 0, 1], [0, 0, 255, 1]];
        var Brightness = 1;
        clearInterval(this.repeater);
        this.currentBlockIndex = 43;
        var repeatMin = 5;
        var repeatMax = 200;
        var repeatCount = 0;
        var StartPoint = this.getNowBlock().coordinateData;
        var horizontalList = [];
        var record = 0;
        //var radian = 75 * Math.PI / 180;    //計算出弧度
        var maxH = 268;
        this.repeater = setInterval(function () {
            _this.setAllBlockColor([0, 0, 0, 1]);
            //console.log('SlopeEquation', SlopeEquation);
            var spacing = -5;
            horizontalList = [];
            // for (let x = 0; x < 834; x++) { 
            //     const y = Math.sin(x * 2) * 100 ;
            //     horizontalList.push([x, y]);
            // }
            // for (let x = 0; x < this.imageMaxWidth; x++) { 
            //     const radians = x / this.imageMaxWidth * Math.PI * 2;
            //     const scale = (Math.sin(radians - Math.PI * 0.5) + 1) * 0.5*maxH; 
            //     const y = Math.sin(x * 0.02 + 6) * 5 * scale; 
            //     horizontalList.push([x, y]);
            // }
            for (var i_xpos = 0; i_xpos < 834; i_xpos++) {
                var ratio = Math.sin(i_xpos / 2 * Math.PI / 180);
                var xpos = 120 + i_xpos;
                //const scale = (Math.sin(radian - Math.PI * 0.5) + 1) * 0.5*maxH; 
                //var ypos=22+((ratio+1)/2*372);
                var h = 22 + ((ratio + 1) / 2 * 268);
                horizontalList.push([xpos, h]);
            }
            console.log('horizontalList', horizontalList);
            var target = _this.AllBlockColor;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                for (var i2 = 0; i2 < horizontalList.length; i2++) {
                    var T = horizontalList[i2];
                    //console.log('SlopeEquation[index]', i2, T, element.coordinateData.top_Left);
                    if (T[0] > element.coordinateData.top_Left[0] &&
                        T[0] < element.coordinateData.top_Right[0] &&
                        T[1] > element.coordinateData.top_Left[1] &&
                        T[1] < element.coordinateData.bottom_Left[1]) {
                        element.color = [0, 0, 255, 1];
                        continue;
                    }
                }
            }
            if (record <= 0 || record >= 1) {
                repeatCount += 1;
            }
            if (repeatCount % 2 == 0) {
                record -= 0.15;
            }
            else {
                record += 0.15;
            }
        }, 150 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_HeartbeatSensor = function (colors) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1], [0, 255, 0, 1], [0, 0, 255, 1]]; }
        console.log('%c Enter_mode_HeartbeatSensor', 'color:rgb(255,77,255)', colors);
        var Brightness = 1;
        clearInterval(this.repeater);
        this.currentBlockIndex = 43;
        //var StartPoint = [this.imageMaxWidth/2,this.imageMaxHeight/2];
        var StartPoint = this.getNowBlock(0).coordinateData;
        var share_RepeatCount = 0;
        var horizontalList = [];
        for (var index = 0; index < this.imageMaxWidth; index += this.minKeyWidth) {
            var ratio = Math.sin((index * Math.PI / 180));
            //var xpos=120+index;
            //const scale = (Math.sin(radian - Math.PI * 0.5) + 1) * 0.5*maxH; 
            var ypos = (ratio + 1) / 2 * this.imageMaxHeight;
            horizontalList.push({
                repeatCount: 0,
                coordinate: [index, StartPoint.top_Left[0] + ypos],
            });
        }
        this.repeater = setInterval(function () {
            _this.setAllBlockColor([0, 0, 0, 1]);
            var isEnd = false;
            var spacing = -5;
            // if(horizontalList[0]['coordinate'][1]<=0||horizontalList[1]['coordinate'][1]>=this.imageMaxHeight){
            //     //h_Item['repeatCount']+=1;
            //     share_RepeatCount+=1;
            // }
            for (var index = 0; index < horizontalList.length; index++) {
                var h_Item = horizontalList[index];
                if (h_Item.coordinate[1] <= 0 || h_Item.coordinate[1] >= _this.imageMaxHeight) {
                    h_Item['repeatCount'] += 1;
                    //isEnd=true;
                    //break;
                }
                if (h_Item['repeatCount'] % 2 == 0) {
                    h_Item['coordinate'][1] -= 40;
                    if (h_Item['coordinate'][1] <= 0) {
                        h_Item['coordinate'][1] = 0;
                    }
                }
                else {
                    h_Item['coordinate'][1] += 40;
                    if (h_Item['coordinate'][1] >= _this.imageMaxHeight) {
                        h_Item['coordinate'][1] = _this.imageMaxHeight;
                    }
                }
            }
            // if(isEnd){
            //     for (let i_2 = 0; i_2 <  horizontalList.length; i_2++) {
            //         var h_Item2=horizontalList[i_2];
            //         h_Item2.repeatCount+=1; 
            //     }
            // }
            console.log('horizontalList', horizontalList, share_RepeatCount % 2);
            var target = _this.AllBlockColor;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                for (var i2 = 0; i2 < horizontalList.length; i2++) {
                    var T = horizontalList[i2].coordinate;
                    //console.log('SlopeEquation[index]', i2, T, element.coordinateData.top_Left);
                    if (T[0] >= element.coordinateData.top_Left[0] &&
                        T[0] <= element.coordinateData.top_Right[0] &&
                        T[1] >= element.coordinateData.top_Left[1] &&
                        T[1] <= element.coordinateData.bottom_Left[1]) {
                        var temp_colorData = JSON.parse(JSON.stringify(colors[_this.getRandom(0, colors.length - 1)]));
                        for (var index_19 = 0; index_19 < 3; index_19++) {
                            temp_colorData[index_19] = temp_colorData[index_19] * _this.lightData.brightness / 100;
                        }
                        element.color = temp_colorData;
                        continue;
                    }
                }
            }
            //console.log('this.animationSpeed', this.animationSpeed);
        }, 60 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_SinMoving_Up_Down = function (colors) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1], [0, 255, 0, 1], [0, 0, 255, 1]]; }
        console.log('%c Enter_mode_HeartbeatSensor', 'color:rgb(255,77,255)', colors);
        var Brightness = 1;
        clearInterval(this.repeater);
        this.currentBlockIndex = 43;
        //var StartPoint = [this.imageMaxWidth/2,this.imageMaxHeight/2];
        var StartPoint = this.getNowBlock(0).coordinateData;
        var share_RepeatCount = 0;
        var horizontalList = [];
        for (var index = 0; index < this.imageMaxWidth; index += this.minKeyWidth) {
            var ratio = Math.sin((index * Math.PI / 180));
            //var xpos=120+index;
            //const scale = (Math.sin(radian - Math.PI * 0.5) + 1) * 0.5*maxH; 
            var ypos = (ratio + 1) / 2 * 268;
            horizontalList.push({
                repeatCount: 0,
                coordinate: [index, StartPoint.top_Left[0] + ypos],
            });
        }
        this.repeater = setInterval(function () {
            _this.setAllBlockColor([0, 0, 0, 1]);
            var spacing = -5;
            if (horizontalList[0]['coordinate'][1] <= 0 || horizontalList[1]['coordinate'][1] >= _this.imageMaxHeight) {
                //h_Item['repeatCount']+=1;
                share_RepeatCount += 1;
            }
            for (var index = 0; index < horizontalList.length; index++) {
                var h_Item = horizontalList[index];
                if (share_RepeatCount % 2 == 0) {
                    h_Item['coordinate'][1] -= 40;
                }
                else {
                    h_Item['coordinate'][1] += 40;
                }
                // if(h_Item['coordinate'][1]<=0||h_Item['coordinate'][1]>=this.imageMaxHeight){
                //     //h_Item['repeatCount']+=1;
                //     share_RepeatCount+=1;
                // }
            }
            console.log('horizontalList', horizontalList, share_RepeatCount % 2);
            var target = _this.AllBlockColor;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                for (var i2 = 0; i2 < horizontalList.length; i2++) {
                    var T = horizontalList[i2].coordinate;
                    //console.log('SlopeEquation[index]', i2, T, element.coordinateData.top_Left);
                    if (T[0] >= element.coordinateData.top_Left[0] &&
                        T[0] <= element.coordinateData.top_Right[0] &&
                        T[1] >= element.coordinateData.top_Left[1] &&
                        T[1] <= element.coordinateData.bottom_Left[1]) {
                        element.color = colors[_this.getRandom(0, colors.length - 1)];
                        continue;
                    }
                }
            }
            console.log('this.animationSpeed', _this.animationSpeed);
        }, 60 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_Matrix3_Rainbow = function (colors, speed) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 255, 0, 1]]; }
        if (speed === void 0) { speed = 1; }
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        //colors=this.rainbow7Color();
        var totalStep = 30;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        var target = this.AllBlockColor;
        this.setAllBlockColor([0, 0, 0, 1]);
        var repeatCountList = [];
        var RanRange = [1, 25];
        //var temp_target=JSON.parse(JSON.stringify(this.AllBlockColor));
        for (var index = 0; index < target.length; index++) {
            //console.log(' target[index].center_Point[0]', target[index].coordinateData.center_Point[0]);
            // var alpha=(target[index].coordinateData.center_Point[0]%this.imageMaxWidth)/this.imageMaxWidth;
            var modStep = (target[index].coordinateData.center_Point[0] % this.imageMaxWidth) / this.imageMaxWidth;
            //var ran=this.getRandom(0, colors.length - 1);
            var ran = (colors.length - 1) - Math.round(modStep * (colors.length - 1));
            //console.log('alpha',alpha);
            //console.log('modStep',modStep);
            //nowstep:modStep*totalStep
            repeatCountList.push({
                color: 0,
                nowPos: 0,
                nowstep: 0,
                repeatCount: 1,
                repeatTime: this.getRandom(RanRange[0], RanRange[1]),
            });
            var temp_block = repeatCountList[index];
            var temp_C = colors[0];
            var nextColor = colors[1];
            repeatCountList[index].nowPos = ran;
            if (ran < colors.length - 1) {
                temp_C = colors[ran];
                nextColor = colors[ran + 1];
            }
            else {
                temp_C = colors[0];
                nextColor = colors[0];
            }
        }
        //var SlopeEquation=this.SlopeEquation([0,0],[834,372]);//StartPoint.clientWidth
        var repeatCount = 0;
        var exist = [];
        this.repeater = setInterval(function () {
            var horizontalList = [];
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                exist.push(index);
                var temp_block = repeatCountList[index];
                var tempColors = colors;
                var nextColor;
                if (temp_block.repeatTime > 0) {
                    temp_block.repeatTime -= 1;
                }
                if (temp_block.repeatTime == 0) {
                    if (temp_block.nowStep + 1 < totalStep) {
                        temp_block.nowStep += 1;
                    }
                    else {
                        temp_block.nowStep = 0;
                        var newRand = _this.getRandom(RanRange[0], RanRange[1]);
                        temp_block.repeatTime = newRand;
                        if (temp_block.nowPos + 1 < tempColors.length) {
                            temp_block.nowPos += 1;
                        }
                        else {
                            temp_block.nowPos = 0;
                        }
                    }
                    var temp_C = tempColors[temp_block.nowPos];
                    if (temp_block.nowPos + 1 < tempColors.length) {
                        nextColor = tempColors[temp_block.nowPos + 1];
                    }
                    else {
                        nextColor = tempColors[0];
                    }
                    var temp_colorData = [0, 0, 0, 1];
                    for (var index_20 = 0; index_20 < 3; index_20++) {
                        temp_colorData[index_20] = (temp_C[index_20] * (totalStep - temp_block.nowStep) + nextColor[index_20] * temp_block.nowStep) / totalStep;
                        temp_colorData[index_20] = temp_colorData[index_20] * _this.lightData.brightness / 100;
                    }
                    element.color = temp_colorData;
                }
            }
            if (intervalCount * StartPoint.clientWidth < _this.imageMaxWidth) {
                intervalCount += 1;
            }
            else {
                intervalCount = 0;
                exist = [];
                repeatCount += 1;
            }
        }, 100 * this.animationSpeed * speed);
    };
    M_Light_CS.prototype.mode_Matrix3 = function (colors, isRainbow, speed) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 255, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = false; }
        if (speed === void 0) { speed = 1; }
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var RGBcolors = [];
        RGBcolors = [[255, 0, 0, 1], [0, 255, 0, 1], [0, 0, 255, 1]];
        //RGBcolors =[[255,0,0,1],[255,0,0,0.8],[0,255,0,1],[0,255,0,0.8],[0,0,255,1],[0,0,255,0.8]];
        if (isRainbow) {
            //colors=this.rainbow7Color();
            colors = RGBcolors;
        }
        else {
            colors = [colors[0], [0, 0, 0, 1]];
        }
        var totalStep = 30;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        var target = this.AllBlockColor;
        this.setAllBlockColor([0, 0, 0, 1]);
        var repeatCountList = [];
        var RanRange = [1, 25];
        //var temp_target=JSON.parse(JSON.stringify(this.AllBlockColor));
        for (var index = 0; index < target.length; index++) {
            //console.log(' target[index].center_Point[0]', target[index].coordinateData.center_Point[0]);
            // var alpha=(target[index].coordinateData.center_Point[0]%this.imageMaxWidth)/this.imageMaxWidth;
            var modStep = (target[index].coordinateData.center_Point[0] % this.imageMaxWidth) / this.imageMaxWidth;
            //var ran=this.getRandom(0, colors.length - 1);
            var ran = (colors.length - 1) - Math.round(modStep * (colors.length - 1));
            //console.log('alpha',alpha);
            //console.log('modStep',modStep);
            //nowstep:modStep*totalStep
            repeatCountList.push({
                color: 0,
                nowPos: 0,
                nowstep: 0,
                repeatCount: 1,
                repeatTime: this.getRandom(RanRange[0], RanRange[1]),
            });
            var temp_block = repeatCountList[index];
            var temp_C = colors[0];
            var nextColor = colors[1];
            if (isRainbow) {
                repeatCountList[index].nowPos = ran;
                if (ran < colors.length - 1) {
                    temp_C = colors[ran];
                    nextColor = colors[ran + 1];
                }
                else {
                    temp_C = colors[0];
                    nextColor = colors[0];
                }
            }
        }
        //var SlopeEquation=this.SlopeEquation([0,0],[834,372]);//StartPoint.clientWidth
        var repeatCount = 0;
        var exist = [];
        this.repeater = setInterval(function () {
            //this.setAllBlockColor([0, 0, 0, 1]);
            var horizontalList = [];
            //console.log('horizontalList;',horizontalList);
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                // var resultL = exist.find((x) => x == index)
                // if (resultL != undefined) {
                //     break;
                // }
                exist.push(index);
                var temp_block = repeatCountList[index];
                //console.log('temp_block.color',temp_block.color);
                var tempColors = colors;
                //var tempColors =temp_block.color;
                var nextColor;
                if (temp_block.repeatTime > 0) {
                    temp_block.repeatTime -= 1;
                }
                if (temp_block.repeatTime == 0) {
                    if (temp_block.nowStep + 1 < totalStep) {
                        temp_block.nowStep += 1;
                    }
                    else {
                        temp_block.nowStep = 0;
                        var newRand = _this.getRandom(RanRange[0], RanRange[1]);
                        temp_block.repeatTime = newRand;
                        if (temp_block.nowPos + 1 < tempColors.length) {
                            temp_block.nowPos += 1;
                        }
                        else {
                            temp_block.nowPos = 0;
                        }
                    }
                    var temp_C = tempColors[temp_block.nowPos];
                    if (temp_block.nowPos + 1 < tempColors.length) {
                        nextColor = tempColors[temp_block.nowPos + 1];
                    }
                    else {
                        nextColor = tempColors[0];
                    }
                    var temp_colorData = [0, 0, 0, 1];
                    for (var index_21 = 0; index_21 < 3; index_21++) {
                        temp_colorData[index_21] = (temp_C[index_21] * (totalStep - temp_block.nowStep) + nextColor[index_21] * temp_block.nowStep) / totalStep;
                        temp_colorData[index_21] = temp_colorData[index_21] * _this.lightData.brightness / 100;
                    }
                    element.color = temp_colorData;
                }
                //continue;
                //break;
            }
            if (intervalCount * StartPoint.clientWidth < _this.imageMaxWidth) {
                intervalCount += 1;
            }
            else {
                intervalCount = 0;
                exist = [];
                repeatCount += 1;
            }
            // if(repeatCount>2){
            //     clearInterval(this.repeater);
            // }
        }, 100 * speed);
    };
    M_Light_CS.prototype.mode_Matrix2 = function (colors, isRainbow, speed) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 255, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = false; }
        if (speed === void 0) { speed = 1; }
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        var RGBcolors = [];
        RGBcolors = [[255, 0, 0, 1], [0, 255, 0, 1], [0, 0, 255, 1]];
        if (isRainbow) {
            //colors=this.rainbow7Color();
            colors = RGBcolors;
        }
        else {
            colors = [colors[0], [0, 0, 0, 1]];
        }
        var totalStep = 30;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        var target = this.AllBlockColor;
        this.setAllBlockColor([0, 0, 0, 1]);
        var repeatCountList = [];
        var RanRange = [10, 100];
        //var temp_target=JSON.parse(JSON.stringify(this.AllBlockColor));
        for (var index = 0; index < target.length; index++) {
            //console.log(' target[index].center_Point[0]', target[index].coordinateData.center_Point[0]);
            // var alpha=(target[index].coordinateData.center_Point[0]%this.imageMaxWidth)/this.imageMaxWidth;
            var modStep = (target[index].coordinateData.center_Point[0] % this.imageMaxWidth) / this.imageMaxWidth;
            //var ran=this.getRandom(0, colors.length - 1);
            var ran = (colors.length - 1) - Math.round(modStep * (colors.length - 1));
            repeatCountList.push({
                color: 0,
                nowPos: 0,
                nowstep: 0,
                repeatCount: 1,
                repeatTime: this.getRandom(RanRange[0], RanRange[1]),
            });
            var temp_block = repeatCountList[index];
            var temp_C = colors[0];
            var nextColor = colors[1];
            if (isRainbow) {
                repeatCountList[index].nowPos = ran;
                if (ran < colors.length - 1) {
                    temp_C = colors[ran];
                    nextColor = colors[ran + 1];
                }
                else {
                    temp_C = colors[0];
                    nextColor = colors[0];
                }
            }
            // var temp_colorData = [0, 0, 0, 1];
            // for (let index = 0; index < 3; index++) {
            //     temp_colorData[index] = (temp_C[index] * (totalStep - temp_block.nowStep) + nextColor[index] * temp_block.nowStep) / totalStep;
            //     temp_colorData[index]=temp_colorData[index]*this.lightData.brightness/100;
            // }
        }
        //var SlopeEquation=this.SlopeEquation([0,0],[834,372]);//StartPoint.clientWidth
        var repeatCount = 0;
        var exist = [];
        this.repeater = setInterval(function () {
            //this.setAllBlockColor([0, 0, 0, 1]);
            var horizontalList = [];
            //console.log('horizontalList;',horizontalList);
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                // var resultL = exist.find((x) => x == index)
                // if (resultL != undefined) {
                //     break;
                // }
                exist.push(index);
                var temp_block = repeatCountList[index];
                var tempColors = colors;
                var nextColor;
                //var tempColors =temp_block.color;
                if (temp_block.repeatTime > 0) {
                    temp_block.repeatTime -= 1;
                }
                if (temp_block.repeatTime == 0) {
                    if (temp_block.nowStep + 1 < totalStep) {
                        temp_block.nowStep += 1;
                    }
                    else {
                        temp_block.nowStep = 0;
                        var newRand = _this.getRandom(RanRange[0], RanRange[1]);
                        temp_block.repeatTime = newRand;
                        if (temp_block.nowPos + 1 < tempColors.length) {
                            temp_block.nowPos += 1;
                        }
                        else {
                            temp_block.nowPos = 0;
                        }
                    }
                    var temp_C = tempColors[temp_block.nowPos];
                    if (temp_block.nowPos + 1 < tempColors.length) {
                        nextColor = tempColors[temp_block.nowPos + 1];
                    }
                    else {
                        nextColor = tempColors[0];
                    }
                    var temp_colorData = [0, 0, 0, 1];
                    for (var index_22 = 0; index_22 < 3; index_22++) {
                        temp_colorData[index_22] = (temp_C[index_22] * (totalStep - temp_block.nowStep) + nextColor[index_22] * temp_block.nowStep) / totalStep;
                        temp_colorData[index_22] = temp_colorData[index_22] * _this.lightData.brightness / 100;
                    }
                    element.color = temp_colorData;
                }
                //continue;
                //break;
            }
            if (intervalCount * StartPoint.clientWidth < _this.imageMaxWidth) {
                intervalCount += 1;
            }
            else {
                intervalCount = 0;
                exist = [];
                repeatCount += 1;
            }
        }, 100 * speed);
    };
    M_Light_CS.prototype.mode_Starlight = function (colors, isRainbow, speed) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 255, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = false; }
        if (speed === void 0) { speed = 1; }
        clearInterval(this.repeater);
        this.currentBlockIndex = 0;
        console.log('%c mode_Starlight', 'color:rgb(255,75,255,1)', colors);
        //colors=[[255,0,0,1]];
        var translatecolors = [];
        if (isRainbow) {
            translatecolors = this.rainbow7Color();
        }
        else {
            translatecolors = colors;
        }
        var totalStep = 5;
        var intervalCount = 0;
        var StartPoint = this.getNowBlock(0).coordinateData;
        var target = this.AllBlockColor;
        this.setAllBlockColor([0, 0, 0, 1]);
        var repeatCountList = [];
        var RanRange = [1, 200];
        //var temp_target=JSON.parse(JSON.stringify(this.AllBlockColor));
        for (var index = 0; index < target.length; index++) {
            var modStep = (target[index].coordinateData.center_Point[0] % this.imageMaxWidth) / this.imageMaxWidth;
            var ran = this.getRandom(0, translatecolors.length - 1);
            //var ran=(colors.length - 1)-Math.round(modStep* (colors.length - 1));
            //console.log('modStep',modStep);
            console.log('ran', ran);
            repeatCountList.push({
                nowColor: [0, 0, 0, 1],
                nextColor: translatecolors[ran],
                nowStep: 0,
                repeatCount: 0,
                repeatTime: this.getRandom(RanRange[0], RanRange[1]),
            });
            //target[index].color=repeatCountList[index].color;
        }
        //var SlopeEquation=this.SlopeEquation([0,0],[834,372]);//StartPoint.clientWidth
        this.repeater = setInterval(function () {
            //this.setAllBlockColor([0, 0, 0, 1]);
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var temp_block = repeatCountList[index];
                var tempColors = translatecolors;
                //var tempColors =temp_block.color;
                if (temp_block.repeatTime > 0) {
                    temp_block.repeatTime -= 1;
                }
                else if (temp_block.repeatTime == 0) {
                    if (temp_block.nowStep + 1 < totalStep) {
                        temp_block.nowStep += 1;
                    }
                    else {
                        var newRand = _this.getRandom(RanRange[0], RanRange[1]);
                        temp_block.nowStep = 0;
                        temp_block.repeatCount += 1;
                        temp_block.nowColor = JSON.parse(JSON.stringify(temp_block.nextColor));
                        if (temp_block.repeatCount % 2) {
                            temp_block.nextColor = [0, 0, 0, 1];
                            temp_block.repeatTime = 40;
                        }
                        else {
                            temp_block.nextColor = JSON.parse(JSON.stringify(translatecolors[_this.getRandom(0, translatecolors.length - 1)]));
                            temp_block.repeatTime = _this.getRandom(RanRange[0], RanRange[1]);
                        }
                    }
                    //console.log('temp_block',temp_block);
                    var temp_colorData = [0, 0, 0, 1];
                    for (var index2 = 0; index2 < 3; index2++) {
                        temp_colorData[index2] = (temp_block.nowColor[index2] * (totalStep - temp_block.nowStep) + temp_block.nextColor[index2] * temp_block.nowStep) / totalStep;
                        temp_colorData[index2] = temp_colorData[index2] * _this.lightData.brightness / 100;
                    }
                    element.color = temp_colorData;
                }
                //continue;
                //break;
            }
        }, 100 * this.animationSpeed * speed);
    };
    M_Light_CS.prototype.mode_gloriousMode = function () {
        var _this = this;
        //this.addBlockIndex();
        clearInterval(this.repeater);
        this.currentBlockIndex = 36;
        var rgbRepeat = 0;
        var repeatCount = 0;
        //this.mode_AllBlockColor([255,0,0,1]);
        var StartPoint = this.getNowBlock().coordinateData;
        var setRGB = [255, 0, 0, 1];
        var tempRGB = [255, 0, 0, 1];
        var repeatCountArr = [0, 0, 0];
        this.repeater = setInterval(function () {
            //this.mode_AllBlockColor([0,255,0,1]);
            //this.mode_reset();
            var target = _this.AllBlockColor;
            // sub_disL-=50;
            // sub_disR+=50;
            _this.getNowBlock().color = setRGB;
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                console.log('this.M_Light_PRESETS.addBlockIndex();', element);
                var dis = _this.distanceCalculation(StartPoint.center_Point[0], StartPoint.center_Point[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                //+(repeatCount*50)
                //console.log('setCoordinate', StartPoint.center_Point[0],element.coordinateData.center_Point[0])
                var compareResult = _this.minKeyWidth * repeatCount;
                var compareResultMax = _this.minKeyWidth * repeatCount - _this.minKeyWidth;
                //repeatMax=compareResult+200;
                //var Ysdis=Math.abs(StartPoint.top_Left[1]-element.coordinateData.top_Left[1]);
                //if (Ysdis < 5) {
                if (dis < compareResult && dis > compareResultMax) {
                    element.color = setRGB;
                }
            }
            if (compareResult < _this.imageMaxWidth) {
                repeatCount += 1;
            }
            else {
                repeatCount = 0;
            }
        }, 500 * this.animationSpeed);
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.setAllBlockColor = function (rgba) {
        if (rgba === void 0) { rgba = [0, 0, 0, 1]; }
        var target = this.AllBlockColor;
        for (var index = 0; index < target.length; index++) {
            var element = target[index];
            element.color = JSON.parse(JSON.stringify(rgba));
        }
    };
    M_Light_CS.prototype.replaceAllBlockColor = function (AllBlock) {
        for (var index = 0; index < AllBlock.length; index++) {
            this.AllBlockColor[index].color = AllBlock[index].color;
            this.AllBlockColor[index].breathing = AllBlock[index].breathing;
            this.AllBlockColor[index].clearStatus = AllBlock[index].clearStatus;
        }
    };
    M_Light_CS.prototype.setAllBlockAlpha = function (alpha) {
        if (alpha === void 0) { alpha = 0; }
        var target = this.AllBlockColor;
        for (var index = 0; index < target.length; index++) {
            var color = target[index].color;
            if ((color[3] - 0.1) >= 0) {
                color[3] -= 0.1;
            }
            else {
                color[3] = 0;
            }
        }
    };
    M_Light_CS.prototype.mode_reset = function () {
        var target = this.AllBlockColor;
        for (var index = 0; index < target.length; index++) {
            var element = target[index];
            element.color = [0, 0, 0, 0];
        }
    };
    M_Light_CS.prototype.mode_FastRunWithoutTrace = function (colors, isRainbow, blockIndex) {
        var _this = this;
        if (colors === void 0) { colors = [[255, 0, 0, 1]]; }
        if (isRainbow === void 0) { isRainbow = false; }
        if (blockIndex === void 0) { blockIndex = 37; }
        //colors =[[255,0,0,1],[0,255,0,1],[0,0,255,1]];
        console.log('%c mode_FastRunWithoutTrace', 'color:rgb(255,77,255)', colors, isRainbow);
        if (isRainbow) {
            colors = this.rainbow7Color();
        }
        clearInterval(this.repeater);
        this.currentBlockIndex = blockIndex;
        var repeatCount = 0;
        var StartPoint = this.getNowBlock().coordinateData;
        this.setAllBlockColor([0, 0, 0, 1]);
        var totalStep = 10;
        var horizontalList = {};
        var target = this.AllBlockColor;
        var randomValue = this.getRandom(0, colors.length - 1);
        var step_End = false;
        //this.mode_reset();
        //var c_temp=colors[this.getRandom(0,colors.length-1)];
        horizontalList[this.currentBlockIndex] = {
            color: colors[this.getRandom(0, colors.length - 1)]
        };
        for (var index = 0; index < target.length; index++) {
            var element = target[index];
            var Ysdis = Math.abs(StartPoint.top_Left[1] - element.coordinateData.top_Left[1]);
            if (Ysdis <= 10) {
                horizontalList[index] = {
                    color: colors[this.getRandom(0, colors.length - 1)],
                    nowPos: 0,
                    nowstep: 0,
                    repeatCount: 0,
                    repeatTime: this.getRandom(15, 20),
                };
            }
        }
        console.log('horizontalList', Object.keys(horizontalList));
        this.repeater = setInterval(function () {
            var LIndex = _this.currentBlockIndex - repeatCount;
            var RIndex = _this.currentBlockIndex + repeatCount;
            var resultL = horizontalList[LIndex];
            //horizontalList.find((x) => x == this.currentBlockIndex-repeatCount);
            var resultR = horizontalList[RIndex];
            //horizontalList.find((x) => x == this.currentBlockIndex+repeatCount);
            if (step_End) {
                var tempColors = colors;
                var nextColor = [0, 0, 0, 1];
                var arr = Object.keys(horizontalList);
                for (var index = 0; index < arr.length; index++) {
                    var index_num = parseInt(arr[index]);
                    var temp_block = horizontalList[index_num];
                    if (temp_block.nowStep + 1 <= totalStep) {
                        temp_block.nowStep += 1;
                    }
                    else {
                        temp_block.nowStep = 0;
                        temp_block.repeatCount += 1;
                    }
                    var temp_C = temp_block.color;
                    var temp_colorData = [0, 0, 0, 1];
                    for (var index_23 = 0; index_23 < 3; index_23++) {
                        temp_colorData[index_23] = (temp_C[index_23] * (totalStep - temp_block.nowStep) + nextColor[index_23] * temp_block.nowStep) / totalStep;
                        temp_colorData[index_23] = temp_colorData[index_23] * _this.lightData.brightness / 100;
                    }
                    if (temp_block.repeatCount != 2) {
                        target[index_num].color = temp_colorData;
                    }
                }
                //totalRepeatCount+=1
                if (horizontalList[arr[0]].repeatCount == 2) {
                    step_End = false;
                    clearInterval(_this.repeater);
                }
                return;
            }
            if (resultL == undefined && resultR == undefined) {
                repeatCount = 0;
                step_End = true;
            }
            else {
                console.log('%c mode_FastRunWithoutTrace', 'color:rgb(255,77,255)', _this.lightData.brightness);
                if (resultL != undefined) {
                    var temp_color = JSON.parse(JSON.stringify(horizontalList[LIndex].color));
                    for (var index = 0; index < 3; index++) {
                        temp_color[index] = temp_color[index] * _this.lightData.brightness / 100;
                    }
                    target[LIndex].color = temp_color;
                }
                if (resultR != undefined) {
                    var temp_color = JSON.parse(JSON.stringify(horizontalList[RIndex].color));
                    for (var index = 0; index < 3; index++) {
                        temp_color[index] = temp_color[index] * _this.lightData.brightness / 100;
                    }
                    target[RIndex].color = temp_color;
                }
                ;
                repeatCount += 1;
            }
        }, 35 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_PassWithoutTrace = function (colors, index) {
        var _this = this;
        if (colors === void 0) { colors = [[0, 0, 255, 1]]; }
        if (index === void 0) { index = 20; }
        clearInterval(this.repeater);
        //this.setAllBlockColor([0,0,0,1]);
        var nowStep = 0;
        var totalStep = 30;
        var nextColor = [0, 0, 0, 1];
        var randomColor = colors[this.getRandom(0, colors.length - 1)];
        this.repeater = setInterval(function () {
            _this.setAllBlockColor([0, 0, 0, 1]);
            if (nowStep < totalStep) {
                nowStep += 1;
            }
            else {
                clearInterval(_this.repeater);
            }
            var temp_colorData = [0, 0, 0, 1];
            for (var index_24 = 0; index_24 < 3; index_24++) {
                temp_colorData[index_24] = (randomColor[index_24] * (totalStep - nowStep) + nextColor[index_24] * nowStep) / totalStep;
                temp_colorData[index_24] = temp_colorData[index_24] * _this.lightData.brightness / 100;
            }
            var target = _this.AllBlockColor;
            target[index].color = temp_colorData;
        }, 50 * this.animationSpeed);
    };
    M_Light_CS.prototype.mode_Shadow_disappear = function (colors, index) {
        var _this = this;
        if (colors === void 0) { colors = [[0, 0, 255, 1]]; }
        if (index === void 0) { index = 20; }
        clearInterval(this.repeater);
        var randomColor = colors[this.getRandom(0, colors.length - 1)];
        var originalColorValue = [0, 0, 0, 1];
        console.log('%c mode_Shadow_disappear randomColor', 'color:rgb(255,77,255)', originalColorValue);
        var nowStep = 0;
        var totalStep = 30;
        var nextColor = JSON.parse(JSON.stringify(this.AllBlockColor[index].color));
        this.repeater = setInterval(function () {
            //this.setAllBlockColor([0,0,0,1]);
            if (nowStep < totalStep) {
                nowStep += 1;
            }
            else {
                clearInterval(_this.repeater);
            }
            var temp_colorData = [0, 0, 0, 1];
            for (var index_25 = 0; index_25 < 3; index_25++) {
                temp_colorData[index_25] = (originalColorValue[index_25] * (totalStep - nowStep) + nextColor[index_25] * nowStep) / totalStep;
                temp_colorData[index_25] = temp_colorData[index_25] * _this.lightData.brightness / 100;
            }
            var target = _this.AllBlockColor;
            target[index].color = temp_colorData;
        }, 50 * this.animationSpeed);
    };
    M_Light_CS.prototype.rainbow7Color = function () {
        return [[255, 0, 0, 1], [255, 165, 0, 1], [255, 255, 0, 1], [0, 255, 0, 1], [0, 127, 255, 1], [0, 0, 255, 1], [139, 0, 255, 1]];
    };
    M_Light_CS.prototype.PointRotation = function (PointA, PointB) {
        // var Dx = Math.abs(PointB[0] - PointA[0]);
        // var Dy = Math.abs(PointB[1] - PointA[1]);
        var Dx = (PointB[0] - PointA[0]);
        var Dy = (PointB[1] - PointA[1]);
        var DRoation = Math.atan2(Dy, Dx);
        //console.log('PointRotation,Math.atan2', DRoation);
        var WRotation = DRoation / Math.PI * 180;
        //弧度=角度/180*π(PI)
        //(角度=弧度*180/π(PI))
        return WRotation;
    };
    M_Light_CS.prototype.slopeEquation = function (point1, point2) {
        if (point1 === void 0) { point1 = [25, 0]; }
        if (point2 === void 0) { point2 = [320, 400]; }
        //斜率y2-y1/x2-x1;
        var Slope = (point2[1] - point1[1]) / (point2[0] - point1[0]); //x*1 y*1*Slope
        var LinearList = [];
        var temp_x = [point1[0], point1[1]];
        while (temp_x[0] < point2[0] && temp_x[1] < point2[1]) {
            temp_x[0] += 1;
            temp_x[1] += 1 * Slope;
            //console.log('temp_x=',temp_x);
            LinearList.push([temp_x[0], temp_x[1]]);
        }
        return LinearList;
    };
    M_Light_CS.prototype.mode_Diffusion = function (colors) {
        var _this = this;
        if (colors === void 0) { colors = []; }
        colors = [[255, 0, 0, 1]];
        colors = this.rainbow7Color();
        var Brightness = 1;
        // var mode=0;
        // if(colors.length>1){
        //     mode=1;
        // }
        clearInterval(this.repeater);
        this.currentBlockIndex = 32;
        var repeatMin = 5;
        var repeatMax = 200;
        var repeatCount = 0;
        var StartPoint = this.getNowBlock().coordinateData;
        var horizontalList = {};
        var target = this.AllBlockColor;
        var randomValue = this.getRandom(0, colors.length - 1);
        //console.log('setColor', setColor)
        this.mode_reset();
        // horizontalList[this.currentBlockIndex]={
        //        color:this.toCssRGB(colors[this.getRandom(0,colors.length-1)])
        // }
        // console.log('horizontalList', horizontalList)
        var T2 = colors[this.getRandom(0, colors.length - 1)];
        console.log('horizontalList', Object.keys(horizontalList));
        this.repeater = setInterval(function () {
            T2 = colors[_this.getRandom(0, colors.length - 1)];
            for (var index = 0; index < target.length; index++) {
                var element = target[index];
                var dis = _this.distanceCalculation(StartPoint.center_Point[0], StartPoint.center_Point[1], element.coordinateData.center_Point[0], element.coordinateData.center_Point[1]);
                if (dis < repeatCount * StartPoint.clientWidth) {
                    element.color = T2;
                }
                else {
                    //element.color=this.toCssRGB([0,0,255,0.4]);
                }
            }
            if (repeatCount * StartPoint.clientWidth < _this.imageMaxWidth - StartPoint.clientWidth) {
                repeatCount += 1;
            }
            else {
                repeatCount = 0;
                _this.mode_reset();
            }
        }, 250 * this.animationSpeed);
        // this.repeaterTimeout=if(Brightness>0){
        //     Brightness-=0.01;
        // }
        //clearInterval(this.repeater);
    };
    M_Light_CS.prototype.getIndexRGBCss = function (i) {
        //console.log('getIndexRGBCss', i)
        var target = this.AllBlockColor;
        if (target[i].color != undefined) {
            return this.toCssRGB(target[i].color);
        }
    };
    M_Light_CS.prototype.getIndexRGBPerkeyCss = function (i) {
        //console.log('getIndexRGBCss', i)
        var target = this.BreathTempArray;
        if (target[i].color != undefined) {
            return this.toCssRGB(target[i].color);
        }
    };
    M_Light_CS.prototype.getRandom = function (min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    };
    ;
    M_Light_CS.prototype.getRgbRandom = function () {
        var RGBcolors = [[255, 0, 0, 0.9], [0, 255, 0, 0.9], [0, 0, 255, 0.9]];
        return RGBcolors[this.getRandom(0, 2)];
    };
    ;
    M_Light_CS.prototype.toCssRGB = function (RGBA) {
        if (RGBA === void 0) { RGBA = [0, 0, 0, 0]; }
        return 'rgb(' + RGBA[0] + ',' + RGBA[1] + ',' + RGBA[2] + ',' + RGBA[3] + ')';
    };
    M_Light_CS.prototype.setDefault = function () { };
    return M_Light_CS;
}());



/***/ }),

/***/ "./src/app/ScrollDemoFolder/ScrollDemo1.css":
/*!**************************************************!*\
  !*** ./src/app/ScrollDemoFolder/ScrollDemo1.css ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#NumKeyBindSourceArea::-webkit-scrollbar \r\n{    \r\n    display: none;\r\n    /* display: block; */\r\n    /* background: red; */\r\n    \r\n}\r\n#NumKeyBindSourceArea::-webkit-scrollbar-thumb {\r\n    /* border-radius: 10px; */\r\n    box-shadow: inset 0 0 6px rgba(0, 0, 0, .3);/* border: 1px solid yellow; */\r\n    background-repeat: no-repeat;\r\n    background-color: rgb(42, 42, 42);\r\n}\r\n:host{\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 100%;\r\n}\r\n.NumKeyBindSourceItem{\r\n  color: rgba(255, 255, 255,1);\r\n    position: -webkit-sticky;\r\n    position: sticky;\r\n    flex-shrink: 0;\r\n    width: 160px;\r\n    height: 360px;\r\n    box-sizing: border-box;\r\n    border: 2px solid rgb(242,16,16);\r\n\r\n}\r\na {\r\n    display: inline-block;\r\n    width: 50px;\r\n    text-decoration: none;\r\n  }\r\nnav, scroll-container {\r\n    display: block;\r\n    margin: 0 auto;\r\n    text-align: center;\r\n  }\r\nnav {\r\n    width: 339px;\r\n    padding: 5px;\r\n    border: 1px solid black;\r\n  }\r\nscroll-container {\r\n    display: block;\r\n    width: 350px;\r\n    height: 200px;\r\n    overflow-y: scroll;\r\n    scroll-behavior: smooth;\r\n  }\r\nscroll-page {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 100%;\r\n    font-size: 5em;\r\n  }"

/***/ }),

/***/ "./src/app/ScrollDemoFolder/ScrollDemo1.html":
/*!***************************************************!*\
  !*** ./src/app/ScrollDemoFolder/ScrollDemo1.html ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div id=\"NumKeyBindSourceArea\" style=\"\nposition: absolute;\nwidth: calc(160 * 4px);height: auto;\nborder: 2px solid rgb(96 0 210);\noverflow-y: hidden;overflow-x: scroll;display: flex;\n\" (scroll)=\"onScroll($event)\">\n\n  <div *ngFor=\"let item of NumKeyBindSourceArray; let i = index\" class=\"NumKeyBindSourceItem\"\n  [style.background-color]='item.BGcolorValue'>\n    <div style=\"position: absolute;left: 15%;user-select: none;\" data-keyTitle=\"Key\">Key</div>\n    <div style=\"position: absolute;display: flex;justify-content: center;width: 40px;\n      align-items: center;height: 40px;left: 10%;\n      top: 7%;border: 2px solid rgb(49,49,49);user-select: none;\" data-keyTitle=\"Key\">{{\"Tab\"+i}}</div>\n    <div style=\"position: absolute;display: flex;justify-content: center;\n    width: 40px;align-items: center;height: 40px;\n    left: 60%;top: 7%;border: 2px solid rgb(49,49,49);\" data-keyTitle=\"Key\">\n      <div style=\"position: absolute;background: red;width: 80%;height:80%;user-select: none\"\n        [style.background-color]='item.colorValue'></div>\n    </div>\n    <div style=\"position: absolute;right: 15%;user-select: none;\" data-keyTitle=\"Color\">Color</div>\n  </div>\n</div>\n<div id=\"CenterArea\" style=\"position: absolute;\n/* background: #9f56ff0f; */\nwidth: calc(160 * 5px);\nheight: 57vh;\nalign-items: center;\ndisplay: flex;\n\">\n  <div style=\"    position: absolute;\nwidth: 0;\nheight: 0;\nleft: 0;\nborder-style: solid;\nborder-width: 25px 50px 25px 0px;\nborder-color: transparent #007bff transparent transparent;\" (click)=\"ScrollIntoStart()\"></div>\n\n  <div style=\" position: absolute;\nwidth: 0;\nheight: 0;\nright:0;\nborder-style: solid;\nborder-width: 25px 0 25px 50px;\nborder-color: transparent transparent transparent #007bff;\" (click)=\"ScrollIntoEnd()\"></div>\n\n</div>\n\n\n\n<!-- \n<div style=\"position: absolute;\ntop: 5%;\nwidth: 5vh;\nheight: 5vh;\nborder-style: solid;\njustify-content: center;\nalign-items: center;\ndisplay: flex;\">{{ScrollLeftValue}}</div> -->\n\n\n\n\n\n\n<!-- <input style=\"align-self:flex-start;\" type=\"button\" id=\"AddSpace\" (click)=\"ScrollIntoStart()\" onkeydown=\"\"\nvalue=\"ScrollIntoStart\" class=\"ButtonStyle\">\n\n<input style=\"align-self:flex-start;\" type=\"button\" id=\"AddSpace\" (click)=\"ScrollIntoEnd()\" onkeydown=\"\"\nvalue=\"ScrollIntoEnd\" class=\"ButtonStyle\"> -->"

/***/ }),

/***/ "./src/app/ScrollDemoFolder/ScrollDemo1.ts":
/*!*************************************************!*\
  !*** ./src/app/ScrollDemoFolder/ScrollDemo1.ts ***!
  \*************************************************/
/*! exports provided: ScrollDemo1Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollDemo1Component", function() { return ScrollDemo1Component; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _Module_TSImportManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Module/TSImportManager */ "./src/Module/TSImportManager.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var ScrollDemo1Component = /** @class */ (function () {
    function ScrollDemo1Component() {
        this.NumKeyBindSourceArray = [];
        this.ScrollIntoPos = 0;
        this.ScrollLeftValue = 0;
        this.LedColor = new _Module_TSImportManager__WEBPACK_IMPORTED_MODULE_1__["ColorModule"]("LedColor");
    }
    ScrollDemo1Component.prototype.ngOnInit = function () {
        var SourceArray = 8;
        for (var index = 0; index < 8; index++) {
            //const element = [index];
            this.NumKeyBindSourceArray.push({
                colorValue: this.LedColor.toCssRGB([255 / (index + 1), 0, 0, 1]),
                BGcolorValue: this.LedColor.toCssRGB([255 * (SourceArray - index + 1) / SourceArray, 192 * (SourceArray - index + 1) / SourceArray, 203 * (SourceArray - index + 1) / SourceArray, 1])
            });
        }
        console.log('%c this.NumKeyBindSourceArray', 'color:rgb(255,75,255,1)', this.NumKeyBindSourceArray);
    };
    ScrollDemo1Component.prototype.ngAfterViewInit = function () {
    };
    ScrollDemo1Component.prototype.ScrollIntoStart = function () {
        var NumKeyBindSourceArea = document.getElementById('NumKeyBindSourceArea');
        var coordinate = 0;
        var part = NumKeyBindSourceArea.scrollWidth / this.NumKeyBindSourceArray.length;
        var maxScrollLeft = NumKeyBindSourceArea.scrollWidth - NumKeyBindSourceArea.clientWidth;
        if (NumKeyBindSourceArea.scrollLeft >= part) {
            coordinate = (NumKeyBindSourceArea.scrollLeft - part);
        }
        else {
            coordinate = maxScrollLeft;
            //return;
        }
        NumKeyBindSourceArea.scrollTo({
            left: coordinate,
        });
        //NumKeyBindSourceArea.scrollIntoView({ behavior: "smooth", block: "start", inline: "start" });
        console.log('%c ScrollIntoStart', 'color:rgb(255,75,255,1)', NumKeyBindSourceArea, NumKeyBindSourceArea.scrollWidth, NumKeyBindSourceArea.clientWidth);
    };
    ScrollDemo1Component.prototype.ScrollIntoEnd = function () {
        var NumKeyBindSourceArea = document.getElementById('NumKeyBindSourceArea');
        var coordinate = 0;
        var part = NumKeyBindSourceArea.scrollWidth / this.NumKeyBindSourceArray.length;
        var maxScrollLeft = NumKeyBindSourceArea.scrollWidth - NumKeyBindSourceArea.clientWidth;
        if (NumKeyBindSourceArea.scrollLeft < maxScrollLeft) {
            coordinate = NumKeyBindSourceArea.scrollLeft + part;
        }
        else {
            coordinate = 0;
            //return;
        }
        NumKeyBindSourceArea.scrollTo({
            left: coordinate,
        });
        console.log('%c ScrollIntoEnd', 'color:rgb(255,75,255,1)', NumKeyBindSourceArea, NumKeyBindSourceArea.scrollWidth);
        // NumKeyBindSourceArea.scrollIntoView({ behavior: "smooth", block: "end", inline: "end" });
    };
    ScrollDemo1Component.prototype.onScroll = function (event) {
        this.ScrollLeftValue = event.srcElement.scrollLeft;
        console.log('%c onScroll', 'color:rgb(255,75,255,1)', event, event.srcElement.scrollLeft);
    };
    ScrollDemo1Component = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-ScrollDemo1',
            template: __webpack_require__(/*! ./ScrollDemo1.html */ "./src/app/ScrollDemoFolder/ScrollDemo1.html"),
            styles: [__webpack_require__(/*! ./ScrollDemo1.css */ "./src/app/ScrollDemoFolder/ScrollDemo1.css")],
        }),
        __metadata("design:paramtypes", [])
    ], ScrollDemo1Component);
    return ScrollDemo1Component;
}());



/***/ }),

/***/ "./src/app/TableDemoFolder/TableDemo1.css":
/*!************************************************!*\
  !*** ./src/app/TableDemoFolder/TableDemo1.css ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/TableDemoFolder/TableDemo1.html":
/*!*************************************************!*\
  !*** ./src/app/TableDemoFolder/TableDemo1.html ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p>\n  TableDemoFolder works!\n</p>\n"

/***/ }),

/***/ "./src/app/TableDemoFolder/TableDemo1.ts":
/*!***********************************************!*\
  !*** ./src/app/TableDemoFolder/TableDemo1.ts ***!
  \***********************************************/
/*! exports provided: TableDemo1Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TableDemo1Component", function() { return TableDemo1Component; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var TableDemo1Component = /** @class */ (function () {
    function TableDemo1Component() {
    }
    TableDemo1Component.prototype.ngOnInit = function () {
    };
    TableDemo1Component = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-TableDemo1',
            template: __webpack_require__(/*! ./TableDemo1.html */ "./src/app/TableDemoFolder/TableDemo1.html"),
            styles: [__webpack_require__(/*! ./TableDemo1.css */ "./src/app/TableDemoFolder/TableDemo1.css")]
        }),
        __metadata("design:paramtypes", [])
    ], TableDemo1Component);
    return TableDemo1Component;
}());



/***/ }),

/***/ "./src/app/app.module.ts":
/*!*******************************!*\
  !*** ./src/app/app.module.ts ***!
  \*******************************/
/*! exports provided: AppModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppModule", function() { return AppModule; });
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm5/platform-browser.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _KeyBoard_RGBFolder_KeyBoard_RGB__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./KeyBoard_RGBFolder/KeyBoard_RGB */ "./src/app/KeyBoard_RGBFolder/KeyBoard_RGB.ts");
/* harmony import */ var _ColorPickerUI_ColorTest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ColorPickerUI/ColorTest */ "./src/app/ColorPickerUI/ColorTest.ts");
/* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm5/animations.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _angular_http__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/http */ "./node_modules/@angular/http/fesm5/http.js");
/* harmony import */ var _EntryPage__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./EntryPage */ "./src/app/EntryPage.ts");
/* harmony import */ var _ScrollDemoFolder_ScrollDemo1__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ScrollDemoFolder/ScrollDemo1 */ "./src/app/ScrollDemoFolder/ScrollDemo1.ts");
/* harmony import */ var _DemoListUI_DemoListUI_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./DemoListUI/DemoListUI.component */ "./src/app/DemoListUI/DemoListUI.component.ts");
/* harmony import */ var _TableDemoFolder_TableDemo1__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./TableDemoFolder/TableDemo1 */ "./src/app/TableDemoFolder/TableDemo1.ts");
/* harmony import */ var _numpad_keyboard_NumpadKeyboard__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./numpad-keyboard/NumpadKeyboard */ "./src/app/numpad-keyboard/NumpadKeyboard.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};













// let routerModule = RouterModule.forRoot(routes);
// routerModule = RouterModule.forRoot(routes, {useHash: true});
var routes = [
    //{ path: '', redirectTo: '/dashboard', pathMatch: 'full' },
    { path: 'KeyBoard_RGB', component: _KeyBoard_RGBFolder_KeyBoard_RGB__WEBPACK_IMPORTED_MODULE_2__["AppComponent"] },
    { path: 'ColorTest', component: _ColorPickerUI_ColorTest__WEBPACK_IMPORTED_MODULE_3__["ColorTestComponent"] },
    { path: 'ScrollDemo1', component: _ScrollDemoFolder_ScrollDemo1__WEBPACK_IMPORTED_MODULE_9__["ScrollDemo1Component"] },
    { path: 'DemoListUI', component: _DemoListUI_DemoListUI_component__WEBPACK_IMPORTED_MODULE_10__["DemoListUIComponent"] },
    { path: 'TableDemo1', component: _TableDemoFolder_TableDemo1__WEBPACK_IMPORTED_MODULE_11__["TableDemo1Component"] },
    { path: 'numpad-keyboard', component: _numpad_keyboard_NumpadKeyboard__WEBPACK_IMPORTED_MODULE_12__["NumpadKeyboardComponent"] },
];
var AppModule = /** @class */ (function () {
    function AppModule() {
    }
    AppModule = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
            declarations: [
                _KeyBoard_RGBFolder_KeyBoard_RGB__WEBPACK_IMPORTED_MODULE_2__["AppComponent"],
                _ColorPickerUI_ColorTest__WEBPACK_IMPORTED_MODULE_3__["ColorTestComponent"],
                _EntryPage__WEBPACK_IMPORTED_MODULE_8__["EntryPageComponent"],
                _ScrollDemoFolder_ScrollDemo1__WEBPACK_IMPORTED_MODULE_9__["ScrollDemo1Component"],
                _DemoListUI_DemoListUI_component__WEBPACK_IMPORTED_MODULE_10__["DemoListUIComponent"],
                _TableDemoFolder_TableDemo1__WEBPACK_IMPORTED_MODULE_11__["TableDemo1Component"],
                _numpad_keyboard_NumpadKeyboard__WEBPACK_IMPORTED_MODULE_12__["NumpadKeyboardComponent"],
            ],
            imports: [
                _angular_platform_browser__WEBPACK_IMPORTED_MODULE_0__["BrowserModule"],
                _angular_http__WEBPACK_IMPORTED_MODULE_7__["HttpModule"],
                _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_4__["BrowserAnimationsModule"],
                _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormsModule"],
                _angular_router__WEBPACK_IMPORTED_MODULE_6__["RouterModule"].forRoot(routes),
            ],
            providers: [],
            bootstrap: [_EntryPage__WEBPACK_IMPORTED_MODULE_8__["EntryPageComponent"]],
            schemas: [
                _angular_core__WEBPACK_IMPORTED_MODULE_1__["CUSTOM_ELEMENTS_SCHEMA"]
            ]
        })
    ], AppModule);
    return AppModule;
}());



/***/ }),

/***/ "./src/app/numpad-keyboard/AppDB.js":
/*!******************************************!*\
  !*** ./src/app/numpad-keyboard/AppDB.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Node_NeDB = __webpack_require__(/*! ./Node_NeDB */ "./src/app/numpad-keyboard/Node_NeDB.js"); 
var _this; 
class AppDB {
    constructor() {
        _this = this; 
        _this.Node_NeDB =Node_NeDB.DB.getInstance(); 
        _this.AllDBtempData={
            getSyncProgram:[],
            getDevice:[],
            getCustomData:[],
            getMacro:[],
            getAPModeEffect:[],
            getBuilt_ineffect:[],
            getPluginDevice:{"Keyboard":[],"Mouse":[],"Headset":[]},
        };
        _this.getSyncProgram().then((data) => {
            _this.AllDBtempData.getSyncProgram=data[0].AllData;
        });
        // _this.getAllDevice().then((data) => {
        //     _this.AllDBtempData.getDevice=data;
        // });
        _this.getCustomData().then((data) => {
            _this.AllDBtempData.getCustomData=data[0].AllData;
        });
        _this.getMacro().then((data) => {
            _this.AllDBtempData.getMacro=data[0].AllData;
        });
        _this.getAPModeEffect().then((data) => {
            _this.AllDBtempData.getAPModeEffect=data[0].AllData;
        });
        _this.getBuilt_ineffect().then((data) => {
            _this.AllDBtempData.getBuilt_ineffect=data[0].AllData;
        });
       

    }
      




    static getInstance() {
        if (this.instance) {
            return this.instance;
        } else {
            console.log("new AppDB Class");
            this.instance = new AppDB();
            return this.instance;
        }
    }
    //----------------------------AppSetting----------------------------//

    getAppSetting(){
        return new Promise(function (resolve, reject) {
            return _this.AppSettingDB.getAppSetting().then(function(data){
                resolve(data);
            });
        });
    }; 

    saveAppSetting(obj){
        return new Promise(function (resolve, reject) {
            return _this.AppSettingDB.saveAppSetting(obj).then(function(data){
                resolve(data);
            });
        });
    }; 
    
    updateAppSetting(id,obj){
        return new Promise(function (resolve, reject) {
            return _this.AppSettingDB.updateAppSetting(id,obj).then(function(data) {
                resolve(data);
            });
        });
    };


    //----------------------------Device----------------------------//

    // getDevice(callback){
    //     _this.DeviceDB.getDevice(function(data){
    //         callback(data)
    //     });
    // }; 

    getSupportDevice() {
        return new Promise(function (resolve, reject) {
            return _this.DeviceDB.getSupportDevice().then(function(data) {
                resolve(data);
            });
        });
    }

    getDefultProfile(vid, pid) {
        return new Promise(function (resolve, reject) {
            return _this.DeviceDB.getDefultProfile(vid, pid).then(function(data) {
                resolve(data);
            });
        });
    }

    getDevice(sn) {
        return new Promise(function (resolve, reject) {
            return _this.DeviceDB.getDevice(sn).then(function(data) {
                resolve(data);
            });
        });
    }

    AddDevice(obj, callback){
        return new Promise(function (resolve, reject) {
            return _this.DeviceDB.AddDevice(obj).then(function(data) {
                resolve(data);
            });
        });
    }; 

    getAllDevice(){
        return new Promise(function (resolve, reject) {
            return _this.DeviceDB.getAllDevice().then(function(data) {
                resolve(data);
            });
        });
    }; 

    updateDevice(_id, obj){
        return new Promise(function (resolve, reject) {
            return _this.DeviceDB.updateDevice(_id, obj).then(function(data) {
                resolve(data);
            });
        });
    }; 

    //----------------------------Macro----------------------------//

    getMacro(){
        return new Promise(function (resolve, reject) {
            return  _this.Node_NeDB.queryCmd('MacroDB',{},function(docs){  
                resolve(docs);      
            });  
        });
    }; 
    
    updateMacro(devData){
        var checkdata = _this.AllDBtempData.getMacro;
        if(checkdata.length>0){
            checkdata[0].Db_data = devData.Db_data;
        }
        else{
            checkdata.push(devData);
        }
        var compareData = {
            "_id": "S21tw2mhN6A65macro",
        }
        var setdata={"AllData" :checkdata} 
        return new Promise(function (resolve, reject) {
            return  _this.Node_NeDB.updateCmd('MacroDB',compareData,setdata,function(docs){  
                resolve(docs);     
            });  
        });

    };
    //----------------------------CustomData----------------------------//
    getCustomData(){
        return new Promise(function (resolve, reject) {
            return  _this.Node_NeDB.queryCmd('CustomDataDB',{},function(docs){  
                resolve(docs);     
            });  
        });
    }; 
    updateCustomData(devData,obj){
        var checkdata = _this.AllDBtempData.getCustomData;
        var target = checkdata.find((x) => x.SN == devData.SN);
        if (target != undefined) {
            target.Db_data = devData.Db_data;
        }
        else {
            checkdata.push(devData);
        }
        var compareData = {
            "_id": "S21tw2mhN6A65aVZnS",
        }
        var setdata={"AllData" :checkdata} 
        return new Promise(function (resolve, reject) {
            return  _this.Node_NeDB.updateCmd('CustomDataDB',compareData,setdata,function(docs){  
                resolve(docs);     
            });  
        });
    };
    //----------------------------SyncProgram----------------------------//
    getSyncProgram(){
        return new Promise(function (resolve, reject) {
            return  _this.Node_NeDB.queryCmd('SyncProgramDB',{},function(docs){  
                resolve(docs);     
            });  
        });
    }; 
    updateSyncProgram(devData){
        var checkdata = _this.AllDBtempData.getSyncProgram;
        if(checkdata.length>0){
            checkdata[0].Db_data = devData.Db_data;
        }
        else{
            checkdata.push(devData);
        }
        var compareData = {
            "_id": "S21tw2mhN6A65aVZnS",
        }
        var setdata={"AllData" :checkdata} 
        return new Promise(function (resolve, reject) {
            return  _this.Node_NeDB.updateCmd('SyncProgramDB',compareData,setdata,function(docs){  
                resolve(docs);     
            });  
        });
    };
    //----------------------------SyncEffect----------------------------//
    getSyncEffect(){
        return new Promise(function (resolve, reject) {
            return  _this.Node_NeDB.queryCmd('SyncEffectDB',{},function(docs){  
                resolve(docs);     
            });  
        });
    }; 
    insertSyncEffect(obj, callback){
        _this.Node_NeDB.insertCmd('SyncEffectDB',obj,function(mds){
            callback(mds);
        });
    }; 

    DeleteSyncEffect(index) {
        var obj = {id:index};
        return new Promise(function (resolve, reject) {
            return  _this.Node_NeDB.deleteCmd('SyncEffectDB',obj,function(docs){  
                resolve(docs);     
            });  
        });
    };

    updateSyncEffect(index,obj){
        var data = {id:index};
        return new Promise(function (resolve, reject) {
            return  _this.Node_NeDB.updateCmd('SyncEffectDB',data,obj,function(docs){  
                resolve(docs);     
            });  
        });
    };   
    //----------------------------APModeEffectDB----------------------------//
    getAPModeEffect() {
        return new Promise(function (resolve, reject) {
            return _this.Node_NeDB.queryCmd('APModeEffectDB', {}, function (docs) {
                resolve(docs);
            });
        });
    }; 
    updateAPModeEffect(devData) {
        var checkdata = _this.AllDBtempData.getAPModeEffect;
        var target = checkdata.find((x) => x.SN == devData.SN);
        if (target != undefined) {
            target.Db_data = devData.Db_data;
        }
        else {
            checkdata.push(devData);
        }
        var compareData = {
            "_id": "S21tw2mhN6A65aVZnS",
        }
        var setdata={"AllData" :checkdata} 
        return new Promise(function (resolve, reject) {
            return  _this.Node_NeDB.updateCmd('APModeEffectDB',compareData,setdata,function(docs){  
                resolve(docs);     
            });  
        });

    };  
     //----------------------------Built_ineffectDB----------------------------//
    getBuilt_ineffect(){
        return new Promise(function (resolve, reject) {
            return  _this.Node_NeDB.queryCmd('Built_ineffectDB',{},function(docs){  
                resolve(docs);      
            });  
        });
    }; 

    updateBuilt_ineffectDB(devData){
        var checkdata = _this.AllDBtempData.getBuilt_ineffect;
        var target = checkdata.find((x) => x.SN == devData.SN);
        if (target != undefined) {
            target.Db_data = devData.Db_data;
        }
        else {
            checkdata.push(devData);
        }
        var compareData = {
            "_id": "S21tw2mhN6A65aVZnS",
        }
        var setdata={"AllData" :checkdata} 
        return new Promise(function (resolve, reject) {
            return  _this.Node_NeDB.updateCmd('Built_ineffectDB',compareData,setdata,function(docs){  
                resolve(docs);     
            });  
        });
    };  
    
}

module.exports = AppDB;

/***/ }),

/***/ "./src/app/numpad-keyboard/AppSettingService.ts":
/*!******************************************************!*\
  !*** ./src/app/numpad-keyboard/AppSettingService.ts ***!
  \******************************************************/
/*! exports provided: AppSettingService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppSettingService", function() { return AppSettingService; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var AppSettingService = /** @class */ (function () {
    function AppSettingService() {
        this.AppSetingObj = {
            language: "en",
            version: "1.0.0"
        };
        AppSettingService_1.instance = this;
    }
    AppSettingService_1 = AppSettingService;
    AppSettingService.getInstance = function () {
        if (this.instance) {
            return this.instance;
        }
        else {
            console.log('%c GetAppService_err', 'background: red; color: white');
        }
    };
    AppSettingService.instance = undefined;
    AppSettingService = AppSettingService_1 = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [])
    ], AppSettingService);
    return AppSettingService;
    var AppSettingService_1;
}());



/***/ }),

/***/ "./src/app/numpad-keyboard/CommonService.ts":
/*!**************************************************!*\
  !*** ./src/app/numpad-keyboard/CommonService.ts ***!
  \**************************************************/
/*! exports provided: CommonService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CommonService", function() { return CommonService; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/http */ "./node_modules/@angular/http/fesm5/http.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var CommonService = /** @class */ (function () {
    function CommonService(http, cdr) {
        this.http = http;
        this.cdr = cdr;
        this.titlepageFlag = 0;
        this.currentpage = 0;
        CommonService_1.instance = this;
    }
    CommonService_1 = CommonService;
    CommonService.getInstance = function () {
        if (this.instance) {
            return this.instance;
        }
        else {
            console.log('%c CommonService_getInstance_err', 'background: blue; color: red');
        }
    };
    CommonService.prototype.rgbToHex = function (r, g, b) {
        r = Number(r);
        g = Number(g);
        b = Number(b);
        return "#" + this.componentToHex(r) + this.componentToHex(g) + this.componentToHex(b);
    };
    CommonService.prototype.componentToHex = function (c) {
        var hex = c.toString(16);
        return hex.length == 1 ? "0" + hex : hex;
    };
    CommonService.prototype.hexToRgb = function (hex) {
        // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
        var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
        hex = hex.replace(shorthandRegex, function (m, r, g, b) {
            return r + r + g + g + b + b;
        });
        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16)
        } : null;
    };
    /**
     * 排列Array順序
     * @param array
     * @param key
     */
    CommonService.prototype.ArraySort = function (array, key) {
        return array.sort(function (a, b) {
            var x = a[key];
            var y = b[key];
            return x - y;
        });
    };
    /**
     * Record which page you are currently on
     * @param flag
     */
    CommonService.prototype.setCurrentPage = function (flag) {
        this.currentpage = flag;
    };
    /**
     * Return which page you are currently on
     */
    CommonService.prototype.getCurrentPage = function () {
        return this.currentpage;
    };
    CommonService.instance = undefined;
    CommonService = CommonService_1 = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [_angular_http__WEBPACK_IMPORTED_MODULE_1__["Http"],
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ApplicationRef"]])
    ], CommonService);
    return CommonService;
    var CommonService_1;
}());



/***/ }),

/***/ "./src/app/numpad-keyboard/DeviceService.ts":
/*!**************************************************!*\
  !*** ./src/app/numpad-keyboard/DeviceService.ts ***!
  \**************************************************/
/*! exports provided: DeviceService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeviceService", function() { return DeviceService; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/http */ "./node_modules/@angular/http/fesm5/http.js");
/* harmony import */ var _FirewareManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FirewareManager */ "./src/app/numpad-keyboard/FirewareManager.ts");
/* harmony import */ var _AppSettingService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AppSettingService */ "./src/app/numpad-keyboard/AppSettingService.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

//let electron_Instance = require('./AppDB'); 
//let i18n_File = require("./AppDB");
// import { HttpService } from '../../services/device/index';


//let Setting = require("./Setting");

var DeviceService = /** @class */ (function () {
    //private http:Http
    function DeviceService(http) {
        this.http = http;
        this.pluginNoDeviceData = [];
        this.NoDeviceindex = 0;
        this.pluginDeviceData = [];
        this.AppSettingService = _AppSettingService__WEBPACK_IMPORTED_MODULE_3__["AppSettingService"].getInstance();
        // private http:Http;
        this.nowDeviceName = "";
        this.currentDevice = {
            "DeviceId": 0,
            "ModelType": 2,
            "SN": '0x1EA70x9018',
            "StateID": -1,
            "deviceData": {},
            "devicename": "MODEL O WIRELESS",
            "pid": ["0x2011", "0x2022"],
            "profile": [{}, {}, {}],
            "version_Wired": "",
            "version": "",
            "version_Wireless": "",
            "vid": ["0x258A", "0x258A"],
        };
        this.FWManager = new _FirewareManager__WEBPACK_IMPORTED_MODULE_2__["FirewareManager"]();
        this.msTimeout = 3000;
        DeviceService_1.instance = this;
        console.log('%c DeviceService_http', 'background: red; color: white', this.http);
        // this.getAssignURL_json('https://gloriouscore.nyc3.digitaloceanspaces.com/Glorious_Core/Version.json').subscribe((data) => {
        //     console.log('CheckForceUpgrade', data);
        // },(error) => {
        // console.error('getAssignURL_json_subscribe資料錯誤');
        // })
    }
    DeviceService_1 = DeviceService;
    DeviceService.getInstance = function () {
        if (this.instance) {
            return this.instance;
        }
        else {
            console.log('%c DeviceService_Instance_err', 'background: red; color: white');
        }
    };
    DeviceService.prototype.getDevicePageindex = function () {
        //console.log('%c getDevicePageindex','background: red; color: white', this.pluginNoDeviceData[this.NoDeviceindex]);
        if (this.pluginNoDeviceData.length < 1) {
            return [];
        }
        else {
            return this.pluginNoDeviceData[this.NoDeviceindex];
        }
    };
    DeviceService.prototype.getCurrentDevice = function () {
        var target = this.pluginDeviceData;
        //console.log('DeviceService.getCurrentDevice',target);
        try {
            for (var index = 0; index < target.length; index++) {
                //const element = target[index];&& 
                if (target[index].devicename == this.nowDeviceName) {
                    return target[index];
                }
            }
            return this.currentDevice;
        }
        catch (error) {
            console.log('%c getCurrentDevice.Error', 'color:rgb(255,75,255,1)', error);
        }
    };
    DeviceService.prototype.checkDeviceExists = function (CheckName) {
        var target = this.pluginDeviceData;
        console.log(' DeviceService.checkDeviceExists', target);
        for (var index = 0; index < target.length; index++) {
            if (target[index].devicename == CheckName) {
                this.nowDeviceName = CheckName;
                return true;
            }
        }
    };
    DeviceService.prototype.getDevice = function () {
        // return new Promise((resolve,reject) => {
        //     let oldPluginDeviceData = JSON.parse(JSON.stringify((this.pluginDeviceData)));
        //     let AllDeviceData = [];
        //     var data=this.dbService.AllDBtempData.getPluginDevice;
        //         //var data=JSON.parse(JSON.stringify(temp_data));
        //         console.log('dbservice_getPluginDevice()',data);
        //         for(let i of data.Mouse){
        //             AllDeviceData.push(i);
        //         }
        //         for(let i of data.Keyboard){
        //             AllDeviceData.push(i);
        //         }
        //         for(let i of data.Headset){
        //             AllDeviceData.push(i);  
        //         }
        //         let count = 1;
        //         var tempindex=0;
        //         // this.dbService.getAllDevice().then((getAllDeviceData) => {
        //         //     var newPluginData = JSON.parse(JSON.stringify(AllDeviceData));
        //         //     var getAllDeviceData=JSON.parse(JSON.stringify(getAllDeviceData));
        //         //     console.log(' this.dbservice.getAllDevice().then',getAllDeviceData)
        //         //     this.pluginNoDeviceData =[[true,true,true],[true,true,true]];
        //         //     for(let i = 0; i < newPluginData.length; i++) {
        //         //         let index = getAllDeviceData.findIndex(x => x.SN == newPluginData[i].SN)
        //         //         let oldDataCheck = oldPluginDeviceData.findIndex(x => x.SN == newPluginData[i].SN)
        //         //         if(index != -1 && oldDataCheck == -1)//舊裝置存在 舊Plugin不存在
        //         //             newPluginData[i].deviceData = getAllDeviceData[index];
        //         //         else if(oldDataCheck != -1){// 舊Plugin存在
        //         //             oldPluginDeviceData[oldDataCheck].version=newPluginData[i].version;
        //         //             newPluginData[i] = oldPluginDeviceData[oldDataCheck];
        //         //         }
        //         //         if(count % 3 == 0) {
        //         //             count=1;
        //         //             tempindex+=1;
        //         //         }
        //         //         this.pluginNoDeviceData[tempindex][count]=false;
        //         //         count++;
        //         //     }
        //         //     this.pluginDeviceData = newPluginData;
        //         //     console.log('%c newPluginData','background: red; color: white', newPluginData);
        //         //     console.log('%c pluginDeviceData','background: red; color: white', this.pluginDeviceData);
        //         //     // console.log('%c pluginNoDeviceData','background: red; color: white', this.pluginNoDeviceData);
        //         //     resolve();
        //         // })
        // });
    };
    /**
     * Click check for update buttom
     */
    DeviceService.prototype.CheckforUpdates = function () {
        if (this.FWManager.update_UI_Status == true) {
            return;
        }
        this.FWManager.FwServerData = [];
        this.FWManager.chooseDeviceIndex = 0;
        // this.getAssignURL_json(Setting.getUpdateUrl()).subscribe((data) => {
        //     console.log('getAssignURL_json_subscribe', data,this.pluginDeviceData);
        //     //this.FWManager.FwServerData[0].newVersion=data.AppSetting.version;
        //     for (let index = 0; index < this.pluginDeviceData.length; index++) {
        //         const deviceTarget = this.pluginDeviceData[index];
        //         data.Mouse.forEach(element => {
        //             if (element.SN == deviceTarget.SN) {
        //                 if(this.FWManager.versionCompare(element.version_Wired,deviceTarget.version_Wired,2)==1){
        //                     element.name=deviceTarget.devicename;
        //                     element.battery=deviceTarget.deviceData.battery;
        //                     this.FWManager.FwServerData.push(element);
        //                     return;
        //                 }
        //                 if(this.FWManager.versionCompare(element.version_Wireless,deviceTarget.version_Wireless,2)==1){
        //                     element.name=deviceTarget.devicename;
        //                     element.battery=deviceTarget.deviceData.battery;
        //                     this.FWManager.FwServerData.push(element);
        //                     return;
        //                 }                   
        //             }       
        //         });
        //         data.Keyboard.forEach(element => {
        //             if (element.SN == deviceTarget.SN) {
        //                 if(this.FWManager.versionCompare(element.version_Wired,deviceTarget.version_Wired,2)==1){
        //                     element.name=deviceTarget.devicename;
        //                     this.FWManager.FwServerData.push(element);
        //                     return;
        //                 }
        //             }                         
        //         });
        //     }
        //     if(this.FWManager.versionCompare(data.AppSetting.version,this.AppSettingService.getAppSetting().version,2)==1){
        //         this.FWManager.FwServerData.push(data.AppSetting);
        //      }       
        //     if(this.FWManager.FwServerData.length>0){
        //         console.log('getAssignURL_json_FwServerData',this.FWManager.FwServerData);
        //         //this.getAppService.hasUpdateTip=true;
        //         this.FWManager.setUpdateUIStatus("CHECK_DOWNLOAD");
        //     }
        //     else{
        //         this.FWManager.setUpdateUIStatus("");
        //     }
        // },(error) => {
        // console.error('getAssignURL_json_subscribe資料錯誤');
        // })
    };
    /**
     * Click Retry Firmware Update
     */
    DeviceService.prototype.CheckForceUpgrade = function () {
        this.FWManager.forceUpgradeData = [];
        this.FWManager.forceUpgradeIndex = 0;
        // this.getAssignURL_json(Setting.getUpdateUrl()).subscribe((data) => {
        //     console.log('CheckForceUpgrade', data,this.pluginDeviceData);
        //     //this.FWManager.FwServerData[0].newVersion=data.AppSetting.version;
        //     for (let index = 0; index < this.pluginDeviceData.length; index++) {
        //         const deviceTarget = this.pluginDeviceData[index];
        //         data.Mouse.forEach(element => {             
        //             if (element.SN == deviceTarget.SN) {
        //                 element.name=deviceTarget.devicename;
        //                 element.battery=deviceTarget.deviceData.battery;
        //                 this.FWManager.forceUpgradeData.push(element);                 
        //             }       
        //         });
        //         data.Keyboard.forEach(element => {
        //             if (element.SN == deviceTarget.SN) {
        //                 element.name=deviceTarget.devicename;
        //                 element.battery=deviceTarget.deviceData.battery;
        //                 this.FWManager.forceUpgradeData.push(element);  
        //             }                         
        //         });
        //     }
        //     if(this.FWManager.forceUpgradeData.length>0){
        //         console.log('forceUpgradeData',this.FWManager.forceUpgradeData);
        //         this.FWManager.setUpdateUIStatus("Check_ForceUpgrade");
        //     }
        //     else{
        //         this.FWManager.setUpdateUIStatus("");
        //     }
        // },(error) => {
        // console.error('getAssignURL_json_subscribe資料錯誤');
        // })
    };
    DeviceService.instance = undefined;
    DeviceService = DeviceService_1 = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [_angular_http__WEBPACK_IMPORTED_MODULE_1__["Http"]])
    ], DeviceService);
    return DeviceService;
    var DeviceService_1;
}());



/***/ }),

/***/ "./src/app/numpad-keyboard/FirewareManager.ts":
/*!****************************************************!*\
  !*** ./src/app/numpad-keyboard/FirewareManager.ts ***!
  \****************************************************/
/*! exports provided: FirewareManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FirewareManager", function() { return FirewareManager; });
var FirewareManager = /** @class */ (function () {
    function FirewareManager() {
        this.chooseDeviceIndex = 0;
        this.FwServerData = [];
        this.forceUpgradeData = [];
        this.forceUpgradeIndex = 0;
        this.UIStatus = "";
        this.update_UI_Status = false;
        /**
     * Type option
     * 1.CHECK_DOWNLOAD
     * 2.Downloading
     * 3.ConfirmInstall
     * 4.Installing
     * 5.FailMessage
     * 6.SuccessMessage
     */
        this.contentUIStatus = "";
    }
    /*
    * getNowTargetData
    */
    FirewareManager.prototype.getTarget = function () {
        if (this.FwServerData.length > 0)
            return this.FwServerData[this.chooseDeviceIndex];
    };
    /*
    * getforceTarget
    */
    FirewareManager.prototype.getforceTarget = function () {
        return this.forceUpgradeData[this.forceUpgradeIndex];
    };
    /*
    * reset Var
    */
    FirewareManager.prototype.reset = function () {
        this.chooseDeviceIndex = 0;
        this.FwServerData = [];
    };
    /*
    * checkHasUpdate
    */
    FirewareManager.prototype.checkHasUpdate = function () {
        for (var index = 0; index < this.FwServerData.length; index++) {
            if (!this.FwServerData[index].tryToUpdate) {
                return "YES";
            }
        }
        return "NO";
    };
    /**
    *compare version
    * @param version number:A version
    * @param targetVersion number:B version
    * @param exponent number:exponent
    * return result:
    * 0: is equal to
    * 1: is more than
    * -1: is less than
    */
    FirewareManager.prototype.versionCompare = function (version, targetVersion, exponent) {
        var getVersionNumber, length;
        exponent = exponent || 2;
        if (!version || !targetVersion) {
            console.log('Need two versions to compare!', version, targetVersion);
            throw new Error('Need two versions to compare!');
        }
        if (version === targetVersion) {
            return 0;
        }
        length = Math.max(version.split('.').length, targetVersion.split('.').length);
        var self = this;
        getVersionNumber = (function (length, exponent) {
            return function (version) {
                return self.versionToNumber(version, length, exponent);
            };
        })(length, exponent);
        version = getVersionNumber(version);
        targetVersion = getVersionNumber(targetVersion);
        return version > targetVersion ? 1 : (version < targetVersion ? -1 : 0);
    };
    /*
    * format version
    */
    FirewareManager.prototype.versionToNumber = function (version, length, exponent) {
        var arr;
        if (arguments.length < 3) {
            return 0;
        }
        arr = version.split('.');
        version = 0;
        arr.forEach(function (value, index, array) {
            version += value * Math.pow(10, length * exponent - 1);
            length--;
        });
        return version;
    };
    FirewareManager.prototype.setUpdateUIStatus = function (TypeOption) {
        if (TypeOption == "") {
            this.setupdate_UI_Status(false);
        }
        else {
            this.setupdate_UI_Status(true);
        }
        if (this.checkHasUpdate() == "NO") {
            //this.getAppService.hasUpdateTip=false;
        }
        this.contentUIStatus = TypeOption;
        console.log('this.setContentUI', this.contentUIStatus);
    };
    FirewareManager.prototype.setupdate_UI_Status = function (value) {
        this.update_UI_Status = value;
        console.log('this.update_UI_Status', this.update_UI_Status);
    };
    return FirewareManager;
}());



/***/ }),

/***/ "./src/app/numpad-keyboard/KeyBoardManager.ts":
/*!****************************************************!*\
  !*** ./src/app/numpad-keyboard/KeyBoardManager.ts ***!
  \****************************************************/
/*! exports provided: KeyBoardManager, KeyBoard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyBoardManager", function() { return KeyBoardManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyBoard", function() { return KeyBoard; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**-----------------------------------------------------------------------------------------
 * Author:G-SPY Louis
 * KeyBoardManager:KeyBoardManager Class
 * Processing KeyBoardManager
-----------------------------------------------------------------------------------------*/

var AllFunctionMapping = __webpack_require__(/*! ./SupportData */ "./src/app/numpad-keyboard/SupportData.js");
var KeyBoardManager = /** @class */ (function () {
    function KeyBoardManager(inputmax) {
        this.defaultName = '未配置';
        this.profileindex = 0;
        this.sideLightSwitch = false;
        this.notClickedYet = true;
        this.profileLayers = [];
        this.profileLayerIndex = [0, 0, 0];
        this.layerMaxNumber = 3;
        this.maxKayCapNumber = inputmax;
        this.KeyBoardArray = [
            new KeyBoard('PROFILE1', inputmax, 0),
            new KeyBoard('PROFILE2', inputmax, 1),
            new KeyBoard('PROFILE3', inputmax, 2),
        ];
        for (var index = 1; index <= this.KeyBoardArray.length; index++) {
            var tempArr = [];
            for (var index2 = 1; index2 <= this.layerMaxNumber; index2++) {
                tempArr.push(new KeyBoard('PROFILE' + index2 * index, inputmax, index2 * index));
            }
            this.profileLayers.push(tempArr);
        }
    }
    /**
     * setALLDefaultKeyArray
     * @param data array:KeyArray
    */
    KeyBoardManager.prototype.setALLDefaultKeyArray = function (data) {
        console.log('setALLDefaultKeyArray', this.profileLayers);
        var KBMarr = this.KeyBoardArray;
        for (var index = 0; index < KBMarr.length; index++) {
            KBMarr[index].setTargetDefaultKeyArray(data);
            for (var index2 = 0; index2 < this.layerMaxNumber; index2++) {
                this.profileLayers[index][index2].setTargetDefaultKeyArray(data);
            }
        }
    };
    /**
     * getNowProfileLayersData
    */
    KeyBoardManager.prototype.getNowProfileLayersData = function () {
        var obj = this.profileLayers[this.profileindex];
        return obj;
    };
    /**
     * getProfileLayerIndex
    */
    KeyBoardManager.prototype.getProfileLayerIndex = function () {
        return this.profileLayerIndex[this.profileindex];
    };
    /**
     * changeProfileLayer
    */
    KeyBoardManager.prototype.changeProfileLayer = function () {
        var T = this.getProfileLayerIndex();
        if (T < this.layerMaxNumber - 1) {
            T = T + 1;
        }
        else {
            T = 0;
        }
        this.profileLayerIndex[this.profileindex] = T;
        console.log('changeProfileLayer', this.getProfileLayerIndex());
        console.log('changeProfileLayer_profile', this.getTarget());
    };
    ;
    /**
     * clearRecordMacroData
     * @param m_id string:MacroDataId
    */
    KeyBoardManager.prototype.clearRecordMacroData = function (m_id) {
        if (m_id === void 0) { m_id = ''; }
        //console.log('clearRecordMacroData', targetName)
        var KBMarr = this.KeyBoardArray;
        var KBMarr = this.KeyBoardArray;
        for (var index = 0; index < KBMarr.length; index++) {
            KBMarr[index].delete_Find_MacroData(m_id);
            for (var index2 = 0; index2 < this.layerMaxNumber; index2++) {
                this.profileLayers[index][index2].delete_Find_MacroData(m_id);
            }
        }
    };
    /**
     * setAllProfileFieldData
     * @param field string:Variable Field
     * @param obj obj:Variable Field Data
    */
    KeyBoardManager.prototype.setAllProfileFieldData = function (field, obj) {
        var KBMarr = this.KeyBoardArray;
        for (var index = 0; index < KBMarr.length; index++) {
            KBMarr[index][field] = obj;
            //console.log('KBMarr[index][field]', KBMarr[index][field])
            for (var index2 = 0; index2 < this.layerMaxNumber; index2++) {
                this.profileLayers[index][index2][field] = obj;
            }
        }
    };
    /**
     * getTarget
    */
    KeyBoardManager.prototype.getTarget = function () {
        if (this.layerMaxNumber > 0) {
            return this.profileLayers[this.profileindex][this.getProfileLayerIndex()];
        }
        else {
            return this.KeyBoardArray[this.profileindex];
        }
    };
    /**
     * getAssignTarget
     * @param index number:KeyBoardArray index
    */
    KeyBoardManager.prototype.getAssignTarget = function (index) {
        return this.KeyBoardArray[index];
    };
    KeyBoardManager = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [Object])
    ], KeyBoardManager);
    return KeyBoardManager;
}());

var KeyBoard = /** @class */ (function () {
    function KeyBoard(name, inputMax, profileid) {
        if (name === void 0) { name = ''; }
        this.profileName = 'default';
        this.profileid = 0;
        this.hibernate = true;
        this.winLock = false;
        this.hibernateTimeArr = [1, 3, 5, 10];
        this.hibernateTime = 3;
        this.defaultName = "Default";
        this.pollingrate = 1000;
        this.inputLatency = 2;
        this.light_PRESETS_Data = {};
        this.light_PERKEY_Data = {
            value: 1
        };
        this.recordAssignBtnIndex = 0;
        this.assignText = '設定按鍵:Y';
        this.assignedKeyboardKeys = [[]]; //61KEY
        this.assignedFnKeyboardKeys = []; //61KEY
        this.fnModeMartrix = [false, false, false];
        this.fnModeindex = 0;
        this.fiveDefaultLedCode = [];
        this.fiveRecordIndex = 0;
        this.keyHoverIndex = 0;
        this.profileLayerIndex = 0;
        this.maxKayCapNumber = inputMax;
        this.profileName = name;
        this.profileid = profileid;
        for (var index = 0; index < 1; index++) {
            for (var i2 = 0; i2 < this.maxKayCapNumber; i2++) {
                this.assignedKeyboardKeys[index].push(this.defaultModule());
            }
        }
    }
    /**
     * setTargetDefaultKeyArray
     * @param data array:KeyBoardDefaultArray
    */
    KeyBoard.prototype.setTargetDefaultKeyArray = function (data) {
        var _loop_1 = function (index) {
            targetValue = AllFunctionMapping.find(function (x) { return x.code == data[index]; });
            // console.log('setTargetDefaultKeyArray_index', index, targetValue);
            if (targetValue != undefined) {
                this_1.getNowModeKeyMatrix()[index].defaultValue = targetValue.value;
            }
        };
        var this_1 = this, targetValue;
        //console.log('setTargetDefaultKeyArray',AllFunctionMapping);
        for (var index = 0; index < data.length; index++) {
            _loop_1(index);
        }
    };
    /**
     * getHibernateStepTime
    */
    KeyBoard.prototype.getHibernateStepTime = function () {
        //console.log("getHibernateStepTime",this.hibernateTimeArr,this.hibernateTime);
        return this.hibernateTimeArr[this.hibernateTime];
    };
    /**
     * ImportClassData
    */
    KeyBoard.prototype.ImportClassData = function (InputData) {
        console.log('ImportClassData', InputData);
        var tempData = JSON.parse(JSON.stringify(InputData));
        var excludeVar = ['KB61Prohibit', 'profileLayerIndex', 'profileName'];
        var arr = Object.keys(this);
        var _loop_2 = function (index) {
            if (excludeVar.find(function (x) { return x == arr[index]; })) {
            }
            else {
                this_2[arr[index]] = tempData[arr[index]];
            }
        };
        var this_2 = this;
        for (var index = 0; index < arr.length; index++) {
            _loop_2(index);
        }
    };
    /**
     * HasSet
     * @param checkIndex number:check Assign Index
    */
    KeyBoard.prototype.HasSet = function (checkIndex) {
        if (checkIndex === void 0) { checkIndex = 0; }
        var target = this.getNowModeKeyMatrix();
        var N = target[checkIndex].value;
        var N2 = target[checkIndex].profileName;
        var N3 = target[checkIndex].LongTimePressValue;
        var N4 = target[checkIndex].InstantPressValue;
        return N != '' || N2 != '' || N3 != '' || N4 != '' ? true : false;
    };
    /**
     * checkKeyAssignHasData
     * @param from string:Print Source
    */
    KeyBoard.prototype.checkKeyAssignHasData = function (from) {
        if (from === void 0) { from = ''; }
        var KeyAssignUIStyleList = document.querySelectorAll('.KeyAssignUIStyle');
        //var KeyAssignUIStyleList= this.elementRef.nativeElement.querySelectorAll(".KeyAssignUIStyle");
        for (var index = 0; index < KeyAssignUIStyleList.length; index++) {
            var Result = this.HasSet(index);
            var element = KeyAssignUIStyleList[index];
            Result ? (element.style.border = '2px solid #ffc757') : (element.style.border = '');
        }
    };
    /**
     * setTargetDefaultKeyArray
    */
    KeyBoard.prototype.getKeyTargetOptionFrequency = function () {
        var N = this.getNowModeTargetMatrixKey().macroOptionNumber;
        console.log('getKeyTargetOptionFrequency', N);
        switch (true) {
            case N < 65535:
                return N;
            case N == 65535:
                return 1;
            case N == 65536:
                return 1;
        }
    };
    /**
     * checkNowModeTargetMatrixAssignKey
     * @param index number:KeyMatrix index
     * @param compareKeyCode number:compareKeyCode
    */
    KeyBoard.prototype.checkNowModeTargetMatrixAssignKey = function (index, compareKeyCode) {
        //console.log('getNowModeTargetMatrixKey', this.getNowModeKeyMatrix()[this.recordAssignBtnIndex])
        if (this.getNowModeKeyMatrix()[index].defaultValue == compareKeyCode) {
            return false;
        }
        return true;
    };
    /**
     * getNowModeKeyMatrix
    */
    KeyBoard.prototype.getNowModeKeyMatrix = function () {
        if (!this.assignedKeyboardKeys[this.fnModeindex]) {
            console.log(this);
        }
        else {
            return this.assignedKeyboardKeys[this.fnModeindex];
        }
    };
    /**
* getNowModeTargetMatrixKey
*/
    KeyBoard.prototype.getNowModeTargetMatrixKey = function () {
        //console.log('getNowModeTargetMatrixKey', this.getNowModeKeyMatrix()[this.recordAssignBtnIndex])
        return this.getNowModeKeyMatrix()[this.recordAssignBtnIndex];
    };
    /**
 * getMacroList
*/
    KeyBoard.prototype.getMacroList = function () {
        var data = this.getNowModeKeyMatrix();
        var macrolist = [];
        for (var index = 0; index < data.length; index++) {
            var target = data[index];
            switch (target.recordBindCodeType) {
                case 'MacroFunction':
                    //console.log('case MacroFunction:',target);
                    macrolist.push(target.macro_Data);
                    break;
            }
        }
        console.log("%c getMacroList", "color:red", macrolist);
        return macrolist;
    };
    /**
     * setAssignTargetData
     * @param data obj:data
    */
    KeyBoard.prototype.setAssignTargetData = function (data) {
        var target = this.getNowModeTargetMatrixKey();
        console.log('setAssignTargetData:', data, 'ManagerTarget:', target);
        var arrKeys = Object.keys(data);
        for (var index = 0; index < arrKeys.length; index++) {
            if (target[arrKeys[index]] != undefined) {
                target[arrKeys[index]] = data[arrKeys[index]];
            }
        }
        target.changed = true;
    };
    /**
 * reset_AllKey
*/
    KeyBoard.prototype.reset_AllKey = function () {
        var KeyArray = this.getNowModeKeyMatrix();
        for (var index = 0; index < KeyArray.length; index++) {
            for (var _i = 0, _a = Object.entries(KeyArray[index]); _i < _a.length; _i++) {
                var _b = _a[_i], key = _b[0], value = _b[1];
                if (key != "defaultValue") {
                    KeyArray[index][key] = this.defaultModule()[key];
                }
            }
        }
    };
    /**
     * delete_Find_MacroData
     * @param m_id string:macro id
    */
    KeyBoard.prototype.delete_Find_MacroData = function (m_id) {
        if (m_id === void 0) { m_id = ''; }
        var KeyArray = this.getNowModeKeyMatrix();
        for (var index = 0; index < KeyArray.length; index++) {
            if (KeyArray[index].recordBindCodeType == "MacroFunction") {
                if (KeyArray[index].macro_Data.m_Identifier == m_id) {
                    for (var _i = 0, _a = Object.entries(KeyArray[index]); _i < _a.length; _i++) {
                        var _b = _a[_i], key = _b[0], value = _b[1];
                        if (key != "defaultValue") {
                            KeyArray[index][key] = this.defaultModule()[key];
                        }
                    }
                }
            }
        }
    };
    /**
     * defaultModule
    */
    KeyBoard.prototype.defaultModule = function () {
        var T = {
            keyAssignType: ['', '', ''],
            LongTimePressValue: '',
            InstantPressValue: '',
            LongTime_Instant_Status: false,
            openLongTimePress: false,
            defaultValue: 'Default',
            value: this.defaultName,
            macro_RepeatType: 0,
            macro_Data: {},
            assignValue: '',
            profileName: '',
            recordBindCodeType: '',
            recordBindCodeName: this.defaultName,
            shortcutsWindowsEnable: false,
            ApplicationPath: "",
            WebsitePath: "",
            combinationkeyEnable: false,
            Shift: false,
            Alt: false,
            Ctrl: false,
            hasFNStatus: false,
            Windows: false,
            changed: false,
        };
        return T;
    };
    return KeyBoard;
}());



/***/ }),

/***/ "./src/app/numpad-keyboard/MacroService.ts":
/*!*************************************************!*\
  !*** ./src/app/numpad-keyboard/MacroService.ts ***!
  \*************************************************/
/*! exports provided: MacroService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MacroService", function() { return MacroService; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _CommonService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CommonService */ "./src/app/numpad-keyboard/CommonService.ts");
/* harmony import */ var _AppSettingService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AppSettingService */ "./src/app/numpad-keyboard/AppSettingService.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/* @brief Macromodule.
  * @author G-spy Louis
*/



var AllFunctionMapping = __webpack_require__(/*! ./SupportData */ "./src/app/numpad-keyboard/SupportData.js");
var AppDB = __webpack_require__(/*! ./AppDB */ "./src/app/numpad-keyboard/AppDB.js");
var MacroService = /** @class */ (function () {
    function MacroService() {
        this.dbService = AppDB.getInstance();
        this.nowMacroName = '';
        this.getAppService = _AppSettingService__WEBPACK_IMPORTED_MODULE_2__["AppSettingService"].getInstance();
        this.macroSelectData = [];
        this.macroTypeSelectData = [
            { name: 'No Repeat', value: 0, translate: 'NoRepeat' },
            { name: 'Toggle', value: 1, translate: 'Toggle' },
            { name: 'Repeat While holding', value: 2, translate: 'WhilePressed' },
        ];
        console.log('MacroService_GetAppService.instance', _AppSettingService__WEBPACK_IMPORTED_MODULE_2__["AppSettingService"].instance);
        this.getMacroFromDB();
    }
    /**
     * get Macro Data from DB
     */
    MacroService.prototype.getMacroFromDB = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var Temp = [];
            Temp.push(_this.defaultModule());
            Temp[0].name = _this.getTranslate('NewMacro');
            _this.dbService.getMacro().then(function (data) {
                data = _this.ArraySort(JSON.parse(JSON.stringify(data)), 'value');
                for (var i = 0; i < data.length; i++) {
                    var tempObj = _this.defaultModule();
                    tempObj.name = data[i].name,
                        tempObj.value = data[i].value,
                        tempObj.m_Identifier = data[i].m_Identifier,
                        tempObj.content = data[i].content,
                        Temp.push(tempObj);
                }
                _this.macroSelectData = Temp;
                _this.nowMacroSelect = _this.macroSelectData[1];
                console.log('getMacroFromDB', Temp, _this.nowMacroSelect);
                _this.nowMacroName = _this.nowMacroSelect.name;
                resolve();
            });
        });
    };
    /**
     * 排列Array順序
     * @param array
     * @param key
     */
    MacroService.prototype.ArraySort = function (array, key) {
        return array.sort(function (a, b) {
            var x = a[key];
            var y = b[key];
            x;
            return x - y;
        });
    };
    /**
     * Re Sort Array
     */
    MacroService.prototype.reArraySortData = function () {
        _CommonService__WEBPACK_IMPORTED_MODULE_1__["CommonService"].getInstance().ArraySort(this.macroSelectData, 'value');
    };
    /**
     * get Macro from Id
     */
    MacroService.prototype.getMacroFromIdentifier = function () {
        var _this = this;
        var Target = this.macroSelectData.find(function (x) { return x.value == _this.nowMacroSelect.value; });
        if (Target == undefined) {
            //console.error('this.nowMacroSelect.m_Identifier', this.nowMacroSelect.m_Identifier);
            alert('this.nowMacroSelect.m_Identifier=' + this.nowMacroSelect.m_Identifier);
        }
        console.log('getMacroFromIdentifier', Target);
        return Target;
    };
    /**
     * get Macro RepeatType
     */
    MacroService.prototype.get_RepeatType = function () {
        return this.macrotypeSelect.value;
    };
    /**
     * get Translate name
     * @param SearchName
     */
    MacroService.prototype.getTranslate = function (SearchName) {
        //console.log('getTranslate',this.translate.get(SearchName)['value']);
        return SearchName;
    };
    /**
     * get Compare Macro Name
     */
    MacroService.prototype.getCompareMacroName = function (Searchm_Identifier) {
        var target = this.macroSelectData.find(function (x) { return x.m_Identifier == Searchm_Identifier; });
        if (target == undefined) {
            console.error('getCompareMacroName_Error', Searchm_Identifier);
            return "";
        }
        return target.name;
    };
    /**
     * set Macro TypeValue
     */
    MacroService.prototype.setMacroTypeValue = function (Searchm_value) {
        var target = this.macroTypeSelectData.find(function (x) { return x.value == Searchm_value; });
        if (target == undefined) {
            console.error('setMacroTypeValue_Error', Searchm_value);
            return;
        }
        console.log('setMacroTypeValue', Searchm_value, target);
        this.macrotypeSelect = target;
    };
    /**
     * set Macro SelectValue
     */
    MacroService.prototype.setMacroSelectValue = function (Searchm_value) {
        var target = this.macroSelectData.find(function (x) { return x.value == Searchm_value; });
        if (target == undefined) {
            console.error('setCompareMacroSelect_Error', Searchm_value);
            return;
        }
        console.log('setCompareMacroSelect', Searchm_value, target);
        this.nowMacroSelect = target;
        this.nowMacroName = this.nowMacroSelect.name;
    };
    /**
     * Register for events when the macro changes
     *
     */
    MacroService.prototype.macrotypeSelectChange = function (Searchm_value) {
    };
    /**
     * Default Data Module
     */
    MacroService.prototype.defaultModule = function (type) {
        if (type === void 0) { type = ''; }
        var T = {
            name: 'NewMacro',
            value: 0,
            m_Identifier: '',
            content: [],
        };
        return T;
    };
    /**
     * setLanguageName
     */
    MacroService.prototype.setLanguageName = function () {
        this.macroSelectData[0].name = this.getTranslate('NewMacro');
        var data = this.macroTypeSelectData;
        for (var index = 0; index < data.length; index++) {
            data[index].name = this.getTranslate(data[index].translate);
        }
    };
    /**
     * Add New Macro
     */
    MacroService.prototype.AddNewMacro = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var i = 1;
            var data = {
                name: 'Macro 1',
                content: [],
            };
            var TempName = data.name;
            while (1) {
                var flag = _this.macroSelectData.findIndex(function (x) { return x.name == TempName; });
                if (flag != -1) {
                    TempName = data.name + '-' + i;
                    i++;
                }
                else {
                    data.name = TempName;
                    break;
                }
            }
            var tempObj = _this.defaultModule();
            tempObj.name = data.name;
            tempObj.value = _this.macroSelectData[_this.macroSelectData.length - 1].value + 1;
            tempObj.m_Identifier = String(new Date().getTime());
            tempObj.content = data.content;
            _this.macroSelectData.push(tempObj);
            _this.macroSelectData = JSON.parse(JSON.stringify(_this.macroSelectData));
            _this.nowMacroSelect = _this.macroSelectData[_this.macroSelectData.length - 1];
            _this.dbService.insertMacro(tempObj).then(function () {
                resolve();
            });
            console.log('MacroService_AddNewMacro', _this);
        });
    };
    /**
     * delete Macro
     */
    MacroService.prototype.deletMacro = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.macroSelectData.length > 2) {
                console.log('deletMacro', _this.nowMacroSelect.value);
                _CommonService__WEBPACK_IMPORTED_MODULE_1__["CommonService"].getInstance().delayDialog('main-app', 500000);
                // this.getMacroFromIdentifier()
                _this.dbService.DeleteMacro(_this.nowMacroSelect.value).then(function () {
                    var TempArray = JSON.parse(JSON.stringify(_this.macroSelectData));
                    var index = _this.macroSelectData.findIndex(function (x) { return x.value == _this.nowMacroSelect.value; });
                    TempArray.splice(index, 1);
                    _this.macroSelectData = TempArray;
                    _this.nowMacroSelect = _this.macroSelectData[_this.macroSelectData.length - 1];
                    _this.nowMacroName = _this.nowMacroSelect.name;
                    _CommonService__WEBPACK_IMPORTED_MODULE_1__["CommonService"].getInstance().CloseDialog();
                    resolve();
                });
            }
        });
    };
    /**
     * Update Marco Data to DB
     */
    MacroService.prototype.UpdateMacro = function (macroName, macroData) {
        this.getMacroFromIdentifier().name = macroName;
        this.getMacroFromIdentifier().content = macroData;
        this.nowMacroName = macroName;
        console.log('UpdateMacro_CurrentMacro', this.getMacroFromIdentifier());
        this.dbService.updateMacro(this.getMacroFromIdentifier().value, this.getMacroFromIdentifier()).then(function () {
        });
    };
    /**
     * set Macro SelectData
     */
    MacroService.prototype.setMacroSelectData = function (value) {
        var MacroIndex = this.macroSelectData.findIndex(function (x) { return x.value == value; });
        if (MacroIndex != -1) {
            this.nowMacroSelect = this.macroSelectData[MacroIndex];
            this.nowMacroName = this.nowMacroSelect.name;
        }
    };
    /**
     * set MacroTypeData
     */
    MacroService.prototype.setMacroTypeData = function (value) {
        var MacroTypeIndex = this.macroTypeSelectData.findIndex(function (x) { return x.value == value; });
        if (MacroTypeIndex != -1) {
            this.macrotypeSelect = this.macroTypeSelectData[MacroTypeIndex];
        }
    };
    /**
     * Find the data in the specified field exists
     */
    MacroService.prototype.find_Data_Exist = function (field, value) {
        var Target = this.macroSelectData.find(function (x) { return x[field] == value; });
        if (Target == undefined) {
            console.log('find_Data_Exist_fail', field, value);
            return false;
        }
        else {
            return true;
        }
    };
    /**
     * Find the specified field data
     */
    MacroService.prototype.find_Data = function (field, value) {
        var Target = this.macroSelectData.find(function (x) { return x[field] == value; });
        if (Target == undefined) {
            console.log('find_Data_fail', field, value);
            return Target;
        }
        else {
            return Target;
        }
    };
    /**
     *get NotRepeatData
     */
    MacroService.prototype.getNotRepeatData = function (macroData) {
        var TempName = macroData.name;
        var i = 1;
        while (1) {
            var flag = this.find_Data_Exist('name', TempName);
            if (flag) {
                TempName = macroData.name + '-' + i;
                i++;
            }
            else {
                macroData.name = TempName;
                break;
            }
        }
        var temp_id = macroData.m_Identifier;
        while (1) {
            var flag = this.find_Data_Exist('m_Identifier', temp_id);
            if (flag) {
                temp_id = String(new Date().getTime());
            }
            else {
                macroData.m_Identifier = temp_id;
                break;
            }
        }
        var temp_value = macroData.value;
        while (1) {
            var flag = this.find_Data_Exist('value', temp_value);
            if (flag) {
                temp_value += 1;
            }
            else {
                macroData.value = temp_value;
                break;
            }
        }
        this.macroSelectData.push(macroData);
        return macroData;
    };
    MacroService.prototype.setMacroPageEnter = function () {
        this.nowMacroSelect = this.macroSelectData[1]; //default set  
        this.nowMacroName = this.nowMacroSelect.name;
        this.macrotypeSelect = this.macroTypeSelectData[0]; //default set  
        console.log('setMacroPageEnter', this.nowMacroSelect);
        console.log('setMacroPageEnter', this.macroSelectData);
    };
    MacroService.prototype.macroNameInputBlur = function () {
        //var target = document.getElementById('setMacroName')
        //target.addEventListener('blur', () => {
        //console.log('target.addEventListener', JSON.stringify(this.nowMacroSelect));
        if (this.nowMacroName == "") {
            this.nowMacroName = " ";
        }
        var TempName = this.nowMacroName;
        var i = 1;
        while (1) {
            var flag = this.macroSelectData.findIndex(function (x) { return x.name == TempName; });
            if (flag != -1 && TempName != this.nowMacroSelect.name) {
                TempName = this.nowMacroName + '-' + i;
                i++;
            }
            else {
                this.nowMacroName = TempName;
                break;
            }
        }
        this.getMacroFromIdentifier().name = this.nowMacroName;
        console.log('setMacroPageEnter_UpdateMacro_CurrentMacro', JSON.stringify(this.getMacroFromIdentifier()));
        this.nowMacroSelect = JSON.parse(JSON.stringify(this.getMacroFromIdentifier()));
        this.macroSelectData = JSON.parse(JSON.stringify(this.macroSelectData));
        this.UpdateMacro(this.getMacroFromIdentifier().name, this.getMacroFromIdentifier().content);
        // //})
    };
    /**
     * macro select
     */
    MacroService.prototype.setMacroSelectChange = function () {
        var _this = this;
        if (this.nowMacroSelect.value == 0) {
            this.AddNewMacro().then(function () {
                _this.nowMacroName = _this.nowMacroSelect.name;
            });
        }
        else {
            this.nowMacroName = this.nowMacroSelect.name;
        }
    };
    MacroService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [])
    ], MacroService);
    return MacroService;
}());



/***/ }),

/***/ "./src/app/numpad-keyboard/Node_NeDB.js":
/*!**********************************************!*\
  !*** ./src/app/numpad-keyboard/Node_NeDB.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var DB = (function () 
{   
    var _this; 
    function DB() {
      	_this = this;
        _this.db = {};   
        
    }   
    //DB.getInstance=0;
    DB.getInstance= function () {
        if (this.instance) {
            return this.instance;
        } else {
            console.log("new Node_NeDB Class");
            this.instance = new DB();
            return this.instance;
        }
    }

    


    
    DB.prototype.queryCmd = function (filePath,query_partemter, callback) {
        callback(
            [{"AllData":[],"_id":"S21tw2mhN6A65macro"}]);
    };

    DB.prototype.insertCmd = function (tbname, m, callback) {
        var opts = { retries: 5, retryWait: 100 }
            if (er)

            var db = _this.getDB(tbname); var newIndex = 0;
            _this.getMax(tbname, function (err, maxValue) {
                if (maxValue == undefined) {
                    newIndex = 1;
                } else {
                    newIndex = maxValue + 1;
                }
                if (m["value"] == null)
                    m["value"] = newIndex;
                db.insert(m, function (err, docs) {
                    db.persistence.compactDatafile();
                        callback(err, docs);
                    
                });
            });

    };

    DB.prototype.updateCmd = function (filePath, targetId , specifyfield, callback) {
        var db = _this.getDB(filePath);
        var opts = { retries: 5, retryWait: 100 }
            console.error('DB.prototype.updateCmd-lock',filePath, error, isLocked);
            if (error) {
                console.error('DB.prototype.updateCmd_error',filePath,opts,er);
                // throw er;
            }
            db.update(targetId, { $set: specifyfield }, { upsert: true, multi: true }, function (err, numReplaced) {
                console.error('DB.prototype.updateCmd_lockFile.unlock',err);
                db.persistence.compactDatafile();
                    callback(err);
            });

    };

    DB.prototype.updateDataCmd = function (tbname, om, nm, callback) {
        var db = _this.getDB(tbname);
        var opts = { retries: 5, retryWait: 100 }
            if (er){
                console.error('DB.prototype.updateDataCmd_ER',tbname,opts,er);
            }
            db.update(om, { $push: nm }, { multi: true }, function (err, numReplaced) {
                db.persistence.compactDatafile();
                console.error('DB.prototype.updateDataCmd_ER',tbname,opts,err);
                    callback(err);
                
            });
    };

    DB.prototype.deleteCmd = function (tbname, m, callback) {
        var db = _this.getDB(tbname);
        var opts = { retries: 5, retryWait: 100 }
            if (er){
                console.error('DB.prototype.deleteCmd',tbname,opts,er);
            }
            db.remove(m, { multi: true }, function (err, numRemoved) {
                db.persistence.compactDatafile();
                    callback(err);
                
            });
    };

    DB.prototype.ensureIndex = function (tbname, _fieldName, callback) {
        var db = _this.getDB(tbname);
        db.ensureIndex({ fieldName: _fieldName, unique: true, sparse: true }, function (err) {
            callback(err);
        });
    }

    DB.prototype.getDB = function (tbname) {
        try{
            if (_this.db[tbname]) {
                _this.db[tbname].loadDatabase();
                return _this.db[tbname]
            } else {
                // var dbPath = path.resolve(__dirname, '../../data/' + tbname + ".db");
                // dbPath = env.appDBRoot + tbname + ".db";//APPDATA DB
                // var thisDb = new DBstore({ filename: dbPath, corruptAlertThreshold: 1 });
                // thisDb.loadDatabase();
                // _this.db[tbname] = thisDb;
                return '';
            }
        }
        catch (e) {
            console.error('DB.prototype.getDB',e,tbname);
        }
    }



   DB.prototype.db = undefined; 

   return DB;
})();

exports.DB = DB;

/***/ }),

/***/ "./src/app/numpad-keyboard/NumpadKeyboard.css":
/*!****************************************************!*\
  !*** ./src/app/numpad-keyboard/NumpadKeyboard.css ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n\r\n:host{\r\n    width: 100%;\r\n}\r\n\r\n.Keyboard-content{\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    height: calc(100%);\r\n    background: #f7d0d04f;\r\n}\r\n\r\n.Keyboard-content .Content1{\r\n    \r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    \r\n}\r\n\r\n\r\n"

/***/ }),

/***/ "./src/app/numpad-keyboard/NumpadKeyboard.html":
/*!*****************************************************!*\
  !*** ./src/app/numpad-keyboard/NumpadKeyboard.html ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<!-- <p>\n  NumpadKeyboard works!\n</p> -->\n\n\n\n<!-- <img id=\"GMMK_img\" src=\"./image/NumpadKeyboard/Side Light.png\"\nstyle=\"z-index: 3;\" />\n\n<img id=\"GMMK_img\" src=\"./image/NumpadKeyboard/Side Light.png\"\nstyle=\"z-index: 3;\" />\n\n<img id=\"GMMK_img\" src=\"./image/NumpadKeyboard/GMMK NumPad.png\"\nstyle=\"z-index: 3;\" /> -->\n\n<div id=\"EventCanBoxSelectRange\" class=\"Keyboard-content\">\n  <div id=\"GMMK_0x320F0x5044\" class=\"Content1\">\n      <div id=\"canvasArea\" style=\"width: 834px;height: 372px;display: flex\">\n          <div *ngIf=\"PreviewModeFlag\" id=\"GMMK_Preview\" style=\"    position: absolute;\n          display: flex;\n          width: 786px;\n          height: 319px;\n          background: red;\n          margin-top: 5px;\"></div>\n          <img src=\"./image/NumpadKeyboard/GMMK NumPad.png\" style=\"position: absolute; z-index: 3;pointer-events: none; \" />\n          <div id=\"keyAssignPrompt\"\n              style=\"\n                  position: absolute;\n                  margin-top: -146px;\n                  margin-left: -65px;\n                  visibility: visible;\n                  width: 130px;\n                  display: flex;\n                  height: 117px;\n                  justify-content: center;\n                  align-items: flex-end;\n                  background-image: url('./image/keybinding/Indicator.png');\n                  z-index: 20;\n              \"\n              [style.display]=\"keybindingflag && !this.KeyBoardManager.notClickedYet ? 'flex' : 'none'\"\n          >\n              <div\n                  id=\"keyAssignPromptline\"\n                  style=\"background-color: rgb(255, 255, 255); position: absolute; width: 1px; display: flex\"\n              ></div>\n              <div\n                  id=\"KeyDefaultValue\"\n                  style=\"\n                      color: white;\n                      margin-bottom: 84px;\n                      width: 80%;\n                      text-overflow: ellipsis;\n                      overflow: hidden;\n                      white-space: nowrap;\n                      text-align: center;\n                  \"\n              >\n                  {{ getDeviceDefaultKey() }}\n              </div>\n              <div id=\"SingleKeyClass\" style=\"position: absolute; color: white; margin-top: -57px\">\n                  {{ this.KeyBoardManager.getTarget().getNowModeTargetMatrixKey().recordBindCodeType }}\n              </div>\n              <div id=\"SingleKeyAssignValue\" style=\"    position: absolute;\n                                      color: white;\n                                      margin-top: -25px;\n                                      width: 50%;\n                                      text-overflow: ellipsis;\n                                      overflow: hidden;\n                                      white-space: nowrap;\n                                      text-align: center;\n                                      \">\n                  {{ switchChangAllkey() }}\n              </div>\n          </div>             \n          <div id=\"PERKEY_UI_section\" style=\"position: absolute;\n          display: flex;\n          WIDTH: auto;\n          HEIGHT: 100%;\">\n              <div \n                  *ngFor=\"let item of KeyBoardStyle.getTarget().keyMapping; let i = index\" class=\"PERKEYBlockStyle\"\n                  [ngStyle]=\"{'background':this.M_Light_PERKEY.getIndexRGBPerkeyCss(i)}\"\n                  [attr.data-index]=\"i\"></div>\n          </div>\n          <div id=\"KeyAssignBlock_section\" style=\"position: absolute;\n          display: flex;\n          WIDTH: auto;\n          HEIGHT: 100%;\">\n              <div id=\"KeyAssignBlock\" [ngStyle]=\"{display: keybindingflag ? 'flex' : 'none'}\"\n                  *ngFor=\"let item of KeyBoardStyle.getTarget().keyMapping; let i = index\"\n                  (mouseover)=\"this.KeyBoardManager.getTarget().keyHoverIndex = i\" [style.background-color]=\"setkeyUIColor(i)\" \n                  class=\"KeyAssignUIStyle\">\n                  <div [ngClass]=\"{KeyAssignHasValue:this.KeyBoardManager.getTarget().getNowModeKeyMatrix()[i].changed}\"\n                  [attr.id]=\"'KeyAssignHasValue'+i\"\n                  class=\"KeyAssignHasValue\">{{getAssignKeyTipStyle(i)}}</div>\n              </div>\n          </div>\n      </div>\n      <div id=\"LayersIconUI\" (click)=\"changeProfileLayer()\" style=\"align-self: center; text-align: center\"\n      *ngIf=\"this.keybindingflag || this.lightingflag\">\n      <img src=\"image/LayersIcon{{this.KeyBoardManager.getProfileLayerIndex()}}.png\">\n\n      <div style=\"margin-top: 10px; color: rgb(68, 68, 67)\">\n          Layers\n      </div>\n</div>"

/***/ }),

/***/ "./src/app/numpad-keyboard/NumpadKeyboard.ts":
/*!***************************************************!*\
  !*** ./src/app/numpad-keyboard/NumpadKeyboard.ts ***!
  \***************************************************/
/*! exports provided: NumpadKeyboardComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumpadKeyboardComponent", function() { return NumpadKeyboardComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _Module_TSImportManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Module/TSImportManager */ "./src/Module/TSImportManager.ts");
/* harmony import */ var _angular_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/http */ "./node_modules/@angular/http/fesm5/http.js");
/* harmony import */ var _DeviceService__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DeviceService */ "./src/app/numpad-keyboard/DeviceService.ts");
/* harmony import */ var _KeyBoardManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./KeyBoardManager */ "./src/app/numpad-keyboard/KeyBoardManager.ts");
/* harmony import */ var _MacroService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./MacroService */ "./src/app/numpad-keyboard/MacroService.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






var AllFunctionMapping = __webpack_require__(/*! ./SupportData */ "./src/app/numpad-keyboard/SupportData.js").AllFunctionMapping;
var NumpadKeyboardComponent = /** @class */ (function () {
    function NumpadKeyboardComponent(http) {
        this.http = http;
        this.KeyBoardStyle = new _Module_TSImportManager__WEBPACK_IMPORTED_MODULE_1__["KeyBoardStyle"]();
        this.KeyAssignManager = new _Module_TSImportManager__WEBPACK_IMPORTED_MODULE_1__["KeyAssignManager"]();
        this.M_Light_PRESETS = new _Module_TSImportManager__WEBPACK_IMPORTED_MODULE_1__["M_Light_CS"](83);
        this.M_Light_PERKEY = new _Module_TSImportManager__WEBPACK_IMPORTED_MODULE_1__["M_Light_CS"](83);
        this.KeyBoardManager = new _KeyBoardManager__WEBPACK_IMPORTED_MODULE_4__["KeyBoardManager"](83);
        this.macroService = new _MacroService__WEBPACK_IMPORTED_MODULE_5__["MacroService"]();
        this.deviceService = new _DeviceService__WEBPACK_IMPORTED_MODULE_3__["DeviceService"](this.http);
        console.log('NumpadKeyboardComponent', AllFunctionMapping);
    }
    NumpadKeyboardComponent.prototype.ngOnInit = function () {
    };
    /**
     * process setkeyUIColor Event
    */
    NumpadKeyboardComponent.prototype.setkeyUIColor = function (i) {
        if (this.KeyBoardManager.getTarget().recordAssignBtnIndex == i && !this.KeyBoardManager.notClickedYet) {
            return 'rgba(255, 255, 255, 0.65)';
        }
        else {
            if (this.KeyBoardManager.getTarget().keyHoverIndex == i) {
                return 'rgba(253, 186, 59, 0.65)';
            }
            else {
                return '#0000';
            }
        }
    };
    /**
     * process AssignKeyTipStyle Event
    */
    NumpadKeyboardComponent.prototype.getAssignKeyTipStyle = function (index) {
        var TTT = document.getElementById('KeyAssignHasValue' + index);
        var isVisible = this.KeyBoardManager.getTarget().getNowModeKeyMatrix()[index].changed;
        if (TTT != null && isVisible == true) {
            TTT.style.cssText = "background: #fdba3b;width: 60%;height: 7px;margin-bottom: 10px;pointer-events: none;" + this.KeyBoardStyle.getTarget().hasValueStyle[index];
        }
        else {
            TTT.style.cssText = "";
        }
        //console.log('%c getAssignKeyTipStyle','background: blue; color: red',event)
    };
    /**
  * process getDeviceDefaultKey Event
  */
    NumpadKeyboardComponent.prototype.getDeviceDefaultKey = function () {
        var transText = this.KeyBoardManager.getTarget().getNowModeTargetMatrixKey().defaultValue;
        //console.log('getDeviceDefaultKey', this.currentDevice.deviceData.devicename);
        var checkString = this.deviceService.getCurrentDevice();
        if (checkString == "GMMK PRO ISO" || checkString == "GMMK V2 65ISO" || checkString == "GMMK V2 96ISO") {
            if (transText == "|") {
                transText = "#";
            }
        }
        return transText;
    };
    /**
  * process switchChangAllkey Event
  */
    NumpadKeyboardComponent.prototype.switchChangAllkey = function () {
        var _this = this;
        var index = AllFunctionMapping.findIndex(function (x) { return x.code == _this.KeyBoardManager.getTarget().getNowModeTargetMatrixKey().recordBindCodeName; });
        if (index != -1) {
            var target = this.KeyBoardManager.getTarget().getNowModeTargetMatrixKey();
            //console.log('switchChangAllkey',this.KeyBoardManager.getTarget().getNowModeTargetMatrixKey());
            switch (target.recordBindCodeType) {
                case 'LaunchProgram':
                    return this.getFileName(target.ApplicationPath);
                case 'LaunchWebsite':
                    return target.WebsitePath;
                case 'MacroFunction':
                    //console.log('case MacroFunction:',target);   
                    var obj = this.macroService.find_Data('m_Identifier', target.macro_Data.m_Identifier);
                    if (obj != undefined) {
                        return obj.name;
                    }
                    else {
                        return '';
                    }
            }
            //console.log('AllFunctionMapping_index', index);
            var combinationkey = "";
            var count = 0;
            if (target.combinationkeyEnable) {
                if (target.Shift) {
                    combinationkey += "Shift";
                    if (count > 0) {
                        combinationkey += "+";
                    }
                    count += 1;
                }
                if (target.Alt) {
                    if (count > 0) {
                        combinationkey += "+";
                    }
                    combinationkey += "Alt";
                    count += 1;
                }
                if (target.Ctrl) {
                    if (count > 0) {
                        combinationkey += "+";
                    }
                    combinationkey += "Ctrl";
                    count += 1;
                }
                if (target.Windows) {
                    if (count > 0) {
                        combinationkey += "+";
                    }
                    combinationkey += "Windows";
                    count += 1;
                }
                if (target.hasFNStatus) {
                    if (count > 0) {
                        combinationkey += "+";
                    }
                    combinationkey += "FN";
                    count += 1;
                }
                console.log('switchChangAllkey_count', count);
            }
            ;
            if (count > 0) {
                combinationkey += "+";
            }
            var trans = AllFunctionMapping[index].translate;
            var result = combinationkey + trans;
            return result;
        }
    };
    /**
     * get File name exe
     * @param filename
     */
    NumpadKeyboardComponent.prototype.getFileName = function (filename) {
        return filename;
    };
    NumpadKeyboardComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-NumpadKeyboard',
            template: __webpack_require__(/*! ./NumpadKeyboard.html */ "./src/app/numpad-keyboard/NumpadKeyboard.html"),
            styles: [__webpack_require__(/*! ./NumpadKeyboard.css */ "./src/app/numpad-keyboard/NumpadKeyboard.css")]
        }),
        __metadata("design:paramtypes", [_angular_http__WEBPACK_IMPORTED_MODULE_2__["Http"]])
    ], NumpadKeyboardComponent);
    return NumpadKeyboardComponent;
}());



/***/ }),

/***/ "./src/app/numpad-keyboard/SupportData.js":
/*!************************************************!*\
  !*** ./src/app/numpad-keyboard/SupportData.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var KeyMapping = [
    {"keyCode":"65","functionType":"Singlekey","value":"A","hid":4,"translate":"A","code":"KeyA"},
    {"keyCode":"66","functionType":"Singlekey","value":"B","hid":5,"translate":"B","code":"KeyB"},
    {"keyCode":"67","functionType":"Singlekey","value":"C","hid":6,"translate":"C","code":"KeyC"},
    {"keyCode":"68","functionType":"Singlekey","value":"D","hid":7,"translate":"D","code":"KeyD"},
    {"keyCode":"69","functionType":"Singlekey","value":"E","hid":8,"translate":"E","code":"KeyE"},
    {"keyCode":"70","functionType":"Singlekey","value":"F","hid":9,"translate":"F","code":"KeyF"},
    {"keyCode":"71","functionType":"Singlekey","value":"G","hid":10,"translate":"G","code":"KeyG"},
    {"keyCode":"72","functionType":"Singlekey","value":"H","hid":11,"translate":"H","code":"KeyH"},
    {"keyCode":"73","functionType":"Singlekey","value":"I","hid":12,"translate":"I","code":"KeyI"},
    {"keyCode":"74","functionType":"Singlekey","value":"J","hid":13,"translate":"J","code":"KeyJ"},
    {"keyCode":"75","functionType":"Singlekey","value":"K","hid":14,"translate":"K","code":"KeyK"},
    {"keyCode":"76","functionType":"Singlekey","value":"L","hid":15,"translate":"L","code":"KeyL"},
    {"keyCode":"77","functionType":"Singlekey","value":"M","hid":16,"translate":"M","code":"KeyM"},
    {"keyCode":"78","functionType":"Singlekey","value":"N","hid":17,"translate":"N","code":"KeyN"},
    {"keyCode":"79","functionType":"Singlekey","value":"O","hid":18,"translate":"O","code":"KeyO"},
    {"keyCode":"80","functionType":"Singlekey","value":"P","hid":19,"translate":"P","code":"KeyP"},
    {"keyCode":"81","functionType":"Singlekey","value":"Q","hid":20,"translate":"Q","code":"KeyQ"},
    {"keyCode":"82","functionType":"Singlekey","value":"R","hid":21,"translate":"R","code":"KeyR"},
    {"keyCode":"83","functionType":"Singlekey","value":"S","hid":22,"translate":"S","code":"KeyS"},
    {"keyCode":"84","functionType":"Singlekey","value":"T","hid":23,"translate":"T","code":"KeyT"},
    {"keyCode":"85","functionType":"Singlekey","value":"U","hid":24,"translate":"U","code":"KeyU"},
    {"keyCode":"86","functionType":"Singlekey","value":"V","hid":25,"translate":"V","code":"KeyV"},
    {"keyCode":"87","functionType":"Singlekey","value":"W","hid":26,"translate":"W","code":"KeyW"},
    {"keyCode":"88","functionType":"Singlekey","value":"X","hid":27,"translate":"X","code":"KeyX"},
    {"keyCode":"89","functionType":"Singlekey","value":"Y","hid":28,"translate":"Y","code":"KeyY"},
    {"keyCode":"90","functionType":"Singlekey","value":"Z","hid":29,"translate":"Z","code":"KeyZ"},
    {"keyCode":"48","functionType":"Singlekey","value":"0","hid":39,"translate":"0","code":"Digit0"},
    {"keyCode":"49","functionType":"Singlekey","value":"1","hid":30,"translate":"1","code":"Digit1"},
    {"keyCode":"50","functionType":"Singlekey","value":"2","hid":31,"translate":"2","code":"Digit2"},
    {"keyCode":"51","functionType":"Singlekey","value":"3","hid":32,"translate":"3","code":"Digit3"},
    {"keyCode":"52","functionType":"Singlekey","value":"4","hid":33,"translate":"4","code":"Digit4"},
    {"keyCode":"53","functionType":"Singlekey","value":"5","hid":34,"translate":"5","code":"Digit5"},
    {"keyCode":"54","functionType":"Singlekey","value":"6","hid":35,"translate":"6","code":"Digit6"},
    {"keyCode":"55","functionType":"Singlekey","value":"7","hid":36,"translate":"7","code":"Digit7"},
    {"keyCode":"56","functionType":"Singlekey","value":"8","hid":37,"translate":"8","code":"Digit8"},
    {"keyCode":"57","functionType":"Singlekey","value":"9","hid":38,"translate":"9","code":"Digit9"},
    {"keyCode":"8","functionType":"Singlekey","value":"Backspace","hid":42,"translate":"Backspace","code":"Backspace"},
    {"keyCode":"9","functionType":"Singlekey","value":"Tab","hid":43,"translate":"Tab","code":"Tab"},
    {"keyCode":"144","functionType":"Singlekey","value":"Num Lock","hid":83,"translate":"Num Lock","code":"NumLock"},
    {"keyCode":"13","functionType":"Singlekey","value":"Enter","hid":40,"translate":"Enter","code":"Enter"},
    {"keyCode":"16","functionType":"Singlekey","value":"Shift","hid":225,"Modifier":0x02,"translate":"Shift","code":"ShiftRight"},
    {"keyCode":"17","functionType":"Singlekey","value":"Ctrl","hid":224,"Modifier":0x01,"translate":"Ctrl","code":"ControlLeft"},
    {"keyCode":"18","functionType":"Singlekey","value":"Alt","hid":226,"Modifier":0x04,"translate":"Alt","code":"AltRight"},
    {"keyCode":"19","functionType":"Singlekey","value":"Break","hid":72,"translate":"Break","code":"Pause"},
    {"keyCode":"20","functionType":"Singlekey","value":"CapsLock","hid":57,"translate":"CapsLock","code":"CapsLock"},
    {"keyCode":"27","functionType":"Singlekey","value":"Esc","hid":41,"translate":"Esc","code":"Escape"},
    {"keyCode":"32","functionType":"Singlekey","value":"Space","hid":44,"translate":"Space","code":"Space"},
    {"keyCode":"33","functionType":"Singlekey","value":"PageUp","hid":75,"translate":"PageUp","code":"PageUp"},
    {"keyCode":"34","functionType":"Singlekey","value":"PageDown","hid":78,"translate":"PageDown","code":"PageDown"},
    {"keyCode":"35","functionType":"Singlekey","value":"End","hid":77,"translate":"End","code":"End"},
    {"keyCode":"36","functionType":"Singlekey","value":"Home","hid":74,"translate":"Home","code":"Home"},
    {"keyCode":"37","functionType":"Singlekey","value":"Left","hid":80,"translate":"Left","code":"ArrowLeft"},
    {"keyCode":"38","functionType":"Singlekey","value":"Up","hid":82,"translate":"Up","code":"ArrowUp"},
    {"keyCode":"39","functionType":"Singlekey","value":"Right","hid":79,"translate":"Right","code":"ArrowRight"},
    {"keyCode":"40","functionType":"Singlekey","value":"Down","hid":81,"translate":"Down","code":"ArrowDown"},
    {"keyCode":"44","functionType":"Singlekey","value":"PrintScreen","hid":"0x46","translate":"PrintScreen","code":"PrintScreen"},
    {"keyCode":"45","functionType":"Singlekey","value":"Insert","hid":73,"translate":"Insert","code":"Insert"},
    {"keyCode":"46","functionType":"Singlekey","value":"Delete","hid":76,"translate":"Delete","code":"Delete"},
    {"keyCode":"91","functionType":"Singlekey","value":"Left Win","hid":227,"Modifier":0x08,"translate":"Left Win","code":"MetaLeft"},
    {"keyCode":"92","functionType":"Singlekey","value":"Right Win","hid":231,"Modifier":0x80,"translate":"Right Win","code":"MetaRight"},
    {"keyCode":"93","functionType":"Singlekey","value":"Menu","hid":101,"translate":"Menu","code":"ContextMenu"},
    {"keyCode":"106","functionType":"Singlekey","value":"*","hid":85,"translate":"*","code":"NumpadMultiply"},
    {"keyCode":"107","functionType":"Singlekey","value":"+","hid":87,"translate":"+","code":"NumpadAdd"},
    {"keyCode":"109","functionType":"Singlekey","value":"-","hid":86,"translate":"-","code":"NumpadSubtract"},
    {"keyCode":"110","functionType":"Singlekey","value":".","hid":0x63,"translate":".","code":"NumpadDecimal"},
    {"keyCode":"111","functionType":"Singlekey","value":"/","hid":84,"translate":"/","code":"NumpadDivide"},
    {"keyCode":"112","functionType":"Singlekey","value":"F1","hid":58,"translate":"F1","code":"F1"},
    {"keyCode":"113","functionType":"Singlekey","value":"F2","hid":59,"translate":"F2","code":"F2"},
    {"keyCode":"114","functionType":"Singlekey","value":"F3","hid":60,"translate":"F3","code":"F3"},
    {"keyCode":"115","functionType":"Singlekey","value":"F4","hid":61,"translate":"F4","code":"F4"},
    {"keyCode":"116","functionType":"Singlekey","value":"F5","hid":62,"translate":"F5","code":"F5"},
    {"keyCode":"117","functionType":"Singlekey","value":"F6","hid":63,"translate":"F6","code":"F6"},
    {"keyCode":"118","functionType":"Singlekey","value":"F7","hid":64,"translate":"F7","code":"F7"},
    {"keyCode":"119","functionType":"Singlekey","value":"F8","hid":65,"translate":"F8","code":"F8"},
    {"keyCode":"120","functionType":"Singlekey","value":"F9","hid":66,"translate":"F9","code":"F9"},
    {"keyCode":"121","functionType":"Singlekey","value":"F10","hid":67,"translate":"F10","code":"F10"},
    {"keyCode":"122","functionType":"Singlekey","value":"F11","hid":68,"translate":"F11","code":"F11"},
    {"keyCode":"123","functionType":"Singlekey","value":"F12","hid":69,"translate":"F12","code":"F12"},
    {"keyCode":"145","functionType":"Singlekey","value":"Scroll Lock","hid":71,"translate":"Scroll Lock","code":"ScrollLock"},
    {"keyCode":"186","functionType":"Singlekey","value":";","hid":51,"translate":";","code":"Semicolon"},
    {"keyCode":"187","functionType":"Singlekey","value":"=","hid":46,"translate":"=","code":"Equal"},
    {"keyCode":"188","functionType":"Singlekey","value":",","hid":54,"translate":",","code":"Comma"},
    {"keyCode":"189","functionType":"Singlekey","value":"-","hid":45,"translate":"-","code":"Minus"},
    {"keyCode":"190","functionType":"Singlekey","value":"dot","hid":55,"translate":"dot","code":"Period"},
    {"keyCode":"191","functionType":"Singlekey","value":"/","hid":56,"translate":"/","code":"Slash"},
    {"keyCode":"192","functionType":"Singlekey","value":"~","hid":53,"translate":"~","code":"Backquote"},
    {"keyCode":"219","functionType":"Singlekey","value":"[","hid":47,"translate":"[","code":"BracketLeft"},
    {"keyCode":"220","functionType":"Singlekey","value":"|","hid":49,"translate":"|","code":"Backslash"},
    {"keyCode":"221","functionType":"Singlekey","value":"]","hid":48,"translate":"]","code":"BracketRight"},
    {"keyCode":"222","functionType":"Singlekey","value":"'","hid":52,"translate":"'","code":"Quote"}

]
var MediaMapping = [
    { keyCode: '1', value: 'None', "hid":0x04, hidMap: [0x00, 0x00], translate: '' },
    { keyCode: '1', value: 'Media Player', "hid":0x04, hidMap: [0x01, 0x83], translate: '' },
    { keyCode: '1', value: 'Play/Pause', "hid":0x04, hidMap: [0x00, 0xcd], translate: '' },
    { keyCode: '1', value: 'Next', "hid":0x04, hidMap: [0x00, 0xb5], translate: '' },
    { keyCode: '1', value: 'Previous', "hid":0x04, hidMap: [0x00, 0xb6], translate: '' },
    { keyCode: '1', value: 'Stop', "hid":0x04, hidMap: [0x00, 0xb7], translate: '' },
    { keyCode: '1', value: 'Mute', "hid":0x04, hidMap: [0x00, 0xe2], translate: '' },
    { keyCode: '1', value: 'Volume up', "hid":0x04, hidMap: [0x00, 0xe9], translate: '' },
    { keyCode: '1', value: 'Volume down', "hid":0x04, hidMap: [0x00, 0xea], translate: '' },
    { keyCode: '1', value: 'Next track', "hid":0x04, hidMap: [0x00, 0xb5], translate: '' },
    { keyCode: '1', value: 'Previous track', "hid":0x04, hidMap: [0x00, 0xb6], translate: '' },
]
var WindowsMapping = [
    { keyCode: '1', value: 'None', "hid":0x04, hidMap: [0x00, 0x00], translate: '' },
    { keyCode: '1', value: 'Email', "hid":0x04, hidMap: [0x01, 0x8a], translate: '' },
    { keyCode: '1', value: 'Calculator', "hid":0x04, hidMap: [0x01, 0x92], translate: '' },
    { keyCode: '1', value: 'My Computer', "hid":0x04, hidMap: [0x01, 0x94], translate: '' },
    { keyCode: '1', value: 'Explorer', "hid":0x04, hidMap: [0x01, 0x94], translate: '' },
    { keyCode: '1', value: 'WWW Home', "hid":0x04, hidMap: [0x02, 0x23], translate: '' },
    { keyCode: '1', value: 'WWW Refresh', "hid":0x04, hidMap: [0x02, 0x27], translate: '' },
    { keyCode: '1', value: 'WWW Stop', "hid":0x04, hidMap: [0x02, 0x26], translate: '' },
    { keyCode: '1', value: 'WWW Back', "hid":0x04, hidMap: [0x02, 0x24], translate: '' },
    { keyCode: '1', value: 'WWW Forward', "hid":0x04, hidMap: [0x02, 0x25], translate: '' },
    { keyCode: '1', value: 'WWW Search', "hid":0x04, hidMap: [0x02, 0x21], translate: '' },
]

var Shortcuts_WindowsMapping=[
    {"keyCode":"Shortcuts_Fun_25","functionType":"Shortcuts","value":"Email","hid":17,"translate":"Email","code":"Shortcuts_Fun_25"},
    {"keyCode":"Shortcuts_Fun_26","functionType":"Shortcuts","value":"Calculator","hid":16,"translate":"Calculator","code":"Shortcuts_Fun_26"},
    {"keyCode":"Shortcuts_Fun_27","functionType":"Shortcuts","value":"My Computer","hid":15,"translate":"My Computer","code":"Shortcuts_Fun_27"},
    {"keyCode":"Shortcuts_Fun_28","functionType":"Shortcuts","value":"Explorer","hid":15,"translate":"Explorer","code":"Shortcuts_Fun_28"},
    {"keyCode":"Shortcuts_Fun_29","functionType":"Shortcuts","value":"WWW Home","hid":8,"translate":"WWW Home","code":"Shortcuts_Fun_29"},
    {"keyCode":"Shortcuts_Fun_30","functionType":"Shortcuts","value":"WWW Refresh","hid":9,"translate":"WWW Refresh","code":"Shortcuts_Fun_30"},
    {"keyCode":"Shortcuts_Fun_31","functionType":"Shortcuts","value":"WWW Stop","hid":10,"translate":"WWW Stop","code":"Shortcuts_Fun_31"},
    {"keyCode":"Shortcuts_Fun_32","functionType":"Shortcuts","value":"WWW Back","hid":11,"translate":"WWW Back","code":"Shortcuts_Fun_32"},
    {"keyCode":"Shortcuts_Fun_33","functionType":"Shortcuts","value":"WWW Forward","hid":12,"translate":"WWW Forward","code":"Shortcuts_Fun_33"},
    {"keyCode":"Shortcuts_Fun_34","functionType":"Shortcuts","value":"WWW Search","hid":14,"translate":"WWW Search","code":"Shortcuts_Fun_34"},
]
var SupportLanguage = [
    { name: 'ENGLISH', value: 'en' },
    // {name:'繁體中文', value:"tw"},
    // {name:'简体中文', value:"cn"}
]

var AllFunctionMapping =[{"keyCode":"Multimedia_Fun_0","functionType":"Multimedia","value":"Media Player","hid":0,"translate":"Media Player","code":"Multimedia_Fun_0"},
{"keyCode":"Multimedia_Fun_1","functionType":"Multimedia","value":"Play/Pause","hid":1,"translate":"Play/Pause","code":"Multimedia_Fun_1"},
{"keyCode":"Multimedia_Fun_2","functionType":"Multimedia","value":"Next","hid":7,"translate":"Next","code":"Multimedia_Fun_2"},
{"keyCode":"Multimedia_Fun_3","functionType":"Multimedia","value":"Previous","hid":6,"translate":"Previous","code":"Multimedia_Fun_3"},
{"keyCode":"Multimedia_Fun_4","functionType":"Multimedia","value":"Stop","hid":5,"translate":"Stop","code":"Multimedia_Fun_4"},
{"keyCode":"Multimedia_Fun_5","functionType":"Multimedia","value":"Mute","hid":2,"translate":"Mute","code":"Multimedia_Fun_5"},
{"keyCode":"Multimedia_Fun_6","functionType":"Multimedia","value":"Volume up","hid":3,"translate":"Volume up","code":"Multimedia_Fun_6"},
{"keyCode":"Multimedia_Fun_7","functionType":"Multimedia","value":"Volume down","hid":4,"translate":"Volume down","code":"Multimedia_Fun_7"},
{"keyCode":"Multimedia_Fun_8","functionType":"Multimedia","value":"Next track","hid":7,"translate":"Next trac","code":"Multimedia_Fun_8"},
{"keyCode":"Multimedia_Fun_9","functionType":"Multimedia","value":"Previoustrack","hid":6,"translate":"Previoustrack","code":"Multimedia_Fun_9"},
{"keyCode":"KEYBOARD_Fun_10","functionType":"KEYBOARD","value":"Profilecycleup","hid":2,"translate":"Profilecycleup","code":"KEYBOARD_Fun_10"},
{"keyCode":"KEYBOARD_Fun_11","functionType":"KEYBOARD","value":"Profilecycledown","hid":1,"translate":"Profilecycledown","code":"KEYBOARD_Fun_11"},
{"keyCode":"KEYBOARD_Fun_12","functionType":"KEYBOARD","value":"Layercycleup","hid":4,"translate":"Layercycleup","code":"KEYBOARD_Fun_12"},
{"keyCode":"KEYBOARD_Fun_13","functionType":"KEYBOARD","value":"Layercycledown","hid":3,"translate":"Layercycledown","code":"KEYBOARD_Fun_13"},
{"keyCode":"MOUSE_Fun_14","functionType":"MOUSE","value":"Leftbutton","hid":1,"translate":"Leftbutton","code":"MOUSE_Fun_14"},
{"keyCode":"MOUSE_Fun_15","functionType":"MOUSE","value":"Rightbutton","hid":2,"translate":"Rightbutton","code":"MOUSE_Fun_15"},
{"keyCode":"MOUSE_Fun_16","functionType":"MOUSE","value":"Middlebutton","hid":3,"translate":"Middlebutton","code":"MOUSE_Fun_16"},
{"keyCode":"MOUSE_Fun_17","functionType":"MOUSE","value":"Forward","hid":5,"translate":"Forward","code":"MOUSE_Fun_17"},
{"keyCode":"MOUSE_Fun_18","functionType":"MOUSE","value":"Back","hid":4,"translate":"Back","code":"MOUSE_Fun_18"},
{"keyCode":"MOUSE_Fun_19","functionType":"MOUSE","value":"Scrollup","hid":6,"translate":"Scrollup","code":"MOUSE_Fun_19"},
{"keyCode":"MOUSE_Fun_20","functionType":"MOUSE","value":"Scrolldown","hid":7,"translate":"Scrolldown","code":"MOUSE_Fun_20"},
{"keyCode":"MOUSE_Fun_21","functionType":"MOUSE","value":"Profilecycleup","hid":1944,"translate":"Profilecycleup","code":"MOUSE_Fun_21"},
{"keyCode":"MOUSE_Fun_22","functionType":"MOUSE","value":"Profilecycledown","hid":1943,"translate":"Profilecycledown","code":"MOUSE_Fun_22"},
{"keyCode":"MOUSE_Fun_23","functionType":"MOUSE","value":"Batterystatuscheck","hid":1942,"translate":"Batterystatuscheck","code":"MOUSE_Fun_23"},
{"keyCode":"LaunchProgram","functionType":"LaunchProgram","value":"LaunchProgram","hid":1941,"translate":"LaunchProgram","code":"LaunchProgram"},
{"keyCode":"LaunchWebsite","functionType":"LaunchProgram","value":"LaunchWebsite","hid":1940,"translate":"LaunchWebsite","code":"LaunchWebsite"},
{"keyCode":"Shortcuts_Fun_25","functionType":"Shortcuts","value":"Email","hid":17,"translate":"Email","code":"Shortcuts_Fun_25"},
{"keyCode":"Shortcuts_Fun_26","functionType":"Shortcuts","value":"Calculator","hid":16,"translate":"Calculator","code":"Shortcuts_Fun_26"},
{"keyCode":"Shortcuts_Fun_27","functionType":"Shortcuts","value":"My Computer","hid":15,"translate":"My Computer","code":"Shortcuts_Fun_27"},
{"keyCode":"Shortcuts_Fun_28","functionType":"Shortcuts","value":"Explorer","hid":15,"translate":"Explorer","code":"Shortcuts_Fun_28"},
{"keyCode":"Shortcuts_Fun_29","functionType":"Shortcuts","value":"WWW Home","hid":8,"translate":"WWW Home","code":"Shortcuts_Fun_29"},
{"keyCode":"Shortcuts_Fun_30","functionType":"Shortcuts","value":"WWW Refresh","hid":9,"translate":"WWW Refresh","code":"Shortcuts_Fun_30"},
{"keyCode":"Shortcuts_Fun_31","functionType":"Shortcuts","value":"WWW Stop","hid":10,"translate":"WWW Stop","code":"Shortcuts_Fun_31"},
{"keyCode":"Shortcuts_Fun_32","functionType":"Shortcuts","value":"WWW Back","hid":11,"translate":"WWW Back","code":"Shortcuts_Fun_32"},
{"keyCode":"Shortcuts_Fun_33","functionType":"Shortcuts","value":"WWW Forward","hid":12,"translate":"WWW Forward","code":"Shortcuts_Fun_33"},
{"keyCode":"Shortcuts_Fun_34","functionType":"Shortcuts","value":"WWW Search","hid":14,"translate":"WWW Search","code":"Shortcuts_Fun_34"},
{"keyCode":"MacroFunction","functionType":"MacroFunction","value":"MacroFunction","hid":1923,"translate":"MacroFunction","code":"MacroFunction"},
{"keyCode":"ScrollWheel","functionType":"ScrollWheel","value":"Volume","hid":1922,"translate":"ScrollWheel","code":"ScrollWheel"},
{"keyCode":"Custom_Fnkey","functionType":"Custom_Fnkey","value":"FN","hid":"0x781","translate":"FN","code":"Custom_Fnkey"},
{"keyCode":"0","functionType":"Singlekey","value":"Left Click","hid":0xB0,"hid_ModelO:":0x01,"translate":"Left Click","code":"0"},
{"keyCode":"1","functionType":"Singlekey","value":"Scroll Click","hid":0xB2,"hid_ModelO:":0x03,"translate":"Scroll Click","code":"1"},
{"keyCode":"2","functionType":"Singlekey","value":"Right Click","hid":0xB1,"hid_ModelO:":0x02,"translate":"Right Click","code":"2"},
{"keyCode":"3","functionType":"Singlekey","value":"Back Key","hid": 0xB3,"hid_ModelO": 0x02, "translate":"Back Key","code":"3"},
{"keyCode":"4","functionType":"Singlekey","value":"Forward Key","hid": 0xB4,"hid_ModelO": 0x02,"translate":"Forward Key","code":"4"},
{"keyCode":"65","functionType":"Singlekey","value":"A","hid":0x04,"translate":"A","code":"KeyA"},
{"keyCode":"66","functionType":"Singlekey","value":"B","hid":0x05,"translate":"B","code":"KeyB"},
{"keyCode":"67","functionType":"Singlekey","value":"C","hid":0x06,"translate":"C","code":"KeyC"},
{"keyCode":"68","functionType":"Singlekey","value":"D","hid":0x07,"translate":"D","code":"KeyD"},
{"keyCode":"69","functionType":"Singlekey","value":"E","hid":0x08,"translate":"E","code":"KeyE"},
{"keyCode":"70","functionType":"Singlekey","value":"F","hid":0x09,"translate":"F","code":"KeyF"},
{"keyCode":"71","functionType":"Singlekey","value":"G","hid":0x0A,"translate":"G","code":"KeyG"},
{"keyCode":"72","functionType":"Singlekey","value":"H","hid":0x0B,"translate":"H","code":"KeyH"},
{"keyCode":"73","functionType":"Singlekey","value":"I","hid":0x0C,"translate":"I","code":"KeyI"},
{"keyCode":"74","functionType":"Singlekey","value":"J","hid":0x0D,"translate":"J","code":"KeyJ"},
{"keyCode":"75","functionType":"Singlekey","value":"K","hid":0x0E,"translate":"K","code":"KeyK"},
{"keyCode":"76","functionType":"Singlekey","value":"L","hid":0x0F,"translate":"L","code":"KeyL"},
{"keyCode":"77","functionType":"Singlekey","value":"M","hid":0x10,"translate":"M","code":"KeyM"},
{"keyCode":"78","functionType":"Singlekey","value":"N","hid":0x11,"translate":"N","code":"KeyN"},
{"keyCode":"79","functionType":"Singlekey","value":"O","hid":0x12,"translate":"O","code":"KeyO"},
{"keyCode":"80","functionType":"Singlekey","value":"P","hid":0x13,"translate":"P","code":"KeyP"},
{"keyCode":"81","functionType":"Singlekey","value":"Q","hid":0x14,"translate":"Q","code":"KeyQ"},
{"keyCode":"82","functionType":"Singlekey","value":"R","hid":0x15,"translate":"R","code":"KeyR"},
{"keyCode":"83","functionType":"Singlekey","value":"S","hid":0x16,"translate":"S","code":"KeyS"},
{"keyCode":"84","functionType":"Singlekey","value":"T","hid":0x17,"translate":"T","code":"KeyT"},
{"keyCode":"85","functionType":"Singlekey","value":"U","hid":0x18,"translate":"U","code":"KeyU"},
{"keyCode":"86","functionType":"Singlekey","value":"V","hid":0x19,"translate":"V","code":"KeyV"},
{"keyCode":"87","functionType":"Singlekey","value":"W","hid":0x1A,"translate":"W","code":"KeyW"},
{"keyCode":"88","functionType":"Singlekey","value":"X","hid":0x1B,"translate":"X","code":"KeyX"},
{"keyCode":"89","functionType":"Singlekey","value":"Y","hid":0x1C,"translate":"Y","code":"KeyY"},
{"keyCode":"90","functionType":"Singlekey","value":"Z","hid":0x1D,"translate":"Z","code":"KeyZ"},
{"keyCode":"48","functionType":"Singlekey","value":"0","hid":0x27,"translate":"0","code":"Digit0"},
{"keyCode":"49","functionType":"Singlekey","value":"1","hid":0x1E,"translate":"1","code":"Digit1"},
{"keyCode":"50","functionType":"Singlekey","value":"2","hid":0x1F,"translate":"2","code":"Digit2"},
{"keyCode":"51","functionType":"Singlekey","value":"3","hid":0x20,"translate":"3","code":"Digit3"},
{"keyCode":"52","functionType":"Singlekey","value":"4","hid":0x21,"translate":"4","code":"Digit4"},
{"keyCode":"53","functionType":"Singlekey","value":"5","hid":0x22,"translate":"5","code":"Digit5"},
{"keyCode":"54","functionType":"Singlekey","value":"6","hid":0x23,"translate":"6","code":"Digit6"},
{"keyCode":"55","functionType":"Singlekey","value":"7","hid":0x24,"translate":"7","code":"Digit7"},
{"keyCode":"56","functionType":"Singlekey","value":"8","hid":0x25,"translate":"8","code":"Digit8"},
{"keyCode":"57","functionType":"Singlekey","value":"9","hid":0x26,"translate":"9","code":"Digit9"},
{"keyCode":"8","functionType":"Singlekey","value":"Backspace","hid":42,"translate":"Backspace","code":"Backspace"},
{"keyCode":"9","functionType":"Singlekey","value":"Tab","hid":43,"translate":"Tab","code":"Tab"},
{"keyCode":"144","functionType":"Singlekey","value":"Num Lock","hid":83,"translate":"Num Lock","code":"NumLock"},
{"keyCode":"13","functionType":"Singlekey","value":"Enter","hid":40,"translate":"Enter","code":"Enter"},
{"keyCode":"16","functionType":"Singlekey","value":"Shift","hid":225,"translate":"Shift","code":"ShiftRight"},
{"keyCode":"16","functionType":"Singlekey","value":"Shift","hid":225,"translate":"Shift","code":"ShiftLeft"},
{"keyCode":"17","functionType":"Singlekey","value":"Ctrl","hid":224,"translate":"Ctrl","code":"ControlLeft"},
{"keyCode":"17","functionType":"Singlekey","value":"Ctrl","hid":224,"translate":"Ctrl","code":"ControlRight"},
{"keyCode":"18","functionType":"Singlekey","value":"Alt","hid":226,"translate":"Alt","code":"AltRight"},
{"keyCode":"18","functionType":"Singlekey","value":"Alt","hid":226,"translate":"Alt","code":"AltLeft"},
{"keyCode":"19","functionType":"Singlekey","value":"Break","hid":72,"translate":"Break","code":"Pause"},
{"keyCode":"20","functionType":"Singlekey","value":"CapsLock","hid":57,"translate":"CapsLock","code":"CapsLock"},
{"keyCode":"27","functionType":"Singlekey","value":"Esc","hid":41,"translate":"Esc","code":"Escape"},
{"keyCode":"32","functionType":"Singlekey","value":"Space","hid":44,"translate":"Space","code":"Space"},
{"keyCode":"33","functionType":"Singlekey","value":"PageUp","hid":75,"translate":"PageUp","code":"PageUp"},
{"keyCode":"34","functionType":"Singlekey","value":"PageDown","hid":78,"translate":"PageDown","code":"PageDown"},
{"keyCode":"35","functionType":"Singlekey","value":"End","hid":77,"translate":"End","code":"End"},
{"keyCode":"36","functionType":"Singlekey","value":"Home","hid":74,"translate":"Home","code":"Home"},
{"keyCode":"37","functionType":"Singlekey","value":"Left","hid":80,"translate":"Left","code":"ArrowLeft"},
{"keyCode":"38","functionType":"Singlekey","value":"Up","hid":82,"translate":"Up","code":"ArrowUp"},
{"keyCode":"39","functionType":"Singlekey","value":"Right","hid":79,"translate":"Right","code":"ArrowRight"},
{"keyCode":"40","functionType":"Singlekey","value":"Down","hid":81,"translate":"Down","code":"ArrowDown"},
{"keyCode":"44","functionType":"Singlekey","value":"PrintScreen","hid":"0x46","translate":"PrintScreen","code":"PrintScreen"},
{"keyCode":"45","functionType":"Singlekey","value":"Insert","hid":73,"translate":"Insert","code":"Insert"},
{"keyCode":"46","functionType":"Singlekey","value":"Delete","hid":76,"translate":"Delete","code":"Delete"},
{"keyCode":"91","functionType":"Singlekey","value":"Left Win","hid":227,"translate":"Left Win","code":"MetaLeft"},
{"keyCode":"92","functionType":"Singlekey","value":"Right Win","hid":231,"Modifier":0x80,"translate":"Right Win","code":"MetaRight"},
{"keyCode":"93","functionType":"Singlekey","value":"Menu","hid":101,"translate":"Menu","code":"ContextMenu"},
{"keyCode":"96","functionType":"Singlekey","value":"Numpad0","hid":0x62,"translate":"Numpad0","code":"Numpad0"},
{"keyCode":"97","functionType":"Singlekey","value":"Numpad1","hid":0x59,"translate":"Numpad1","code":"Numpad1"},
{"keyCode":"98","functionType":"Singlekey","value":"Numpad2","hid":0x5a,"translate":"Numpad2","code":"Numpad2"},
{"keyCode":"99","functionType":"Singlekey","value":"Numpad3","hid":0x5b,"translate":"Numpad3","code":"Numpad3"},
{"keyCode":"100","functionType":"Singlekey","value":"Numpad4","hid":0x5c,"translate":"Numpad4","code":"Numpad4"},
{"keyCode":"101","functionType":"Singlekey","value":"Numpad5","hid":0x5d,"translate":"Numpad5","code":"Numpad5"},
{"keyCode":"102","functionType":"Singlekey","value":"Numpad6","hid":0x5e,"translate":"Numpad6","code":"Numpad6"},
{"keyCode":"103","functionType":"Singlekey","value":"Numpad7","hid":0x5f,"translate":"Numpad7","code":"Numpad7"},
{"keyCode":"104","functionType":"Singlekey","value":"Numpad8","hid":0x60,"translate":"Numpad8","code":"Numpad8"},
{"keyCode":"105","functionType":"Singlekey","value":"Numpad9","hid":0x61,"translate":"Numpad9","code":"Numpad9"},
{"keyCode":"13","functionType":"Singlekey","value":"NumpadEnter","hid":0x58,"translate":"NumpadEnter","code":"NumpadEnter"},
{"keyCode":"106","functionType":"Singlekey","value":"*","hid":85,"translate":"*","code":"NumpadMultiply"},
{"keyCode":"107","functionType":"Singlekey","value":"+","hid":87,"translate":"+","code":"NumpadAdd"},
{"keyCode":"109","functionType":"Singlekey","value":"-","hid":86,"translate":"-","code":"NumpadSubtract"},
{"keyCode":"110","functionType":"Singlekey","value":".","hid":0x63,"translate":".","code":"NumpadDecimal"},
{"keyCode":"111","functionType":"Singlekey","value":"/","hid":84,"translate":"/","code":"NumpadDivide"},
{"keyCode":"112","functionType":"Singlekey","value":"F1","hid":0x3A,"translate":"F1","code":"F1"},
{"keyCode":"113","functionType":"Singlekey","value":"F2","hid":0x3B,"translate":"F2","code":"F2"},
{"keyCode":"114","functionType":"Singlekey","value":"F3","hid":0x3C,"translate":"F3","code":"F3"},
{"keyCode":"115","functionType":"Singlekey","value":"F4","hid":0x3D,"translate":"F4","code":"F4"},
{"keyCode":"116","functionType":"Singlekey","value":"F5","hid":0x3E,"translate":"F5","code":"F5"},
{"keyCode":"117","functionType":"Singlekey","value":"F6","hid":0x3F,"translate":"F6","code":"F6"},
{"keyCode":"118","functionType":"Singlekey","value":"F7","hid":0x40,"translate":"F7","code":"F7"},
{"keyCode":"119","functionType":"Singlekey","value":"F8","hid":0x41,"translate":"F8","code":"F8"},
{"keyCode":"120","functionType":"Singlekey","value":"F9","hid":0x42,"translate":"F9","code":"F9"},
{"keyCode":"121","functionType":"Singlekey","value":"F10","hid":0x43,"translate":"F10","code":"F10"},
{"keyCode":"122","functionType":"Singlekey","value":"F11","hid":0x44,"translate":"F11","code":"F11"},
{"keyCode":"123","functionType":"Singlekey","value":"F12","hid":0x45,"translate":"F12","code":"F12"},
{"keyCode":"145","functionType":"Singlekey","value":"Scroll Lock","hid":71,"translate":"Scroll Lock","code":"ScrollLock"},
{"keyCode":"186","functionType":"Singlekey","value":";","hid":51,"translate":";","code":"Semicolon"},
{"keyCode":"187","functionType":"Singlekey","value":"=","hid":46,"translate":"=","code":"Equal"},
{"keyCode":"188","functionType":"Singlekey","value":",","hid":54,"translate":",","code":"Comma"},
{"keyCode":"189","functionType":"Singlekey","value":"-","hid":45,"translate":"-","code":"Minus"},
{"keyCode":"190","functionType":"Singlekey","value":"dot","hid":55,"translate":"dot","code":"Period"},
{"keyCode":"191","functionType":"Singlekey","value":"/","hid":56,"translate":"/","code":"Slash"},
{"keyCode":"192","functionType":"Singlekey","value":"~","hid":53,"translate":"~","code":"Backquote"},
{"keyCode":"219","functionType":"Singlekey","value":"[","hid":47,"translate":"[","code":"BracketLeft"},
{"keyCode":"220","functionType":"Singlekey","value":"|","hid":49,"translate":"|","code":"Backslash"},
{"keyCode":"226","functionType":"Singlekey","value":"\\","hid":49,"translate":"IntlBackslash","code":"IntlBackslash"},
{"keyCode":"221","functionType":"Singlekey","value":"]","hid":48,"translate":"]","code":"BracketRight"},
{"keyCode":"222","functionType":"Singlekey","value":"'","hid":52,"translate":"'","code":"Quote"}]


exports.KeyMapping = KeyMapping
exports.MediaMapping = MediaMapping
exports.WindowsMapping = WindowsMapping
exports.AllFunctionMapping = AllFunctionMapping
exports.Shortcuts_WindowsMapping = Shortcuts_WindowsMapping
exports.SupportLanguage = SupportLanguage

function ProfileDefault() {
    var Profile_Info_Default = {
        //ProfileID:1,
        MousePerformance: {
            iStage: 1,
            iXYSync: 2,
            iPollingRate: 500,
            iCalibration: 1,
        },
        MouseLighting: {
            Amplitude: 2500,
            Angle: 1,
            bQuickEffect: false,
            ColorNumber: 5,
            Decay: 50,
            Fire: 5,
            iBrightness: 50,
            iEffect: 1,
            iSpeed: 50,
            Width: 3,
        },
        MouseBtnList: [
            { id: 1, group: 1, function: 1, name: 'Left button' },
            { id: 2, group: 1, function: 2, name: 'Right button' },
            { id: 3, group: 1, function: 3, name: 'Middle button' },
            { id: 4, group: 4, function: 1, name: 'Lighting effect switch' },
            { id: 5, group: 1, function: 10, name: 'DPI increase loop' },
            { id: 6, group: 1, function: 4, name: 'Forward button' },
            { id: 7, group: 1, function: 5, name: 'Backward button' },
            { id: 8, group: 1, function: 13, name: 'Squeeze' },
        ],
    }
    return Profile_Info_Default
}
exports.ProfileDefault = ProfileDefault

var CountryCode = [
    { code: 'AF', value: 'Afghanistan' },
    { code: 'AX', value: 'Åland Islands' },
    { code: 'AL', value: 'Albania' },
    { code: 'DZ', value: 'Algeria' },
    { code: 'AS', value: 'American Samoa' },
    { code: 'AD', value: 'Andorra' },
    { code: 'AO', value: 'Angola' },
    { code: 'AI', value: 'Anguilla' },
    { code: 'AQ', value: 'Antarctica' },
    { code: 'AG', value: 'Antigua and Barbuda' },
    { code: 'AR', value: 'Argentina' },
    { code: 'AM', value: 'Armenia' },
    { code: 'AW', value: 'Aruba' },
    { code: 'AU', value: 'Australia' },
    { code: 'AT', value: 'Austria' },
    { code: 'AZ', value: 'Azerbaijan' },
    { code: 'BS', value: 'Bahamas' },
    { code: 'BH', value: 'Bahrain' },
    { code: 'BD', value: 'Bangladesh' },
    { code: 'BB', value: 'Barbados' },
    { code: 'BY', value: 'Belarus' },
    { code: 'BE', value: 'Belgium' },
    { code: 'BZ', value: 'Belize' },
    { code: 'BJ', value: 'Benin' },
    { code: 'BM', value: 'Bermuda' },
    { code: 'BT', value: 'Bhutan' },
    { code: 'BO', value: 'Bolivia, Plurinational State of' },
    { code: 'BQ', value: 'Bonaire, Sint Eustatius and Saba' },
    { code: 'BA', value: 'Bosnia and Herzegovina' },
    { code: 'BW', value: 'Botswana' },
    { code: 'BV', value: 'Bouvet Island' },
    { code: 'BR', value: 'Brazil' },
    { code: 'IO', value: 'British Indian Ocean Territory' },
    { code: 'BN', value: 'Brunei Darussalam' },
    { code: 'BG', value: 'Bulgaria' },
    { code: 'BF', value: 'Burkina Faso' },
    { code: 'BI', value: 'Burundi' },
    { code: 'KH', value: 'Cambodia' },
    { code: 'CM', value: 'Cameroon' },
    { code: 'CA', value: 'Canada' },
    { code: 'CV', value: 'Cape Verde' },
    { code: 'KY', value: 'Cayman Islands' },
    { code: 'CF', value: 'Central African Republic' },
    { code: 'TD', value: 'Chad' },
    { code: 'CL', value: 'Chile' },
    { code: 'CN', value: 'China' },
    { code: 'CX', value: 'Christmas Island' },
    { code: 'CC', value: 'Cocos (Keeling) Islands' },
    { code: 'CO', value: 'Colombia' },
    { code: 'KM', value: 'Comoros' },
    { code: 'CG', value: 'Congo' },
    { code: 'CD', value: 'Congo, the Democratic Republic of the' },
    { code: 'CK', value: 'Cook Islands' },
    { code: 'CR', value: 'Costa Rica' },
    { code: 'CI', value: "Côte d'Ivoire" },
    { code: 'HR', value: 'Croatia' },
    { code: 'CU', value: 'Cuba' },
    { code: 'CW', value: 'Curaçao' },
    { code: 'CY', value: 'Cyprus' },
    { code: 'CZ', value: 'Czech Republic' },
    { code: 'DK', value: 'Denmark' },
    { code: 'DJ', value: 'Djibouti' },
    { code: 'DM', value: 'Dominica' },
    { code: 'DO', value: 'Dominican Republic' },
    { code: 'EC', value: 'Ecuador' },
    { code: 'EG', value: 'Egypt' },
    { code: 'SV', value: 'El Salvador' },
    { code: 'GQ', value: 'Equatorial Guinea' },
    { code: 'ER', value: 'Eritrea' },
    { code: 'EE', value: 'Estonia' },
    { code: 'ET', value: 'Ethiopia' },
    { code: 'FK', value: 'Falkland Islands (Malvinas)' },
    { code: 'FO', value: 'Faroe Islands' },
    { code: 'FJ', value: 'Fiji' },
    { code: 'FI', value: 'Finland' },
    { code: 'FR', value: 'France' },
    { code: 'GF', value: 'French Guiana' },
    { code: 'PF', value: 'French Polynesia' },
    { code: 'TF', value: 'French Southern Territories' },
    { code: 'GA', value: 'Gabon' },
    { code: 'GM', value: 'Gambia' },
    { code: 'GE', value: 'Georgia' },
    { code: 'DE', value: 'Germany' },
    { code: 'GH', value: 'Ghana' },
    { code: 'GI', value: 'Gibraltar' },
    { code: 'GR', value: 'Greece' },
    { code: 'GL', value: 'Greenland' },
    { code: 'GD', value: 'Grenada' },
    { code: 'GP', value: 'Guadeloupe' },
    { code: 'GU', value: 'Guam' },
    { code: 'GT', value: 'Guatemala' },
    { code: 'GG', value: 'Guernsey' },
    { code: 'GN', value: 'Guinea' },
    { code: 'GW', value: 'Guinea-Bissau' },
    { code: 'GY', value: 'Guyana' },
    { code: 'HT', value: 'Haiti' },
    { code: 'HM', value: 'Heard Island and McDonald Islands' },
    { code: 'VA', value: 'Holy See (Vatican City State)' },
    { code: 'HN', value: 'Honduras' },
    { code: 'HK', value: 'Hong Kong' },
    { code: 'HU', value: 'Hungary' },
    { code: 'IS', value: 'Iceland' },
    { code: 'IN', value: 'India' },
    { code: 'ID', value: 'Indonesia' },
    { code: 'IR', value: 'Iran, Islamic Republic of' },
    { code: 'IQ', value: 'Iraq' },
    { code: 'IE', value: 'Ireland' },
    { code: 'IM', value: 'Isle of Man' },
    { code: 'IL', value: 'Israel' },
    { code: 'IT', value: 'Italy' },
    { code: 'JM', value: 'Jamaica' },
    { code: 'JP', value: 'Japan' },
    { code: 'JE', value: 'Jersey' },
    { code: 'JO', value: 'Jordan' },
    { code: 'KZ', value: 'Kazakhstan' },
    { code: 'KE', value: 'Kenya' },
    { code: 'KI', value: 'Kiribati' },
    { code: 'KP', value: "Korea, Democratic People's Republic of" },
    { code: 'KR', value: 'Korea, Republic of' },
    { code: 'KW', value: 'Kuwait' },
    { code: 'KG', value: 'Kyrgyzstan' },
    { code: 'LA', value: "Lao People's Democratic Republic" },
    { code: 'LV', value: 'Latvia' },
    { code: 'LB', value: 'Lebanon' },
    { code: 'LS', value: 'Lesotho' },
    { code: 'LR', value: 'Liberia' },
    { code: 'LY', value: 'Libya' },
    { code: 'LI', value: 'Liechtenstein' },
    { code: 'LT', value: 'Lithuania' },
    { code: 'LU', value: 'Luxembourg' },
    { code: 'MO', value: 'Macao' },
    { code: 'MK', value: 'Macedonia, the former Yugoslav Republic of' },
    { code: 'MG', value: 'Madagascar' },
    { code: 'MW', value: 'Malawi' },
    { code: 'MY', value: 'Malaysia' },
    { code: 'MV', value: 'Maldives' },
    { code: 'ML', value: 'Mali' },
    { code: 'MT', value: 'Malta' },
    { code: 'MH', value: 'Marshall Islands' },
    { code: 'MQ', value: 'Martinique' },
    { code: 'MR', value: 'Mauritania' },
    { code: 'MU', value: 'Mauritius' },
    { code: 'YT', value: 'Mayotte' },
    { code: 'MX', value: 'Mexico' },
    { code: 'FM', value: 'Micronesia, Federated States of' },
    { code: 'MD', value: 'Moldova, Republic of' },
    { code: 'MC', value: 'Monaco' },
    { code: 'MN', value: 'Mongolia' },
    { code: 'ME', value: 'Montenegro' },
    { code: 'MS', value: 'Montserrat' },
    { code: 'MA', value: 'Morocco' },
    { code: 'MZ', value: 'Mozambique' },
    { code: 'MM', value: 'Myanmar' },
    { code: 'NA', value: 'Namibia' },
    { code: 'NR', value: 'Nauru' },
    { code: 'NP', value: 'Nepal' },
    { code: 'NL', value: 'Netherlands' },
    { code: 'NC', value: 'New Caledonia' },
    { code: 'NZ', value: 'New Zealand' },
    { code: 'NI', value: 'Nicaragua' },
    { code: 'NE', value: 'Niger' },
    { code: 'NG', value: 'Nigeria' },
    { code: 'NU', value: 'Niue' },
    { code: 'NF', value: 'Norfolk Island' },
    { code: 'MP', value: 'Northern Mariana Islands' },
    { code: 'NO', value: 'Norway' },
    { code: 'OM', value: 'Oman' },
    { code: 'PK', value: 'Pakistan' },
    { code: 'PW', value: 'Palau' },
    { code: 'PS', value: 'Palestinian Territory, Occupied' },
    { code: 'PA', value: 'Panama' },
    { code: 'PG', value: 'Papua New Guinea' },
    { code: 'PY', value: 'Paraguay' },
    { code: 'PE', value: 'Peru' },
    { code: 'PH', value: 'Philippines' },
    { code: 'PN', value: 'Pitcairn' },
    { code: 'PL', value: 'Poland' },
    { code: 'PT', value: 'Portugal' },
    { code: 'PR', value: 'Puerto Rico' },
    { code: 'QA', value: 'Qatar' },
    { code: 'RE', value: 'Réunion' },
    { code: 'RO', value: 'Romania' },
    { code: 'RU', value: 'Russian Federation' },
    { code: 'RW', value: 'Rwanda' },
    { code: 'BL', value: 'Saint Barthélemy' },
    { code: 'SH', value: 'Saint Helena, Ascension and Tristan da Cunha' },
    { code: 'KN', value: 'Saint Kitts and Nevis' },
    { code: 'LC', value: 'Saint Lucia' },
    { code: 'MF', value: 'Saint Martin (French part)' },
    { code: 'PM', value: 'Saint Pierre and Miquelon' },
    { code: 'VC', value: 'Saint Vincent and the Grenadines' },
    { code: 'WS', value: 'Samoa' },
    { code: 'SM', value: 'San Marino' },
    { code: 'ST', value: 'Sao Tome and Principe' },
    { code: 'SA', value: 'Saudi Arabia' },
    { code: 'SN', value: 'Senegal' },
    { code: 'RS', value: 'Serbia' },
    { code: 'SC', value: 'Seychelles' },
    { code: 'SL', value: 'Sierra Leone' },
    { code: 'SG', value: 'Singapore' },
    { code: 'SX', value: 'Sint Maarten (Dutch part)' },
    { code: 'SK', value: 'Slovakia' },
    { code: 'SI', value: 'Slovenia' },
    { code: 'SB', value: 'Solomon Islands' },
    { code: 'SO', value: 'Somalia' },
    { code: 'ZA', value: 'South Africa' },
    { code: 'GS', value: 'South Georgia and the South Sandwich Islands' },
    { code: 'SS', value: 'South Sudan' },
    { code: 'ES', value: 'Spain' },
    { code: 'LK', value: 'Sri Lanka' },
    { code: 'SD', value: 'Sudan' },
    { code: 'SR', value: 'Suriname' },
    { code: 'SJ', value: 'Svalbard and Jan Mayen' },
    { code: 'SZ', value: 'Swaziland' },
    { code: 'SE', value: 'Sweden' },
    { code: 'CH', value: 'Switzerland' },
    { code: 'SY', value: 'Syrian Arab Republic' },
    { code: 'TW', value: 'Taiwan, Province of China' },
    { code: 'TJ', value: 'Tajikistan' },
    { code: 'TZ', value: 'Tanzania, United Republic of' },
    { code: 'TH', value: 'Thailand' },
    { code: 'TL', value: 'Timor-Leste' },
    { code: 'TG', value: 'Togo' },
    { code: 'TK', value: 'Tokelau' },
    { code: 'TO', value: 'Tonga' },
    { code: 'TT', value: 'Trinidad and Tobago' },
    { code: 'TN', value: 'Tunisia' },
    { code: 'TR', value: 'Turkey' },
    { code: 'TM', value: 'Turkmenistan' },
    { code: 'TC', value: 'Turks and Caicos Islands' },
    { code: 'TV', value: 'Tuvalu' },
    { code: 'UG', value: 'Uganda' },
    { code: 'UA', value: 'Ukraine' },
    { code: 'AE', value: 'United Arab Emirates' },
    { code: 'GB', value: 'United Kingdom' },
    { code: 'US', value: 'United States' },
    { code: 'UM', value: 'United States Minor Outlying Islands' },
    { code: 'UY', value: 'Uruguay' },
    { code: 'UZ', value: 'Uzbekistan' },
    { code: 'VU', value: 'Vanuatu' },
    { code: 'VE', value: 'Venezuela, Bolivarian Republic of' },
    { code: 'VN', value: 'Viet Nam' },
    { code: 'VG', value: 'Virgin Islands, British' },
    { code: 'VI', value: 'Virgin Islands, U.S.' },
    { code: 'WF', value: 'Wallis and Futuna' },
    { code: 'EH', value: 'Western Sahara' },
    { code: 'YE', value: 'Yemen' },
    { code: 'ZM', value: 'Zambia' },
    { code: 'ZW', value: 'Zimbabwe' },
]

exports.CountryCode = CountryCode


/***/ }),

/***/ "./src/environments/environment.ts":
/*!*****************************************!*\
  !*** ./src/environments/environment.ts ***!
  \*****************************************/
/*! exports provided: environment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "environment", function() { return environment; });
// This file can be replaced during build by using the `fileReplacements` array.
// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.
var environment = {
    production: false
};
/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/dist/zone-error';  // Included with Angular CLI.


/***/ }),

/***/ "./src/i18n/i18n_Localization.js":
/*!***************************************!*\
  !*** ./src/i18n/i18n_Localization.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var i18n_Localization ={"connectionLimit":{"EN":[true,true,true,true,true,true,false,false],"CH":[false,false,true,true,true,false,true,true],"CN":[false,false,true,true,true,false,true,true]},"SLEEP":{"EN":"sleep","CH":"休眠","CN":"休眠"},"WINKEYSETTING":{"EN":"win key setting","CH":"Win鍵設定","CN":"Win键设定"},"ARROWKEYSWITCH":{"EN":"arrow key switch","CH":"方向切換","CN":"方向切换"},"MACROTYPE":{"EN":"Macro type","CH":"宏類別","CN":"宏类别"},"MACRONAME":{"EN":"Macro name","CH":"宏名稱","CN":"宏名称"},"MACRO":{"EN":"Macro","CH":"宏檔案","CN":"宏档案"},"DELAYMODE":{"EN":"Delay mode","CH":"延遲模式","CN":"延迟模式"},"DELAYRECORD":{"EN":"Delay record","CH":"紀錄延遲","CN":"纪录延迟"},"FIVEMINDELAY":{"EN":"5ms min delay","CH":"最低延遲5ms","CN":"最低延迟5ms"},"MSDELAY":{"EN":"Ms delay","CH":"ms延遲","CN":"ms延迟"},"RELEASETOSTOP":{"EN":"Release to stop","CH":"鬆開停止","CN":"松开停止"},"PRESSAGAINTOSTOP":{"EN":"Press again to stop","CH":"再次按下停止","CN":"再次按下停止"},"TIMESTOSTOP":{"EN":"Times to stop","CH":"次後停止","CN":"次后停止"},"NO_":{"EN":"No_","CH":"編號","CN":"编号"},"NAME":{"EN":"Name","CH":"名稱","CN":"名称"},"MS100":{"EN":"100ms","CH":"百毫秒","CN":"百毫秒"},"EFFECT":{"EN":"Effect","CH":"效果","CN":"效果"},"COLORSETTING":{"EN":"Color Set","CH":"顏色配置","CN":"颜色配置"},"LIGHTINGSPEED":{"EN":"Lightingspeed","CH":"顏色速度","CN":"颜色速度"},"DEFAULT":{"EN":"Default","CH":"預設","CN":"预设"},"SETTING":{"EN":"Setting","CH":"設置","CN":"设置"},"LANGUAGES":{"EN":"Languages","CH":"語言","CN":"语言"},"SAVE":{"EN":"Save","CH":"保存","CN":"保存"},"CANCEL":{"EN":"Cancel","CH":"取消","CN":"取消"},"VERSION":{"EN":"Version","CH":"版本","CN":"版本"},"UPDATE":{"EN":"Update","CH":"更新","CN":"更新"},"AUTOSTART":{"EN":"Run Software When Windows Starts","CH":"開機自動啟動","CN":"开机自动启动"},"FactoryReset":{"EN":"DEFAULT","CH":"恢復原廠設置","CN":"恢复原厂设置"},"HASNEWVERSION":{"EN":"New Updates","CH":"有新版本","CN":"有新版本"},"CONFIGURATION":{"EN":"Setting","CH":"配置","CN":"配置"},"LIGHTINGSETTING":{"EN":"Lighting Setting","CH":"顏色設置","CN":"颜色设置"},"MACROSETTINGS":{"EN":"Macro Setting","CH":"宏設置","CN":"宏设置"},"KEYBOARDSETTINGS":{"EN":"Keyboard Setting","CH":"按鍵設置","CN":"按键设置"},"RELATEDPROGRAM":{"EN":"Related Program","CH":"關聯程序","CN":"关联程序"},"CSUTOMEDIT":{"EN":"Edit","CH":"高級編輯","CN":"高级编辑"},"DEVICE":{"EN":"Device","CH":"添加設備","CN":"添加设备"},"CREATE":{"EN":"Create","CH":"新增","CN":"新增"},"DELETE":{"EN":"Delete","CH":"刪除","CN":"删除"},"EDIT":{"EN":"Edit","CH":"編輯","CN":"编辑"},"COPY":{"EN":"Copy","CH":"複製","CN":"复制"},"EXPORT":{"EN":"Export","CH":"匯出","CN":"汇出"},"IMPORT":{"EN":"Import","CH":"匯入","CN":"汇入"},"MOVEUP":{"EN":"Moveup","CH":"上移","CN":"上移"},"MOVEDOWN":{"EN":"Movedown","CH":"下移","CN":"下移"},"RECORDANDSTOPMACRO":{"EN":"Start/Stop","CH":"錄製/停止","CN":"录制/停止"},"HARDWARECONFIGURATION":{"EN":"Hardware","CH":"硬體配置","CN":"硬体配置"},"FUNCTION":{"EN":"Function","CH":"基礎功能","CN":"基础功能"},"NUM":{"EN":"Num","CH":"數字鍵區","CN":"数字键区"},"MEDIA":{"EN":"Media","CH":"多媒體","CN":"多媒体"},"SYSTEM":{"EN":"System","CH":"系統網路","CN":"系统网络"},"MOUSE":{"EN":"Mouse","CH":"滑鼠","CN":"鼠标"},"DISABLE":{"EN":"Disable","CH":"禁用","CN":"禁用"},"LAYER":{"EN":"Layer","CH":"層順時開關","CN":"层顺时开关"},"COMPLEX":{"EN":"Complex","CH":"組合鍵","CN":"组合键"},"MEDIAPLAYER":{"EN":"Mediaplayer","CH":"媒體播放器","CN":"媒体播放器"},"PLAYPAUSE":{"EN":"Play/pause","CH":"播放/暫停","CN":"播放/暂停"},"PREVIOUS":{"EN":"Previous","CH":"上一曲","CN":"上一曲"},"STOP":{"EN":"Stop","CH":"停止","CN":"停止"},"NEXT":{"EN":"Next","CH":"下一曲","CN":"下一曲"},"VOLUMEUP":{"EN":"Volumeup","CH":"音量加","CN":"音量加"},"VOLUMEDOWN":{"EN":"Volumedown","CH":"音量減","CN":"音量减"},"MUTE":{"EN":"Mute","CH":"靜音","CN":"静音"},"PAGEBACK":{"EN":"Pageback","CH":"瀏覽器後退","CN":"浏览器后退"},"PAGEFORWARD":{"EN":"Pageforward","CH":"瀏覽器前進","CN":"浏览器前进"},"REFRESHPAGE":{"EN":"Refreshpage","CH":"瀏覽器刷新","CN":"浏览器刷新"},"BROWSERCOLLECT":{"EN":"Collectpage","CH":"瀏覽器收藏","CN":"浏览器收藏"},"HOMEPAGE":{"EN":"Homepage","CH":"瀏覽器主頁","CN":"浏览器主页"},"EMAIL":{"EN":"Email","CH":"Email","CN":"Email"},"MYCOMPUTER":{"EN":"Mycomputer","CH":"我的電腦","CN":"我的电脑"},"PASTE":{"EN":"Paste","CH":"黏貼","CN":"黏贴"},"LEFTCLICK":{"EN":"Leftclick","CH":"單擊左建","CN":"单击左建"},"RIGHTCLICK":{"EN":"Rightclick","CH":"單擊右鍵","CN":"单击右键"},"SCROLLCLICK":{"EN":"Scrollclick","CH":"單擊滾輪","CN":"单击滚轮"},"BACK":{"EN":"Back","CH":"後退","CN":"后退"},"FORWARD":{"EN":"Forward","CH":"前進","CN":"前进"},"DISABLEALL":{"EN":"Disableall","CH":"禁用全部","CN":"禁用全部"},"UNDISABLE":{"EN":"Un-disable","CH":"取消禁用","CN":"取消禁用"},"DISABLENUMKEYS":{"EN":"Numkeys","CH":"禁用數字鍵","CN":"禁用数字键"},"DISABLELETTERS":{"EN":"Letters","CH":"禁用字母","CN":"禁用字母"},"DISABLESYMBOL":{"EN":"Symbol","CH":"禁用符號","CN":"禁用符号"},"DISABLECONTROLKEYS":{"EN":"Controlkeys","CH":"禁用控制鍵","CN":"禁用控制键"},"COMBINATIONKEY":{"EN":"Combinationkey","CH":"組合鍵","CN":"组合键"},"USE":{"EN":"Use","CH":"使用","CN":"使用"},"KEY":{"EN":"Key:","CH":"設定按鍵","CN":"设定按键"},"LIGHT":{"EN":"Light:","CH":"燈光設置","CN":"灯光设置"},"MESSAGE":{"EN":"Warning: The light effect has reached the limit of 11 groups.","CH":"警告:燈效已達上限11組請刪除後設定","CN":"警告:灯效已达上限11组请删除后设定"},"Apply":{"EN":"Apply","CH":"確定","CN":"确定"},"HARDWARE":{"EN":"Hardware troubleshoot","CH":"硬體檢測","CN":"硬体检测"},"GEEKCIRCLE":{"EN":"Kemove forum","CH":"極客圈","CN":"极客圈"},"COLORS":{"EN":"Colors:","CH":"插色數量:","CN":"插色数量:"},"SELECT":{"EN":"Select","CH":"框選","CN":"框选"},"CENTERTHEEFFECT":{"EN":"ORIGIN","CH":"起始點","CN":"起始點"},"OPACITY":{"EN":"Opacity","CH":"不透明度","CN":"不透明度"},"SPEED":{"EN":"Speed","CH":"速度","CN":"速度"},"BANDWIDTH":{"EN":"Bandwidth","CH":"帶寬","CN":"带宽"},"ANGLE":{"EN":"Angle","CH":"角度","CN":"角度"},"BUMP":{"EN":"Bump","CH":"回彈","CN":"回弹"},"AMPLITUDE":{"EN":"Amplitude","CH":"振幅","CN":"振幅"},"SEPARATE":{"EN":"Separate","CH":"分離","CN":"分离"},"GRADIENT":{"EN":"Gradient","CH":"梯度","CN":"梯度"},"DIRECTION":{"EN":"Direction","CH":"方向","CN":"方向"},"SOFT":{"EN":"Soft","CH":"柔邊","CN":"柔边"},"FIXED":{"EN":"Fixed","CH":"固定","CN":"固定"},"BIDIRECTIONAL":{"EN":"Bidirectional","CH":"雙向的","CN":"双向的"},"GAP":{"EN":"Gap","CH":"間隙","CN":"间隙"},"FIRE":{"EN":"Fire","CH":"火焰","CN":"火焰"},"RANDOMSPEED":{"EN":"Randomspeed","CH":"隨機速度","CN":"随机速度"},"TIME":{"EN":"Time","CH":"時間","CN":"时间"},"RADIUS":{"EN":"Radius","CH":"半徑","CN":"半径"},"NUMBER":{"EN":"Number","CH":"數量","CN":"数量"},"LED_MODE_NAME":{"EN":["Wave","Nexus","Spiral","Cycle","LinearWave","Ripple","Breathing","Rain","Fire","Trigger","AudioCap"],"CH":["波浪","撞擊","螺旋","循環","觸發","漣漪","呼吸","下雨","火焰","點亮","音樂"],"CN":["波浪","撞击","螺旋","循环","触发","涟漪","呼吸","下雨","火焰","点亮","音乐"]},"i18Select":{"EN":["EN","CH","CN"],"CH":["英文","繁體","簡體"],"CN":["英文","繁体","简体"]},"Sync Device":{"EN":"Sync Device","CH":"同步裝置","CN":"同步装置"},"Built-ineffects":{"EN":"Built-ineffects","CH":"內建燈效","CN":"內建灯效"},"Custom Effect":{"EN":"Custom Effect","CH":"高級燈效","CN":"高级灯效"},"Wave":{"EN":"Wave","CH":"波浪","CN":"波浪"},"Breath":{"EN":"Breath","CH":"呼吸","CN":"呼吸"},"Cycle":{"EN":"Cycle","CH":"循環","CN":"循环"},"Starlight":{"EN":"Starlight","CH":"繁星","CN":"繁星"},"Encounter":{"EN":"Encounter","CH":"邂逅","CN":"邂逅"},"Rain":{"EN":"Rain","CH":"下雨","CN":"下雨"},"Pulse":{"EN":"Pulse","CH":"脈衝","CN":"脉冲"},"Cross":{"EN":"Cross","CH":"十字","CN":"十字"},"Trigger":{"EN":"Trigger","CH":"點亮","CN":"点亮"},"Ripple":{"EN":"Ripple","CH":"漣漪","CN":"涟漪"},"Blossom":{"EN":"Blossom","CH":"綻放","CN":"绽放"},"Game_Mode":{"EN":"Game Mode","CH":"遊戲模式","CN":"游戏模式"},"Lighting":{"EN":"Lighting","CH":"單色","CN":"单色"},"Neon_stream":{"EN":"Neon stream","CH":"随波逐流","CN":"随波逐流"},"Rainbow_wheel":{"EN":"Rainbow wheel","CH":"彩虹轮盘","CN":"彩虹轮盘"},"Adorn":{"EN":"Adorn","CH":"百花争艳","CN":"百花争艳"},"Stars_twinkle":{"EN":"Stars twinkle","CH":"繁星点点","CN":"繁星点点"},"Shadow_disappear":{"EN":"Shadow disappear","CH":"踏雪无痕","CN":"踏雪无痕"},"Retro_snake":{"EN":"Retro snake","CH":"川流不息","CN":"川流不息"},"ColorLoop":{"EN":"ColorLoop","CH":"光谱循环","CN":"光谱循环"},"Respire":{"EN":"Respire","CH":"呼吸模式","CN":"呼吸模式"},"Fixed_on":{"EN":"Fixed_on","CH":"常亮模式","CN":"常亮模式"},"Ripples_shining":{"EN":"Ripples_shining","CH":"涟漪扩散","CN":"涟漪扩散"},"Reaction":{"EN":"Reaction","CH":"如影随形","CN":"如影随形"},"Flash_away":{"EN":"Flash_away","CH":"一触即发","CN":"一触即发"},"Sine_wave":{"EN":"Sine_wave","CH":"正弦光波","CN":"正弦光波"},"Raindrops":{"EN":"Raindrops","CH":"雨中漫步","CN":"雨中漫步"},"MAD_CATZ":{"EN":"MAD CATZ","CH":"MAD CATZ","CN":"MAD CATZ"},"BRIGHTNESS":{"EN":"Brightness","CH":"亮度","CN":"亮度"},"MULTICOLOR":{"EN":"Multicolor","CH":"多色","CN":"多色"},"ConicBand":{"EN":"Nexus","CH":"撞擊","CN":"撞击"},"Spiral":{"EN":"Spiral","CH":"螺旋","CN":"螺旋"},"LinearWave":{"EN":"LinearWave","CH":"觸發","CN":"触发"},"Breathing":{"EN":"Breathing","CH":"呼吸","CN":"呼吸"},"Fire":{"EN":"Fire","CH":"火焰","CN":"火焰"},"AudioCap":{"EN":"AudioCap","CH":"音樂","CN":"音乐"},"SW_Version":{"EN":"SW_Version","CH":"軟體版本","CN":"软体版本"},"FW_Version":{"EN":"FW_Version","CH":"韌體版本","CN":"韧体版本"}}
exports.i18n_Localization = i18n_Localization;
//exports.Func_SpecialKey_Code = Func_SpecialKey_Code;


/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser-dynamic */ "./node_modules/@angular/platform-browser-dynamic/fesm5/platform-browser-dynamic.js");
/* harmony import */ var _app_app_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./app/app.module */ "./src/app/app.module.ts");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./environments/environment */ "./src/environments/environment.ts");




if (_environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].production) {
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["enableProdMode"])();
}
Object(_angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__["platformBrowserDynamic"])().bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_2__["AppModule"])
    .catch(function (err) { return console.error(err); });


/***/ }),

/***/ "./src/module/SupportData.js":
/*!***********************************!*\
  !*** ./src/module/SupportData.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var KeyMapping = [
    {"keyCode":"65","functionType":"Singlekey","value":"A","hid":4,"translate":"A","code":"KeyA"},
    {"keyCode":"66","functionType":"Singlekey","value":"B","hid":5,"translate":"B","code":"KeyB"},
    {"keyCode":"67","functionType":"Singlekey","value":"C","hid":6,"translate":"C","code":"KeyC"},
    {"keyCode":"68","functionType":"Singlekey","value":"D","hid":7,"translate":"D","code":"KeyD"},
    {"keyCode":"69","functionType":"Singlekey","value":"E","hid":8,"translate":"E","code":"KeyE"},
    {"keyCode":"70","functionType":"Singlekey","value":"F","hid":9,"translate":"F","code":"KeyF"},
    {"keyCode":"71","functionType":"Singlekey","value":"G","hid":10,"translate":"G","code":"KeyG"},
    {"keyCode":"72","functionType":"Singlekey","value":"H","hid":11,"translate":"H","code":"KeyH"},
    {"keyCode":"73","functionType":"Singlekey","value":"I","hid":12,"translate":"I","code":"KeyI"},
    {"keyCode":"74","functionType":"Singlekey","value":"J","hid":13,"translate":"J","code":"KeyJ"},
    {"keyCode":"75","functionType":"Singlekey","value":"K","hid":14,"translate":"K","code":"KeyK"},
    {"keyCode":"76","functionType":"Singlekey","value":"L","hid":15,"translate":"L","code":"KeyL"},
    {"keyCode":"77","functionType":"Singlekey","value":"M","hid":16,"translate":"M","code":"KeyM"},
    {"keyCode":"78","functionType":"Singlekey","value":"N","hid":17,"translate":"N","code":"KeyN"},
    {"keyCode":"79","functionType":"Singlekey","value":"O","hid":18,"translate":"O","code":"KeyO"},
    {"keyCode":"80","functionType":"Singlekey","value":"P","hid":19,"translate":"P","code":"KeyP"},
    {"keyCode":"81","functionType":"Singlekey","value":"Q","hid":20,"translate":"Q","code":"KeyQ"},
    {"keyCode":"82","functionType":"Singlekey","value":"R","hid":21,"translate":"R","code":"KeyR"},
    {"keyCode":"83","functionType":"Singlekey","value":"S","hid":22,"translate":"S","code":"KeyS"},
    {"keyCode":"84","functionType":"Singlekey","value":"T","hid":23,"translate":"T","code":"KeyT"},
    {"keyCode":"85","functionType":"Singlekey","value":"U","hid":24,"translate":"U","code":"KeyU"},
    {"keyCode":"86","functionType":"Singlekey","value":"V","hid":25,"translate":"V","code":"KeyV"},
    {"keyCode":"87","functionType":"Singlekey","value":"W","hid":26,"translate":"W","code":"KeyW"},
    {"keyCode":"88","functionType":"Singlekey","value":"X","hid":27,"translate":"X","code":"KeyX"},
    {"keyCode":"89","functionType":"Singlekey","value":"Y","hid":28,"translate":"Y","code":"KeyY"},
    {"keyCode":"90","functionType":"Singlekey","value":"Z","hid":29,"translate":"Z","code":"KeyZ"},
    {"keyCode":"48","functionType":"Singlekey","value":"0","hid":39,"translate":"0","code":"Digit0"},
    {"keyCode":"49","functionType":"Singlekey","value":"1","hid":30,"translate":"1","code":"Digit1"},
    {"keyCode":"50","functionType":"Singlekey","value":"2","hid":31,"translate":"2","code":"Digit2"},
    {"keyCode":"51","functionType":"Singlekey","value":"3","hid":32,"translate":"3","code":"Digit3"},
    {"keyCode":"52","functionType":"Singlekey","value":"4","hid":33,"translate":"4","code":"Digit4"},
    {"keyCode":"53","functionType":"Singlekey","value":"5","hid":34,"translate":"5","code":"Digit5"},
    {"keyCode":"54","functionType":"Singlekey","value":"6","hid":35,"translate":"6","code":"Digit6"},
    {"keyCode":"55","functionType":"Singlekey","value":"7","hid":36,"translate":"7","code":"Digit7"},
    {"keyCode":"56","functionType":"Singlekey","value":"8","hid":37,"translate":"8","code":"Digit8"},
    {"keyCode":"57","functionType":"Singlekey","value":"9","hid":38,"translate":"9","code":"Digit9"},
    {"keyCode":"8","functionType":"Singlekey","value":"Backspace","hid":42,"translate":"Backspace","code":"Backspace"},
    {"keyCode":"9","functionType":"Singlekey","value":"Tab","hid":43,"translate":"Tab","code":"Tab"},
    {"keyCode":"144","functionType":"Singlekey","value":"Num Lock","hid":83,"translate":"Num Lock","code":"NumLock"},
    {"keyCode":"13","functionType":"Singlekey","value":"Enter","hid":40,"translate":"Enter","code":"Enter"},
    {"keyCode":"16","functionType":"Singlekey","value":"Shift","hid":225,"Modifier":0x02,"translate":"Shift","code":"ShiftRight"},
    {"keyCode":"17","functionType":"Singlekey","value":"Ctrl","hid":224,"Modifier":0x01,"translate":"Ctrl","code":"ControlLeft"},
    {"keyCode":"18","functionType":"Singlekey","value":"Alt","hid":226,"Modifier":0x04,"translate":"Alt","code":"AltRight"},
    {"keyCode":"19","functionType":"Singlekey","value":"Break","hid":72,"translate":"Break","code":"Pause"},
    {"keyCode":"20","functionType":"Singlekey","value":"CapsLock","hid":57,"translate":"CapsLock","code":"CapsLock"},
    {"keyCode":"27","functionType":"Singlekey","value":"Esc","hid":41,"translate":"Esc","code":"Escape"},
    {"keyCode":"32","functionType":"Singlekey","value":"Space","hid":44,"translate":"Space","code":"Space"},
    {"keyCode":"33","functionType":"Singlekey","value":"PageUp","hid":75,"translate":"PageUp","code":"PageUp"},
    {"keyCode":"34","functionType":"Singlekey","value":"PageDown","hid":78,"translate":"PageDown","code":"PageDown"},
    {"keyCode":"35","functionType":"Singlekey","value":"End","hid":77,"translate":"End","code":"End"},
    {"keyCode":"36","functionType":"Singlekey","value":"Home","hid":74,"translate":"Home","code":"Home"},
    {"keyCode":"37","functionType":"Singlekey","value":"Left","hid":80,"translate":"Left","code":"ArrowLeft"},
    {"keyCode":"38","functionType":"Singlekey","value":"Up","hid":82,"translate":"Up","code":"ArrowUp"},
    {"keyCode":"39","functionType":"Singlekey","value":"Right","hid":79,"translate":"Right","code":"ArrowRight"},
    {"keyCode":"40","functionType":"Singlekey","value":"Down","hid":81,"translate":"Down","code":"ArrowDown"},
    {"keyCode":"44","functionType":"Singlekey","value":"PrintScreen","hid":"0x46","translate":"PrintScreen","code":"PrintScreen"},
    {"keyCode":"45","functionType":"Singlekey","value":"Insert","hid":73,"translate":"Insert","code":"Insert"},
    {"keyCode":"46","functionType":"Singlekey","value":"Delete","hid":76,"translate":"Delete","code":"Delete"},
    {"keyCode":"91","functionType":"Singlekey","value":"Left Win","hid":227,"Modifier":0x08,"translate":"Left Win","code":"MetaLeft"},
    {"keyCode":"92","functionType":"Singlekey","value":"Right Win","hid":231,"Modifier":0x80,"translate":"Right Win","code":"MetaRight"},
    {"keyCode":"93","functionType":"Singlekey","value":"Menu","hid":101,"translate":"Menu","code":"ContextMenu"},
    {"keyCode":"106","functionType":"Singlekey","value":"*","hid":85,"translate":"*","code":"NumpadMultiply"},
    {"keyCode":"107","functionType":"Singlekey","value":"+","hid":87,"translate":"+","code":"NumpadAdd"},
    {"keyCode":"109","functionType":"Singlekey","value":"-","hid":86,"translate":"-","code":"NumpadSubtract"},
    {"keyCode":"110","functionType":"Singlekey","value":".","hid":0x63,"translate":".","code":"NumpadDecimal"},
    {"keyCode":"111","functionType":"Singlekey","value":"/","hid":84,"translate":"/","code":"NumpadDivide"},
    {"keyCode":"112","functionType":"Singlekey","value":"F1","hid":58,"translate":"F1","code":"F1"},
    {"keyCode":"113","functionType":"Singlekey","value":"F2","hid":59,"translate":"F2","code":"F2"},
    {"keyCode":"114","functionType":"Singlekey","value":"F3","hid":60,"translate":"F3","code":"F3"},
    {"keyCode":"115","functionType":"Singlekey","value":"F4","hid":61,"translate":"F4","code":"F4"},
    {"keyCode":"116","functionType":"Singlekey","value":"F5","hid":62,"translate":"F5","code":"F5"},
    {"keyCode":"117","functionType":"Singlekey","value":"F6","hid":63,"translate":"F6","code":"F6"},
    {"keyCode":"118","functionType":"Singlekey","value":"F7","hid":64,"translate":"F7","code":"F7"},
    {"keyCode":"119","functionType":"Singlekey","value":"F8","hid":65,"translate":"F8","code":"F8"},
    {"keyCode":"120","functionType":"Singlekey","value":"F9","hid":66,"translate":"F9","code":"F9"},
    {"keyCode":"121","functionType":"Singlekey","value":"F10","hid":67,"translate":"F10","code":"F10"},
    {"keyCode":"122","functionType":"Singlekey","value":"F11","hid":68,"translate":"F11","code":"F11"},
    {"keyCode":"123","functionType":"Singlekey","value":"F12","hid":69,"translate":"F12","code":"F12"},
    {"keyCode":"145","functionType":"Singlekey","value":"Scroll Lock","hid":71,"translate":"Scroll Lock","code":"ScrollLock"},
    {"keyCode":"186","functionType":"Singlekey","value":";","hid":51,"translate":";","code":"Semicolon"},
    {"keyCode":"187","functionType":"Singlekey","value":"=","hid":46,"translate":"=","code":"Equal"},
    {"keyCode":"188","functionType":"Singlekey","value":",","hid":54,"translate":",","code":"Comma"},
    {"keyCode":"189","functionType":"Singlekey","value":"-","hid":45,"translate":"-","code":"Minus"},
    {"keyCode":"190","functionType":"Singlekey","value":"dot","hid":55,"translate":"dot","code":"Period"},
    {"keyCode":"191","functionType":"Singlekey","value":"/","hid":56,"translate":"/","code":"Slash"},
    {"keyCode":"192","functionType":"Singlekey","value":"~","hid":53,"translate":"~","code":"Backquote"},
    {"keyCode":"219","functionType":"Singlekey","value":"[","hid":47,"translate":"[","code":"BracketLeft"},
    {"keyCode":"220","functionType":"Singlekey","value":"|","hid":49,"translate":"|","code":"Backslash"},
    {"keyCode":"221","functionType":"Singlekey","value":"]","hid":48,"translate":"]","code":"BracketRight"},
    {"keyCode":"222","functionType":"Singlekey","value":"'","hid":52,"translate":"'","code":"Quote"}

]
var MediaMapping = [
    { keyCode: '1', value: 'None', "hid":0x04, hidMap: [0x00, 0x00], translate: '' },
    { keyCode: '1', value: 'Media Player', "hid":0x04, hidMap: [0x01, 0x83], translate: '' },
    { keyCode: '1', value: 'Play/Pause', "hid":0x04, hidMap: [0x00, 0xcd], translate: '' },
    { keyCode: '1', value: 'Next', "hid":0x04, hidMap: [0x00, 0xb5], translate: '' },
    { keyCode: '1', value: 'Previous', "hid":0x04, hidMap: [0x00, 0xb6], translate: '' },
    { keyCode: '1', value: 'Stop', "hid":0x04, hidMap: [0x00, 0xb7], translate: '' },
    { keyCode: '1', value: 'Mute', "hid":0x04, hidMap: [0x00, 0xe2], translate: '' },
    { keyCode: '1', value: 'Volume up', "hid":0x04, hidMap: [0x00, 0xe9], translate: '' },
    { keyCode: '1', value: 'Volume down', "hid":0x04, hidMap: [0x00, 0xea], translate: '' },
    { keyCode: '1', value: 'Next track', "hid":0x04, hidMap: [0x00, 0xb5], translate: '' },
    { keyCode: '1', value: 'Previous track', "hid":0x04, hidMap: [0x00, 0xb6], translate: '' },
]
var WindowsMapping = [
    { keyCode: '1', value: 'None', "hid":0x04, hidMap: [0x00, 0x00], translate: '' },
    { keyCode: '1', value: 'Email', "hid":0x04, hidMap: [0x01, 0x8a], translate: '' },
    { keyCode: '1', value: 'Calculator', "hid":0x04, hidMap: [0x01, 0x92], translate: '' },
    { keyCode: '1', value: 'My Computer', "hid":0x04, hidMap: [0x01, 0x94], translate: '' },
    { keyCode: '1', value: 'Explorer', "hid":0x04, hidMap: [0x01, 0x94], translate: '' },
    { keyCode: '1', value: 'WWW Home', "hid":0x04, hidMap: [0x02, 0x23], translate: '' },
    { keyCode: '1', value: 'WWW Refresh', "hid":0x04, hidMap: [0x02, 0x27], translate: '' },
    { keyCode: '1', value: 'WWW Stop', "hid":0x04, hidMap: [0x02, 0x26], translate: '' },
    { keyCode: '1', value: 'WWW Back', "hid":0x04, hidMap: [0x02, 0x24], translate: '' },
    { keyCode: '1', value: 'WWW Forward', "hid":0x04, hidMap: [0x02, 0x25], translate: '' },
    { keyCode: '1', value: 'WWW Search', "hid":0x04, hidMap: [0x02, 0x21], translate: '' },
]

var Shortcuts_WindowsMapping=[
    {"keyCode":"Shortcuts_Fun_25","functionType":"Shortcuts","value":"Email","hid":17,"translate":"Email","code":"Shortcuts_Fun_25"},
    {"keyCode":"Shortcuts_Fun_26","functionType":"Shortcuts","value":"Calculator","hid":16,"translate":"Calculator","code":"Shortcuts_Fun_26"},
    {"keyCode":"Shortcuts_Fun_27","functionType":"Shortcuts","value":"My Computer","hid":15,"translate":"My Computer","code":"Shortcuts_Fun_27"},
    {"keyCode":"Shortcuts_Fun_28","functionType":"Shortcuts","value":"Explorer","hid":15,"translate":"Explorer","code":"Shortcuts_Fun_28"},
    {"keyCode":"Shortcuts_Fun_29","functionType":"Shortcuts","value":"WWW Home","hid":8,"translate":"WWW Home","code":"Shortcuts_Fun_29"},
    {"keyCode":"Shortcuts_Fun_30","functionType":"Shortcuts","value":"WWW Refresh","hid":9,"translate":"WWW Refresh","code":"Shortcuts_Fun_30"},
    {"keyCode":"Shortcuts_Fun_31","functionType":"Shortcuts","value":"WWW Stop","hid":10,"translate":"WWW Stop","code":"Shortcuts_Fun_31"},
    {"keyCode":"Shortcuts_Fun_32","functionType":"Shortcuts","value":"WWW Back","hid":11,"translate":"WWW Back","code":"Shortcuts_Fun_32"},
    {"keyCode":"Shortcuts_Fun_33","functionType":"Shortcuts","value":"WWW Forward","hid":12,"translate":"WWW Forward","code":"Shortcuts_Fun_33"},
    {"keyCode":"Shortcuts_Fun_34","functionType":"Shortcuts","value":"WWW Search","hid":14,"translate":"WWW Search","code":"Shortcuts_Fun_34"},
]
var SupportLanguage = [
    { name: 'ENGLISH', value: 'en' },
    // {name:'繁體中文', value:"tw"},
    // {name:'简体中文', value:"cn"}
]

var AllFunctionMapping =[{"keyCode":"Multimedia_Fun_0","functionType":"Multimedia","value":"Media Player","hid":0,"translate":"Media Player","code":"Multimedia_Fun_0"},
{"keyCode":"Multimedia_Fun_1","functionType":"Multimedia","value":"Play/Pause","hid":1,"translate":"Play/Pause","code":"Multimedia_Fun_1"},
{"keyCode":"Multimedia_Fun_2","functionType":"Multimedia","value":"Next","hid":7,"translate":"Next","code":"Multimedia_Fun_2"},
{"keyCode":"Multimedia_Fun_3","functionType":"Multimedia","value":"Previous","hid":6,"translate":"Previous","code":"Multimedia_Fun_3"},
{"keyCode":"Multimedia_Fun_4","functionType":"Multimedia","value":"Stop","hid":5,"translate":"Stop","code":"Multimedia_Fun_4"},
{"keyCode":"Multimedia_Fun_5","functionType":"Multimedia","value":"Mute","hid":2,"translate":"Mute","code":"Multimedia_Fun_5"},
{"keyCode":"Multimedia_Fun_6","functionType":"Multimedia","value":"Volume up","hid":3,"translate":"Volume up","code":"Multimedia_Fun_6"},
{"keyCode":"Multimedia_Fun_7","functionType":"Multimedia","value":"Volume down","hid":4,"translate":"Volume down","code":"Multimedia_Fun_7"},
{"keyCode":"Multimedia_Fun_8","functionType":"Multimedia","value":"Next track","hid":7,"translate":"Next trac","code":"Multimedia_Fun_8"},
{"keyCode":"Multimedia_Fun_9","functionType":"Multimedia","value":"Previoustrack","hid":6,"translate":"Previoustrack","code":"Multimedia_Fun_9"},
{"keyCode":"KEYBOARD_Fun_10","functionType":"KEYBOARD","value":"Profilecycleup","hid":2,"translate":"Profilecycleup","code":"KEYBOARD_Fun_10"},
{"keyCode":"KEYBOARD_Fun_11","functionType":"KEYBOARD","value":"Profilecycledown","hid":1,"translate":"Profilecycledown","code":"KEYBOARD_Fun_11"},
{"keyCode":"KEYBOARD_Fun_12","functionType":"KEYBOARD","value":"Layercycleup","hid":4,"translate":"Layercycleup","code":"KEYBOARD_Fun_12"},
{"keyCode":"KEYBOARD_Fun_13","functionType":"KEYBOARD","value":"Layercycledown","hid":3,"translate":"Layercycledown","code":"KEYBOARD_Fun_13"},
{"keyCode":"MOUSE_Fun_14","functionType":"MOUSE","value":"Leftbutton","hid":1,"translate":"Leftbutton","code":"MOUSE_Fun_14"},
{"keyCode":"MOUSE_Fun_15","functionType":"MOUSE","value":"Rightbutton","hid":2,"translate":"Rightbutton","code":"MOUSE_Fun_15"},
{"keyCode":"MOUSE_Fun_16","functionType":"MOUSE","value":"Middlebutton","hid":3,"translate":"Middlebutton","code":"MOUSE_Fun_16"},
{"keyCode":"MOUSE_Fun_17","functionType":"MOUSE","value":"Forward","hid":5,"translate":"Forward","code":"MOUSE_Fun_17"},
{"keyCode":"MOUSE_Fun_18","functionType":"MOUSE","value":"Back","hid":4,"translate":"Back","code":"MOUSE_Fun_18"},
{"keyCode":"MOUSE_Fun_19","functionType":"MOUSE","value":"Scrollup","hid":6,"translate":"Scrollup","code":"MOUSE_Fun_19"},
{"keyCode":"MOUSE_Fun_20","functionType":"MOUSE","value":"Scrolldown","hid":7,"translate":"Scrolldown","code":"MOUSE_Fun_20"},
{"keyCode":"MOUSE_Fun_21","functionType":"MOUSE","value":"Profilecycleup","hid":1944,"translate":"Profilecycleup","code":"MOUSE_Fun_21"},
{"keyCode":"MOUSE_Fun_22","functionType":"MOUSE","value":"Profilecycledown","hid":1943,"translate":"Profilecycledown","code":"MOUSE_Fun_22"},
{"keyCode":"MOUSE_Fun_23","functionType":"MOUSE","value":"Batterystatuscheck","hid":1942,"translate":"Batterystatuscheck","code":"MOUSE_Fun_23"},
{"keyCode":"LaunchProgram","functionType":"LaunchProgram","value":"LaunchProgram","hid":1941,"translate":"LaunchProgram","code":"LaunchProgram"},
{"keyCode":"LaunchWebsite","functionType":"LaunchProgram","value":"LaunchWebsite","hid":1940,"translate":"LaunchWebsite","code":"LaunchWebsite"},
{"keyCode":"Shortcuts_Fun_25","functionType":"Shortcuts","value":"Email","hid":17,"translate":"Email","code":"Shortcuts_Fun_25"},
{"keyCode":"Shortcuts_Fun_26","functionType":"Shortcuts","value":"Calculator","hid":16,"translate":"Calculator","code":"Shortcuts_Fun_26"},
{"keyCode":"Shortcuts_Fun_27","functionType":"Shortcuts","value":"My Computer","hid":15,"translate":"My Computer","code":"Shortcuts_Fun_27"},
{"keyCode":"Shortcuts_Fun_28","functionType":"Shortcuts","value":"Explorer","hid":15,"translate":"Explorer","code":"Shortcuts_Fun_28"},
{"keyCode":"Shortcuts_Fun_29","functionType":"Shortcuts","value":"WWW Home","hid":8,"translate":"WWW Home","code":"Shortcuts_Fun_29"},
{"keyCode":"Shortcuts_Fun_30","functionType":"Shortcuts","value":"WWW Refresh","hid":9,"translate":"WWW Refresh","code":"Shortcuts_Fun_30"},
{"keyCode":"Shortcuts_Fun_31","functionType":"Shortcuts","value":"WWW Stop","hid":10,"translate":"WWW Stop","code":"Shortcuts_Fun_31"},
{"keyCode":"Shortcuts_Fun_32","functionType":"Shortcuts","value":"WWW Back","hid":11,"translate":"WWW Back","code":"Shortcuts_Fun_32"},
{"keyCode":"Shortcuts_Fun_33","functionType":"Shortcuts","value":"WWW Forward","hid":12,"translate":"WWW Forward","code":"Shortcuts_Fun_33"},
{"keyCode":"Shortcuts_Fun_34","functionType":"Shortcuts","value":"WWW Search","hid":14,"translate":"WWW Search","code":"Shortcuts_Fun_34"},
{"keyCode":"MacroFunction","functionType":"MacroFunction","value":"MacroFunction","hid":1923,"translate":"MacroFunction","code":"MacroFunction"},
{"keyCode":"ScrollWheel","functionType":"ScrollWheel","value":"Volume","hid":1922,"translate":"ScrollWheel","code":"ScrollWheel"},
{"keyCode":"Custom_Fnkey","functionType":"Custom_Fnkey","value":"FN","hid":"0x781","translate":"FN","code":"Custom_Fnkey"},
{"keyCode":"0","functionType":"Singlekey","value":"Left Click","hid":0xB0,"hid_ModelO:":0x01,"translate":"Left Click","code":"0"},
{"keyCode":"1","functionType":"Singlekey","value":"Scroll Click","hid":0xB2,"hid_ModelO:":0x03,"translate":"Scroll Click","code":"1"},
{"keyCode":"2","functionType":"Singlekey","value":"Right Click","hid":0xB1,"hid_ModelO:":0x02,"translate":"Right Click","code":"2"},
{"keyCode":"3","functionType":"Singlekey","value":"Back Key","hid": 0xB3,"hid_ModelO": 0x02, "translate":"Back Key","code":"3"},
{"keyCode":"4","functionType":"Singlekey","value":"Forward Key","hid": 0xB4,"hid_ModelO": 0x02,"translate":"Forward Key","code":"4"},
{"keyCode":"65","functionType":"Singlekey","value":"A","hid":0x04,"translate":"A","code":"KeyA"},
{"keyCode":"66","functionType":"Singlekey","value":"B","hid":0x05,"translate":"B","code":"KeyB"},
{"keyCode":"67","functionType":"Singlekey","value":"C","hid":0x06,"translate":"C","code":"KeyC"},
{"keyCode":"68","functionType":"Singlekey","value":"D","hid":0x07,"translate":"D","code":"KeyD"},
{"keyCode":"69","functionType":"Singlekey","value":"E","hid":0x08,"translate":"E","code":"KeyE"},
{"keyCode":"70","functionType":"Singlekey","value":"F","hid":0x09,"translate":"F","code":"KeyF"},
{"keyCode":"71","functionType":"Singlekey","value":"G","hid":0x0A,"translate":"G","code":"KeyG"},
{"keyCode":"72","functionType":"Singlekey","value":"H","hid":0x0B,"translate":"H","code":"KeyH"},
{"keyCode":"73","functionType":"Singlekey","value":"I","hid":0x0C,"translate":"I","code":"KeyI"},
{"keyCode":"74","functionType":"Singlekey","value":"J","hid":0x0D,"translate":"J","code":"KeyJ"},
{"keyCode":"75","functionType":"Singlekey","value":"K","hid":0x0E,"translate":"K","code":"KeyK"},
{"keyCode":"76","functionType":"Singlekey","value":"L","hid":0x0F,"translate":"L","code":"KeyL"},
{"keyCode":"77","functionType":"Singlekey","value":"M","hid":0x10,"translate":"M","code":"KeyM"},
{"keyCode":"78","functionType":"Singlekey","value":"N","hid":0x11,"translate":"N","code":"KeyN"},
{"keyCode":"79","functionType":"Singlekey","value":"O","hid":0x12,"translate":"O","code":"KeyO"},
{"keyCode":"80","functionType":"Singlekey","value":"P","hid":0x13,"translate":"P","code":"KeyP"},
{"keyCode":"81","functionType":"Singlekey","value":"Q","hid":0x14,"translate":"Q","code":"KeyQ"},
{"keyCode":"82","functionType":"Singlekey","value":"R","hid":0x15,"translate":"R","code":"KeyR"},
{"keyCode":"83","functionType":"Singlekey","value":"S","hid":0x16,"translate":"S","code":"KeyS"},
{"keyCode":"84","functionType":"Singlekey","value":"T","hid":0x17,"translate":"T","code":"KeyT"},
{"keyCode":"85","functionType":"Singlekey","value":"U","hid":0x18,"translate":"U","code":"KeyU"},
{"keyCode":"86","functionType":"Singlekey","value":"V","hid":0x19,"translate":"V","code":"KeyV"},
{"keyCode":"87","functionType":"Singlekey","value":"W","hid":0x1A,"translate":"W","code":"KeyW"},
{"keyCode":"88","functionType":"Singlekey","value":"X","hid":0x1B,"translate":"X","code":"KeyX"},
{"keyCode":"89","functionType":"Singlekey","value":"Y","hid":0x1C,"translate":"Y","code":"KeyY"},
{"keyCode":"90","functionType":"Singlekey","value":"Z","hid":0x1D,"translate":"Z","code":"KeyZ"},
{"keyCode":"48","functionType":"Singlekey","value":"0","hid":0x27,"translate":"0","code":"Digit0"},
{"keyCode":"49","functionType":"Singlekey","value":"1","hid":0x1E,"translate":"1","code":"Digit1"},
{"keyCode":"50","functionType":"Singlekey","value":"2","hid":0x1F,"translate":"2","code":"Digit2"},
{"keyCode":"51","functionType":"Singlekey","value":"3","hid":0x20,"translate":"3","code":"Digit3"},
{"keyCode":"52","functionType":"Singlekey","value":"4","hid":0x21,"translate":"4","code":"Digit4"},
{"keyCode":"53","functionType":"Singlekey","value":"5","hid":0x22,"translate":"5","code":"Digit5"},
{"keyCode":"54","functionType":"Singlekey","value":"6","hid":0x23,"translate":"6","code":"Digit6"},
{"keyCode":"55","functionType":"Singlekey","value":"7","hid":0x24,"translate":"7","code":"Digit7"},
{"keyCode":"56","functionType":"Singlekey","value":"8","hid":0x25,"translate":"8","code":"Digit8"},
{"keyCode":"57","functionType":"Singlekey","value":"9","hid":0x26,"translate":"9","code":"Digit9"},
{"keyCode":"8","functionType":"Singlekey","value":"Backspace","hid":42,"translate":"Backspace","code":"Backspace"},
{"keyCode":"9","functionType":"Singlekey","value":"Tab","hid":43,"translate":"Tab","code":"Tab"},
{"keyCode":"144","functionType":"Singlekey","value":"Num Lock","hid":83,"translate":"Num Lock","code":"NumLock"},
{"keyCode":"13","functionType":"Singlekey","value":"Enter","hid":40,"translate":"Enter","code":"Enter"},
{"keyCode":"16","functionType":"Singlekey","value":"Shift","hid":225,"translate":"Shift","code":"ShiftRight"},
{"keyCode":"16","functionType":"Singlekey","value":"Shift","hid":225,"translate":"Shift","code":"ShiftLeft"},
{"keyCode":"17","functionType":"Singlekey","value":"Ctrl","hid":224,"translate":"Ctrl","code":"ControlLeft"},
{"keyCode":"17","functionType":"Singlekey","value":"Ctrl","hid":224,"translate":"Ctrl","code":"ControlRight"},
{"keyCode":"18","functionType":"Singlekey","value":"Alt","hid":226,"translate":"Alt","code":"AltRight"},
{"keyCode":"18","functionType":"Singlekey","value":"Alt","hid":226,"translate":"Alt","code":"AltLeft"},
{"keyCode":"19","functionType":"Singlekey","value":"Break","hid":72,"translate":"Break","code":"Pause"},
{"keyCode":"20","functionType":"Singlekey","value":"CapsLock","hid":57,"translate":"CapsLock","code":"CapsLock"},
{"keyCode":"27","functionType":"Singlekey","value":"Esc","hid":41,"translate":"Esc","code":"Escape"},
{"keyCode":"32","functionType":"Singlekey","value":"Space","hid":44,"translate":"Space","code":"Space"},
{"keyCode":"33","functionType":"Singlekey","value":"PageUp","hid":75,"translate":"PageUp","code":"PageUp"},
{"keyCode":"34","functionType":"Singlekey","value":"PageDown","hid":78,"translate":"PageDown","code":"PageDown"},
{"keyCode":"35","functionType":"Singlekey","value":"End","hid":77,"translate":"End","code":"End"},
{"keyCode":"36","functionType":"Singlekey","value":"Home","hid":74,"translate":"Home","code":"Home"},
{"keyCode":"37","functionType":"Singlekey","value":"Left","hid":80,"translate":"Left","code":"ArrowLeft"},
{"keyCode":"38","functionType":"Singlekey","value":"Up","hid":82,"translate":"Up","code":"ArrowUp"},
{"keyCode":"39","functionType":"Singlekey","value":"Right","hid":79,"translate":"Right","code":"ArrowRight"},
{"keyCode":"40","functionType":"Singlekey","value":"Down","hid":81,"translate":"Down","code":"ArrowDown"},
{"keyCode":"44","functionType":"Singlekey","value":"PrintScreen","hid":"0x46","translate":"PrintScreen","code":"PrintScreen"},
{"keyCode":"45","functionType":"Singlekey","value":"Insert","hid":73,"translate":"Insert","code":"Insert"},
{"keyCode":"46","functionType":"Singlekey","value":"Delete","hid":76,"translate":"Delete","code":"Delete"},
{"keyCode":"91","functionType":"Singlekey","value":"Left Win","hid":227,"translate":"Left Win","code":"MetaLeft"},
{"keyCode":"92","functionType":"Singlekey","value":"Right Win","hid":231,"Modifier":0x80,"translate":"Right Win","code":"MetaRight"},
{"keyCode":"93","functionType":"Singlekey","value":"Menu","hid":101,"translate":"Menu","code":"ContextMenu"},
{"keyCode":"96","functionType":"Singlekey","value":"Numpad0","hid":0x62,"translate":"Numpad0","code":"Numpad0"},
{"keyCode":"97","functionType":"Singlekey","value":"Numpad1","hid":0x59,"translate":"Numpad1","code":"Numpad1"},
{"keyCode":"98","functionType":"Singlekey","value":"Numpad2","hid":0x5a,"translate":"Numpad2","code":"Numpad2"},
{"keyCode":"99","functionType":"Singlekey","value":"Numpad3","hid":0x5b,"translate":"Numpad3","code":"Numpad3"},
{"keyCode":"100","functionType":"Singlekey","value":"Numpad4","hid":0x5c,"translate":"Numpad4","code":"Numpad4"},
{"keyCode":"101","functionType":"Singlekey","value":"Numpad5","hid":0x5d,"translate":"Numpad5","code":"Numpad5"},
{"keyCode":"102","functionType":"Singlekey","value":"Numpad6","hid":0x5e,"translate":"Numpad6","code":"Numpad6"},
{"keyCode":"103","functionType":"Singlekey","value":"Numpad7","hid":0x5f,"translate":"Numpad7","code":"Numpad7"},
{"keyCode":"104","functionType":"Singlekey","value":"Numpad8","hid":0x60,"translate":"Numpad8","code":"Numpad8"},
{"keyCode":"105","functionType":"Singlekey","value":"Numpad9","hid":0x61,"translate":"Numpad9","code":"Numpad9"},
{"keyCode":"13","functionType":"Singlekey","value":"NumpadEnter","hid":0x58,"translate":"NumpadEnter","code":"NumpadEnter"},
{"keyCode":"106","functionType":"Singlekey","value":"*","hid":85,"translate":"*","code":"NumpadMultiply"},
{"keyCode":"107","functionType":"Singlekey","value":"+","hid":87,"translate":"+","code":"NumpadAdd"},
{"keyCode":"109","functionType":"Singlekey","value":"-","hid":86,"translate":"-","code":"NumpadSubtract"},
{"keyCode":"110","functionType":"Singlekey","value":".","hid":0x63,"translate":".","code":"NumpadDecimal"},
{"keyCode":"111","functionType":"Singlekey","value":"/","hid":84,"translate":"/","code":"NumpadDivide"},
{"keyCode":"112","functionType":"Singlekey","value":"F1","hid":0x3A,"translate":"F1","code":"F1"},
{"keyCode":"113","functionType":"Singlekey","value":"F2","hid":0x3B,"translate":"F2","code":"F2"},
{"keyCode":"114","functionType":"Singlekey","value":"F3","hid":0x3C,"translate":"F3","code":"F3"},
{"keyCode":"115","functionType":"Singlekey","value":"F4","hid":0x3D,"translate":"F4","code":"F4"},
{"keyCode":"116","functionType":"Singlekey","value":"F5","hid":0x3E,"translate":"F5","code":"F5"},
{"keyCode":"117","functionType":"Singlekey","value":"F6","hid":0x3F,"translate":"F6","code":"F6"},
{"keyCode":"118","functionType":"Singlekey","value":"F7","hid":0x40,"translate":"F7","code":"F7"},
{"keyCode":"119","functionType":"Singlekey","value":"F8","hid":0x41,"translate":"F8","code":"F8"},
{"keyCode":"120","functionType":"Singlekey","value":"F9","hid":0x42,"translate":"F9","code":"F9"},
{"keyCode":"121","functionType":"Singlekey","value":"F10","hid":0x43,"translate":"F10","code":"F10"},
{"keyCode":"122","functionType":"Singlekey","value":"F11","hid":0x44,"translate":"F11","code":"F11"},
{"keyCode":"123","functionType":"Singlekey","value":"F12","hid":0x45,"translate":"F12","code":"F12"},
{"keyCode":"145","functionType":"Singlekey","value":"Scroll Lock","hid":71,"translate":"Scroll Lock","code":"ScrollLock"},
{"keyCode":"186","functionType":"Singlekey","value":";","hid":51,"translate":";","code":"Semicolon"},
{"keyCode":"187","functionType":"Singlekey","value":"=","hid":46,"translate":"=","code":"Equal"},
{"keyCode":"188","functionType":"Singlekey","value":",","hid":54,"translate":",","code":"Comma"},
{"keyCode":"189","functionType":"Singlekey","value":"-","hid":45,"translate":"-","code":"Minus"},
{"keyCode":"190","functionType":"Singlekey","value":"dot","hid":55,"translate":"dot","code":"Period"},
{"keyCode":"191","functionType":"Singlekey","value":"/","hid":56,"translate":"/","code":"Slash"},
{"keyCode":"192","functionType":"Singlekey","value":"~","hid":53,"translate":"~","code":"Backquote"},
{"keyCode":"219","functionType":"Singlekey","value":"[","hid":47,"translate":"[","code":"BracketLeft"},
{"keyCode":"220","functionType":"Singlekey","value":"|","hid":49,"translate":"|","code":"Backslash"},
{"keyCode":"226","functionType":"Singlekey","value":"\\","hid":49,"translate":"IntlBackslash","code":"IntlBackslash"},
{"keyCode":"221","functionType":"Singlekey","value":"]","hid":48,"translate":"]","code":"BracketRight"},
{"keyCode":"222","functionType":"Singlekey","value":"'","hid":52,"translate":"'","code":"Quote"}]


exports.KeyMapping = KeyMapping
exports.MediaMapping = MediaMapping
exports.WindowsMapping = WindowsMapping
exports.AllFunctionMapping = AllFunctionMapping
exports.Shortcuts_WindowsMapping = Shortcuts_WindowsMapping
exports.SupportLanguage = SupportLanguage

function ProfileDefault() {
    var Profile_Info_Default = {
        //ProfileID:1,
        MousePerformance: {
            iStage: 1,
            iXYSync: 2,
            iPollingRate: 500,
            iCalibration: 1,
        },
        MouseLighting: {
            Amplitude: 2500,
            Angle: 1,
            bQuickEffect: false,
            ColorNumber: 5,
            Decay: 50,
            Fire: 5,
            iBrightness: 50,
            iEffect: 1,
            iSpeed: 50,
            Width: 3,
        },
        MouseBtnList: [
            { id: 1, group: 1, function: 1, name: 'Left button' },
            { id: 2, group: 1, function: 2, name: 'Right button' },
            { id: 3, group: 1, function: 3, name: 'Middle button' },
            { id: 4, group: 4, function: 1, name: 'Lighting effect switch' },
            { id: 5, group: 1, function: 10, name: 'DPI increase loop' },
            { id: 6, group: 1, function: 4, name: 'Forward button' },
            { id: 7, group: 1, function: 5, name: 'Backward button' },
            { id: 8, group: 1, function: 13, name: 'Squeeze' },
        ],
    }
    return Profile_Info_Default
}
exports.ProfileDefault = ProfileDefault

var CountryCode = [
    { code: 'AF', value: 'Afghanistan' },
    { code: 'AX', value: 'Åland Islands' },
    { code: 'AL', value: 'Albania' },
    { code: 'DZ', value: 'Algeria' },
    { code: 'AS', value: 'American Samoa' },
    { code: 'AD', value: 'Andorra' },
    { code: 'AO', value: 'Angola' },
    { code: 'AI', value: 'Anguilla' },
    { code: 'AQ', value: 'Antarctica' },
    { code: 'AG', value: 'Antigua and Barbuda' },
    { code: 'AR', value: 'Argentina' },
    { code: 'AM', value: 'Armenia' },
    { code: 'AW', value: 'Aruba' },
    { code: 'AU', value: 'Australia' },
    { code: 'AT', value: 'Austria' },
    { code: 'AZ', value: 'Azerbaijan' },
    { code: 'BS', value: 'Bahamas' },
    { code: 'BH', value: 'Bahrain' },
    { code: 'BD', value: 'Bangladesh' },
    { code: 'BB', value: 'Barbados' },
    { code: 'BY', value: 'Belarus' },
    { code: 'BE', value: 'Belgium' },
    { code: 'BZ', value: 'Belize' },
    { code: 'BJ', value: 'Benin' },
    { code: 'BM', value: 'Bermuda' },
    { code: 'BT', value: 'Bhutan' },
    { code: 'BO', value: 'Bolivia, Plurinational State of' },
    { code: 'BQ', value: 'Bonaire, Sint Eustatius and Saba' },
    { code: 'BA', value: 'Bosnia and Herzegovina' },
    { code: 'BW', value: 'Botswana' },
    { code: 'BV', value: 'Bouvet Island' },
    { code: 'BR', value: 'Brazil' },
    { code: 'IO', value: 'British Indian Ocean Territory' },
    { code: 'BN', value: 'Brunei Darussalam' },
    { code: 'BG', value: 'Bulgaria' },
    { code: 'BF', value: 'Burkina Faso' },
    { code: 'BI', value: 'Burundi' },
    { code: 'KH', value: 'Cambodia' },
    { code: 'CM', value: 'Cameroon' },
    { code: 'CA', value: 'Canada' },
    { code: 'CV', value: 'Cape Verde' },
    { code: 'KY', value: 'Cayman Islands' },
    { code: 'CF', value: 'Central African Republic' },
    { code: 'TD', value: 'Chad' },
    { code: 'CL', value: 'Chile' },
    { code: 'CN', value: 'China' },
    { code: 'CX', value: 'Christmas Island' },
    { code: 'CC', value: 'Cocos (Keeling) Islands' },
    { code: 'CO', value: 'Colombia' },
    { code: 'KM', value: 'Comoros' },
    { code: 'CG', value: 'Congo' },
    { code: 'CD', value: 'Congo, the Democratic Republic of the' },
    { code: 'CK', value: 'Cook Islands' },
    { code: 'CR', value: 'Costa Rica' },
    { code: 'CI', value: "Côte d'Ivoire" },
    { code: 'HR', value: 'Croatia' },
    { code: 'CU', value: 'Cuba' },
    { code: 'CW', value: 'Curaçao' },
    { code: 'CY', value: 'Cyprus' },
    { code: 'CZ', value: 'Czech Republic' },
    { code: 'DK', value: 'Denmark' },
    { code: 'DJ', value: 'Djibouti' },
    { code: 'DM', value: 'Dominica' },
    { code: 'DO', value: 'Dominican Republic' },
    { code: 'EC', value: 'Ecuador' },
    { code: 'EG', value: 'Egypt' },
    { code: 'SV', value: 'El Salvador' },
    { code: 'GQ', value: 'Equatorial Guinea' },
    { code: 'ER', value: 'Eritrea' },
    { code: 'EE', value: 'Estonia' },
    { code: 'ET', value: 'Ethiopia' },
    { code: 'FK', value: 'Falkland Islands (Malvinas)' },
    { code: 'FO', value: 'Faroe Islands' },
    { code: 'FJ', value: 'Fiji' },
    { code: 'FI', value: 'Finland' },
    { code: 'FR', value: 'France' },
    { code: 'GF', value: 'French Guiana' },
    { code: 'PF', value: 'French Polynesia' },
    { code: 'TF', value: 'French Southern Territories' },
    { code: 'GA', value: 'Gabon' },
    { code: 'GM', value: 'Gambia' },
    { code: 'GE', value: 'Georgia' },
    { code: 'DE', value: 'Germany' },
    { code: 'GH', value: 'Ghana' },
    { code: 'GI', value: 'Gibraltar' },
    { code: 'GR', value: 'Greece' },
    { code: 'GL', value: 'Greenland' },
    { code: 'GD', value: 'Grenada' },
    { code: 'GP', value: 'Guadeloupe' },
    { code: 'GU', value: 'Guam' },
    { code: 'GT', value: 'Guatemala' },
    { code: 'GG', value: 'Guernsey' },
    { code: 'GN', value: 'Guinea' },
    { code: 'GW', value: 'Guinea-Bissau' },
    { code: 'GY', value: 'Guyana' },
    { code: 'HT', value: 'Haiti' },
    { code: 'HM', value: 'Heard Island and McDonald Islands' },
    { code: 'VA', value: 'Holy See (Vatican City State)' },
    { code: 'HN', value: 'Honduras' },
    { code: 'HK', value: 'Hong Kong' },
    { code: 'HU', value: 'Hungary' },
    { code: 'IS', value: 'Iceland' },
    { code: 'IN', value: 'India' },
    { code: 'ID', value: 'Indonesia' },
    { code: 'IR', value: 'Iran, Islamic Republic of' },
    { code: 'IQ', value: 'Iraq' },
    { code: 'IE', value: 'Ireland' },
    { code: 'IM', value: 'Isle of Man' },
    { code: 'IL', value: 'Israel' },
    { code: 'IT', value: 'Italy' },
    { code: 'JM', value: 'Jamaica' },
    { code: 'JP', value: 'Japan' },
    { code: 'JE', value: 'Jersey' },
    { code: 'JO', value: 'Jordan' },
    { code: 'KZ', value: 'Kazakhstan' },
    { code: 'KE', value: 'Kenya' },
    { code: 'KI', value: 'Kiribati' },
    { code: 'KP', value: "Korea, Democratic People's Republic of" },
    { code: 'KR', value: 'Korea, Republic of' },
    { code: 'KW', value: 'Kuwait' },
    { code: 'KG', value: 'Kyrgyzstan' },
    { code: 'LA', value: "Lao People's Democratic Republic" },
    { code: 'LV', value: 'Latvia' },
    { code: 'LB', value: 'Lebanon' },
    { code: 'LS', value: 'Lesotho' },
    { code: 'LR', value: 'Liberia' },
    { code: 'LY', value: 'Libya' },
    { code: 'LI', value: 'Liechtenstein' },
    { code: 'LT', value: 'Lithuania' },
    { code: 'LU', value: 'Luxembourg' },
    { code: 'MO', value: 'Macao' },
    { code: 'MK', value: 'Macedonia, the former Yugoslav Republic of' },
    { code: 'MG', value: 'Madagascar' },
    { code: 'MW', value: 'Malawi' },
    { code: 'MY', value: 'Malaysia' },
    { code: 'MV', value: 'Maldives' },
    { code: 'ML', value: 'Mali' },
    { code: 'MT', value: 'Malta' },
    { code: 'MH', value: 'Marshall Islands' },
    { code: 'MQ', value: 'Martinique' },
    { code: 'MR', value: 'Mauritania' },
    { code: 'MU', value: 'Mauritius' },
    { code: 'YT', value: 'Mayotte' },
    { code: 'MX', value: 'Mexico' },
    { code: 'FM', value: 'Micronesia, Federated States of' },
    { code: 'MD', value: 'Moldova, Republic of' },
    { code: 'MC', value: 'Monaco' },
    { code: 'MN', value: 'Mongolia' },
    { code: 'ME', value: 'Montenegro' },
    { code: 'MS', value: 'Montserrat' },
    { code: 'MA', value: 'Morocco' },
    { code: 'MZ', value: 'Mozambique' },
    { code: 'MM', value: 'Myanmar' },
    { code: 'NA', value: 'Namibia' },
    { code: 'NR', value: 'Nauru' },
    { code: 'NP', value: 'Nepal' },
    { code: 'NL', value: 'Netherlands' },
    { code: 'NC', value: 'New Caledonia' },
    { code: 'NZ', value: 'New Zealand' },
    { code: 'NI', value: 'Nicaragua' },
    { code: 'NE', value: 'Niger' },
    { code: 'NG', value: 'Nigeria' },
    { code: 'NU', value: 'Niue' },
    { code: 'NF', value: 'Norfolk Island' },
    { code: 'MP', value: 'Northern Mariana Islands' },
    { code: 'NO', value: 'Norway' },
    { code: 'OM', value: 'Oman' },
    { code: 'PK', value: 'Pakistan' },
    { code: 'PW', value: 'Palau' },
    { code: 'PS', value: 'Palestinian Territory, Occupied' },
    { code: 'PA', value: 'Panama' },
    { code: 'PG', value: 'Papua New Guinea' },
    { code: 'PY', value: 'Paraguay' },
    { code: 'PE', value: 'Peru' },
    { code: 'PH', value: 'Philippines' },
    { code: 'PN', value: 'Pitcairn' },
    { code: 'PL', value: 'Poland' },
    { code: 'PT', value: 'Portugal' },
    { code: 'PR', value: 'Puerto Rico' },
    { code: 'QA', value: 'Qatar' },
    { code: 'RE', value: 'Réunion' },
    { code: 'RO', value: 'Romania' },
    { code: 'RU', value: 'Russian Federation' },
    { code: 'RW', value: 'Rwanda' },
    { code: 'BL', value: 'Saint Barthélemy' },
    { code: 'SH', value: 'Saint Helena, Ascension and Tristan da Cunha' },
    { code: 'KN', value: 'Saint Kitts and Nevis' },
    { code: 'LC', value: 'Saint Lucia' },
    { code: 'MF', value: 'Saint Martin (French part)' },
    { code: 'PM', value: 'Saint Pierre and Miquelon' },
    { code: 'VC', value: 'Saint Vincent and the Grenadines' },
    { code: 'WS', value: 'Samoa' },
    { code: 'SM', value: 'San Marino' },
    { code: 'ST', value: 'Sao Tome and Principe' },
    { code: 'SA', value: 'Saudi Arabia' },
    { code: 'SN', value: 'Senegal' },
    { code: 'RS', value: 'Serbia' },
    { code: 'SC', value: 'Seychelles' },
    { code: 'SL', value: 'Sierra Leone' },
    { code: 'SG', value: 'Singapore' },
    { code: 'SX', value: 'Sint Maarten (Dutch part)' },
    { code: 'SK', value: 'Slovakia' },
    { code: 'SI', value: 'Slovenia' },
    { code: 'SB', value: 'Solomon Islands' },
    { code: 'SO', value: 'Somalia' },
    { code: 'ZA', value: 'South Africa' },
    { code: 'GS', value: 'South Georgia and the South Sandwich Islands' },
    { code: 'SS', value: 'South Sudan' },
    { code: 'ES', value: 'Spain' },
    { code: 'LK', value: 'Sri Lanka' },
    { code: 'SD', value: 'Sudan' },
    { code: 'SR', value: 'Suriname' },
    { code: 'SJ', value: 'Svalbard and Jan Mayen' },
    { code: 'SZ', value: 'Swaziland' },
    { code: 'SE', value: 'Sweden' },
    { code: 'CH', value: 'Switzerland' },
    { code: 'SY', value: 'Syrian Arab Republic' },
    { code: 'TW', value: 'Taiwan, Province of China' },
    { code: 'TJ', value: 'Tajikistan' },
    { code: 'TZ', value: 'Tanzania, United Republic of' },
    { code: 'TH', value: 'Thailand' },
    { code: 'TL', value: 'Timor-Leste' },
    { code: 'TG', value: 'Togo' },
    { code: 'TK', value: 'Tokelau' },
    { code: 'TO', value: 'Tonga' },
    { code: 'TT', value: 'Trinidad and Tobago' },
    { code: 'TN', value: 'Tunisia' },
    { code: 'TR', value: 'Turkey' },
    { code: 'TM', value: 'Turkmenistan' },
    { code: 'TC', value: 'Turks and Caicos Islands' },
    { code: 'TV', value: 'Tuvalu' },
    { code: 'UG', value: 'Uganda' },
    { code: 'UA', value: 'Ukraine' },
    { code: 'AE', value: 'United Arab Emirates' },
    { code: 'GB', value: 'United Kingdom' },
    { code: 'US', value: 'United States' },
    { code: 'UM', value: 'United States Minor Outlying Islands' },
    { code: 'UY', value: 'Uruguay' },
    { code: 'UZ', value: 'Uzbekistan' },
    { code: 'VU', value: 'Vanuatu' },
    { code: 'VE', value: 'Venezuela, Bolivarian Republic of' },
    { code: 'VN', value: 'Viet Nam' },
    { code: 'VG', value: 'Virgin Islands, British' },
    { code: 'VI', value: 'Virgin Islands, U.S.' },
    { code: 'WF', value: 'Wallis and Futuna' },
    { code: 'EH', value: 'Western Sahara' },
    { code: 'YE', value: 'Yemen' },
    { code: 'ZM', value: 'Zambia' },
    { code: 'ZW', value: 'Zimbabwe' },
]

exports.CountryCode = CountryCode


/***/ }),

/***/ 0:
/*!************************************************************************!*\
  !*** multi (webpack)-dev-server/client?http://0.0.0.0:0 ./src/main.ts ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! C:\Users\Louis\Desktop\Louis\NeverGiveUp\angular-demo\node_modules\webpack-dev-server\client\index.js?http://0.0.0.0:0 */"./node_modules/webpack-dev-server/client/index.js?http://0.0.0.0:0");
module.exports = __webpack_require__(/*! C:\Users\Louis\Desktop\Louis\NeverGiveUp\angular-demo\src\main.ts */"./src/main.ts");


/***/ })

},[[0,"runtime","vendor"]]]);
//# sourceMappingURL=main.js.map